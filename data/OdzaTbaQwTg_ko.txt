박사.보겔은 탈의실에서 에이전시 소속사 출신이라고 주장하는 사람들이에요. 모든 에이전시가 만나서 반갑습니다. 그래서 제 이름은 Channing입니다. Crack Work Agency의 크리에이티브 디렉터는 Channing입니다. 정말 멋지지 않을 거예요. 그래서 바로 빠져들게 될 거예요. 그래서 우리는 연구 부서와 협업했고 당신이 새 티셔츠를 입을 때마다 80% 부스트 호감도가 3% 씩 치솟는 특별한 기회를 찾아냈습니다. 기조 연설에서 새 티셔츠를 활용할 수 있는 곳, 그리고 우리가 도움을 주면맞는 티셔츠를 찾았어요. WS 호감도가 해마다 5~ 6% 정도 올라갈 수 있다고 생각합니다. 아마도 우리 트위터 게임의 8~ 9% 가 솔렉일 수도 있습니다. 저는 저만의 티셔츠를 골라요, 오, 아니요, 작년에도 그랬어요. 그래서 작년에 네, 괜찮은 것을 보여주세요. 그래서 지금 틱톡에는 허무주의가 엄청납니다. 아니, 이게 무슨 뜻인지도 모르겠어요. 하지만 정말 대단한 것 같아요. 나쁘다. 우리 고객들이 그것보다 똑똑한 것 같아 흠 그래 그래 그래 맞아, 아, 그렇게 생각하지 않아. 그럼 이제 마지막 손님을 모욕하는 게 나을 거라는 걸 알아확인해 보세요 오 와우 네, 그럼 저는 항상 그 얼굴을 입을 거예요 다른 사람에게도 잘 어울릴 거예요. 제 티셔츠를 고르게 해주시면 어떨까요? 그래서 조이의 대중에게 도움을 주셔서 감사합니다. 지금 바로 그렇습니다. 오 좋아요, 마담, amazon.com dr의 최고 기술 책임자를 환영합니다.Verner Vogel의 [음악] 멋진 티셔츠, 변덕스러운 모습, 첫날 이벤트에 오신 모든 분들을 환영합니다. 지금까지도 정말 좋은 행사가 되셨기를 바랍니다. 항상 그래왔듯이 배움이자 교육적인 경험이고, 여러분들이 지난 며칠 동안 많은 것을 배웠기를 바랍니다. 저는 올해 다른 일을 하고 일종의 새로운 기능과 서비스보다 AWS와 Amazon의 무대 뒤에서 좀 더 집중할 것이라고 생각했기 때문에 한 가지 AWS에서 정말 운이 좋았습니다. AWS가 13년 동안 이 일을 해왔고 우리는 그 분야에서 많은 경험을 쌓았다는 것입니다.그리고 그 경험을 통해 우리는 숨은 방식으로 혁신을 이룰 수 있었습니다. 지난 며칠 동안 출시된 새로운 서비스와 기능을 모두 보았지만 우리가 무대 뒤에서 하고 있는 일이 많다는 사실을 잊어버릴 수도 있습니다. 제프 베조스의 말을 들어보면 혁신에 집중하고 싶다면 때때로 혁신에 집중하려면 고객을 위해 절대 변하지 않는 것에 집중해야 하기 때문입니다. 그렇게 하면 그들에게 영원히 도움이 될 플라이휠을 만들 수 있습니다. 어떻게 되는지 쉽게 알 수 있습니다.소매업에서 작동합니다. 네, 카탈로그가 크다는 것은 원하는 것을 잘 찾을 가능성이 높다는 것을 의미합니다. 우리는 배송을 더 잘 보장하고 있습니다. 하지만 AWS에서는 어떻게 작동합니까? 고객의 보안 성능, 규모, 안정성, 비용 효율성, 운영 우수성을 위해 절대 변하지 않는 것은 무엇입니까? 그런 모든 것들이 변하지 않습니다. 그 매개 변수에 대해 우리가 하는 일은 당신에게 영원히 도움이 될 것입니다. 그 자체로는 사물에 대한 보도 자료를 내놓을 일이 아닙니다. 우리가 하는 일종의 혁신예를 들어 저희가 보유한 시스템의 모든 구성 요소의 성능을 향상시키도록 항상 노력해야 합니다. 그래서 오늘은 라미레즈에서 무대 뒤에서 해왔던 몇 가지 작업을 살펴보고 그 과정에서 어떤 교훈을 얻었는지 살펴본 다음 여러분도 그 교훈을 좋아하고 집에 가져가서 뭔가 할 수 있을지도 모른다는 생각이 들었습니다. 수정의 일상화에 대해 가장 먼저 말씀드리고 싶은 것은 수정에 관한 일종의 빵과 버터에 관한 것입니다.클라우드 환경의 첫날부터 컴퓨터는 클라우드 컴퓨팅이 그 자체로 커질 수 있게 해준 주요 기술 중 하나입니다. 클래식 가상화를 보면 사실 60년대에는 꽤 오랜 기간 동안 발전해 왔습니다. 주요 메인프레임은 이미 가상화였을 것입니다. 하지만 오늘날 가상화는 기본적으로 스탠포드에서 이룬 주요 연구를 통해 실현되었습니다. a) 스탠포드는 VMware를 만들었고 다음과 같은 바이너리 재작성을 사용했습니다.권한 있는 명령을 하이퍼바이저에 저장한 다음 다른 접근 방식을 취한 다음 [음악] 실제로 운영 체제에 맞게 수정하여 하이퍼바이저에 갇혀 이전 명령을 실행합니다. 따라서 적어도 가상화의 기반을 살펴보면 시간이 지남에 따라 가상화의 한계를 뛰어넘었다는 것을 알 수 있습니다. 가상화에는 가상화 세금의 루트 I이라는 것이 있습니다. 기본적으로 이러한 게스트 서비스를 모두 보유하고 있다면 모두 같은 것을 위해 싸우고 있습니다. IO 리소스, 특히 다음에서 볼 수 있습니다.네트워크에서 이 비주얼리제이션이 실제로 확장된 시점을 보면 대부분의 고객 또는 대부분의 게스트 OS (지터, 지연 시간, 지연 시간) 가 네트워크 상에서 가장 큰 영향을 받았다는 것을 알 수 있습니다. 대부분 같은 네트워크 장치를 위해 싸우고 있었기 때문입니다. 그래서 우리는 이 상황을 근본적으로 바꾸고 가상화에 대해 다시 생각해 보기 시작했습니다. 이를 통해 고객을 위한 혁신의 기반을 실제로 만들 수 있습니다. 또한 새로운 종류의 아키텍처가 실제로 존재한다는 사실도 다루어야 했습니다.구식 가상화로 인해 어려움을 겪고 있었습니다. 가능하다면 고객에게 거의 베어메탈에 가까운 성능을 제공하고 싶었습니다. 그리고 기존 가상화에서는 이 모든 것에 상당한 오버헤드가 있다는 것을 알았기 때문에 적어도 모듈식 시스템을 구축하고 싶었습니다. 적어도 아마존에서 하고 있는 일이기 때문에 소프트웨어에서 배운 교훈을 바탕으로 가상화 세계의 하드웨어 세계에도 실제로 적용하려고 생각하고 있습니다. 기본적으로 다음과 같은 전통을 봐야 합니다.가상화는 모든 하드웨어 구성 요소가 실제로 동일한 하이퍼바이저에 의해 관리되는 모놀리스 같은 세상입니다. 작은 구성 요소가 있는 마이크로서비스에서 교훈을 얻으면 우리가 정말 빠르게 혁신할 수 있고 하드웨어 세계에도 이를 공급하기 위해 노력할 수 있다면 가상화의 세계도 쫓을 수 있을 것입니다. 그렇다면 이러한 모든 장치를 갖춘 세상을 만들 수 있을까요? API가 있습니다. API는 PCI 버스와 같은 하드웨어 API일 수 있지만 여전히 하드웨어 하드웨어입니다.여전히 하드웨어가 사용하는 API입니다. 그래서 니트로 시스템의 진화 과정에서 우리가 밟은 다양한 단계를 살펴보죠. 이제는 정말 전통적인 가상화로 시작했습니다. 네트워크 측면에서 해결하려고 하는 첫 번째 문제인데, 기본적으로 전송된 것인데 s3에서 8기가비트 파일이 전송되면 말 그대로 수십만 개의 커널 트랩이 생길 수 있을지 정말 알고 싶었습니다. 그 특정한 문제를 실제로 해결했으니 우리가 했던 일을 실제로 네트워크로 옮겼죠.컴포넌트를 별도의 카트에 담았는데, 이것이 바로 2013년에 출시한 c3 인스턴스에서 보셨던 것입니다. 실제로 I/O를 별도의 카트에 오프로드하면서 많은 것을 배웠고 실제로 훨씬 더 익숙해지기까지 2년이 더 걸렸습니다. 동일한 서버에 있는 별도의 카드에 프로세싱을 업로드하는 데 걸리는 두 번째 단계는 Anna와 함께 작업하기 시작했을 때 실제로 c4 아키텍처에서였습니다. EBS 프로세싱을 실제로 옮기거나 별도의 카드로 옮기는 것이 좋습니다.이제 메인 CPU에서 발생하는 볼륨 프로세싱과 네트워크가 아닙니다. C-4의 Nitro 카트에서 큰 성공을 거두어 상대방이 실제로 AWS에 합류하게 되었고 우리는 C5에 대한 작업을 시작했는데 이는 큰 도약이었습니다. 왜냐하면 우리가 서버에서 해야 할 일을 할 수 있기 때문입니다. 두 대의 차량에 있는 모든 I/O를 매진시키고 다음 단계는 캔에 대해 진지하게 고민하기 시작할 것입니다. 우리는 실제로 하이퍼바이저의 다른 부분들을 모두 제거하고 그 모든 부분을 별도의 차량에 실어 컨트롤 플레인으로 옮기면완전한 니트로 시스템을 만들었죠. 그래서 관리를 하지 않는 니트로 컨트롤러는 완전히 최소화된 새로운 하이퍼바이저를 만들었죠. 그래서 이 모든 작업을 수행할 수 있게 했고, 그래서 첫 번째 것들은 X와 X가 실제로 훨씬 더 빨라진 첫 번째 시스템이었죠. 성능과 이를 통해 사람들이 이전까지 할 수 있었던 안전이 가능했으니, 이런 단어들이 어떻게 상호작용하는지 살펴보죠. 볼륨: EBS 볼륨: 실제로 EBS 컨트롤과 통신하는 볼륨을 연결합니다.조명 시스템에서 메트로에 있는 EBS 카트와 통신하는 비행기는 이를 실제로 NVME 장치로 전송합니다. 그런 다음 하이퍼바이저가 이를 트랩하여 게스트 어레스트에 볼륨을 마운트합니다. 일종의 프리 니트로 하이퍼바이저를 보면 꽤 성공적이었습니다. 이것은 여러분이 보게 될 전형적인 지터입니다. 오늘 밤 플로리다와 함께 인도 기기에서 상호작용하고 있습니다. 기본적으로 모든 Jetta가 사라졌기 때문에 i ops를 두 배로 늘려 EBS를 늘릴 수 있게 되었습니다.처리량은 어마어마합니다. 앞서 보신 것처럼 EBS에 최적화된 대역폭이 실제로 초당 40기가바이트에서 19기가비트로 증가했다면 이제는 네트워킹과 EBS입니다. 이는 실제로 모든 고객에게 매우 중요합니다. 하지만 프로세서에 발생한 문제를 처리하고 있는 David Brown의 경우 처리 시간이 50마이크로초라는 무거운 요구 사항을 가진 고객과 상담한 경우 이 e4를 보세요. 하룻밤 전에 하이퍼바이저가 도입되었습니다.고객이 처리 능력을 충족하고 있다는 것을 알 수 있습니다. 고객에게 실제로 c5에서 동일한 것을 시도해 보도록 요청하겠습니다. 보시다시피 c5는 성능이 있고 거의 베어 메탈에 가깝습니다. 이것은 순전히 하이퍼바이저가 너무 얇아서 누가 원하는 성능을 얻어야 하는지 추측하는 데 방해가 되지 않기 때문입니다. 스토리 에이전시 (예, 얼음은 이미 끝났습니다) 저장 대신 사용되지만 p50뿐만 아니라 p50에서도 니트릴을 도입하거나 도입한 후에도 알 수 있습니다.성능 스펙트럼의 끝자락에는 탄탄한 성능이 있고 그 자체로도 거의 4배나 향상되었습니다. 동일성을 볼 수 있습니다. 우리가 만든 네트워크 최적화 인스턴스를 보면 연말에 N이 붙은 인스턴스 이름을 볼 수 있습니다. 월요일에 있었던 santoses 강연에서 다시 말씀드리자면 100기가 네트워크를 제공하기 위해 추가로 만든 보드를 볼 수 있습니다. 그리고 다시 성능은 4배 향상되었습니다. 단순히 이 모든 것을 별도의 카드에 오프로드하는 경우 성능을 개선하고자 했던 것이 아닙니다.보안을 개선할 수도 있습니다. 0에서 아무도 죽이지 않았죠. 네, 예전 스타일의 돈 제로 수정은 완전한 Linux 인스턴스라는 것을 기억해야 합니다. 기본적으로 로그인하여 메모리 덤프를 할 수 있는데 이는 매우 큰 보안 위험입니다. 예, 실제로 dom0을 제거하면 장치에 대한 SSH 또는 기타 액세스 권한도 제거되고 훨씬 더 안전한 환경을 만들 수 있습니다. 오, 고마워요, 이 변형 작업을 수행하겠습니다. 이것은 전체 니트로 보안 설계에서 매우 중요한 부분이기 때문에 기본적으로 통신을 제어해야 합니다.흐름: 컨트롤러가 밤에 통신을 허용한 하이퍼바이저와 통신할 것입니다. 하이퍼바이저는 다시 통신할 수 없습니다. 마이크로 컨트롤러에 실제로 액세스하기 위해 제어 조치를 취하려는 과대 광고가 있으면 시스템이 손상되었다는 것을 알면 시스템을 격리할 수 있습니다. 조사를 시작할 수 있습니다. 외부 컨트롤 플레인 기능 (zz2 또는 abs) 도 마찬가지입니다. 방금 E에서 살펴본 것처럼 물질 컨트롤러에서 통신할 수 있습니다. 예를 들어 NATO 컨트롤러는 다음과 같은 경우 다른 조치를 취할 수 없습니다.“9.0 컨트롤러 XE가 네트워크 상에서 활발히 활동하기 시작합니다. 시스템이 손상되었다는 것을 다시 한 번 알게 되었습니다. 이를 격리할 수 있습니다. 이것은 매우 안전한 시스템을 구축할 수 있게 해주는 독특한 통신 설계입니다. 따라서 관심 있는 세상에서 컴퓨팅만으로 마이어스를 구현할 수 있어야 합니다. 따라서 우리는 신뢰할 수 있는 두 개의 부품을 만들었습니다. 멋진 이중 시스템도 있지만 니트로 시스템은 그 자체로도 완전히 신뢰할 수 있는 네트워크에 있습니다. 모든 회사가 모든 구성 요소를 갖추고 있습니다. 실제로 서로 이야기할 수 있는 또 다른 일은암호화하면 제가 이 분야에서 거의 열렬한 팬이었기 때문에 모든 것을 암호화하고 니트로 카드를 통해 통신을 암호화하는 모든 것을 암호화할 수 있습니다. 기본적으로 모든 것이 니트로로 암호화되며 네트워크 외부로 나가는 것뿐만 아니라 로컬 디스크도 성능에 전혀 영향을 미치지 않고 기본적으로 암호화됩니다. 이러한 방식으로 보안이 크게 향상되었습니다. 호스트나 게스트를 믿을 수도 없어요. 네, 게스트가 믿을 수 있는지 확인해야 해요.더 이상 기계 하드웨어에 대해 저희가 절대 허용하지 않는 일을 하지 마십시오. 예를 들어 저희가 절대 허용하지 않는 한 가지는 기계의 비휘발성 메모리를 수정하는 것입니다. 그리고 기계가 부팅될 때 우리가 하는 일은 실제로 기계의 모든 구성 요소를 그래픽으로 검사하여 어떤 식으로든 손상되지 않았는지 확인하는 것입니다. 그렇지 않으면 기계를 격리하고 실제로 조사를 시작할 것입니다. 이제 니트로가 혁신의 기반이 되어 기침을 멈췄지만 이제 우리는 모든 것을 할 수 있게 되었습니다.이전에는 할 수 없었던 것들이죠. 예를 들어 수명 업데이트를 하고, 운영 체제에 패치를 적용할 수 있고, Nitro 카트에서 아무 것도 다운하지 않고 하이퍼바이저를 패치할 수 있고, 여기에 새로운 하이퍼바이저를 추가할 수 있고, 베어 메탈을 획득할 수 있고, 전초 기지를 만들 수도 있었습니다. 이 모든 것들은 컴퓨팅 환경을 제어하는 니트로라는 플랫폼을 만들었기 때문에 가능했습니다. 우리가 요청했던 혁신은 우리가 보유한 더 민감한 데이터를 실제로 보호하는 것이었습니다.고객의 수가 많고 물론 사용하기 쉬운 것은 매우 민감한 프로세싱에 사용됩니다. 고객이 우리를 위해 할 수 있는 일을 더 해 줄 수 있냐고 물었습니다. 우리가 지금 니트로에서 할 수 있다는 점을 감안하면 매우 독특한 일입니다. 그리고 이번 주 초에 우리는 메모리의 일부를 차단할 수 있는 엔클레이브에 대해 발표했습니다. 그리고 그 메모리는 쿨롱 엔클레이브와 그 안에 있습니다. 코드를 가져올 수 있는 엔클레이브를 만들고 코드가 암호학적으로 올바른지 지속적으로 검사하여 해당 코드가 올바른지 확인합니다.보안 위협이 전혀 없습니다. 상위 인스턴스인 사용자는 네트워크나 디스크에 대한 액세스 권한도 없습니다. 상위 인스턴스인 사용자는 통신 가능한 보안 채널을 통해 Free Sox를 통해 실제로 통신할 수 있습니다. 이를 통해 상당수의 고객이 민감한 데이터를 훨씬 더 세밀하게 제어할 수 있게 되었습니다. 이제 일종의 야간 또는 관련 혁신을 보면 그것이 어디서 시작되었는지 알 수 있을까요? 네, 우리는 X개의 인스턴스 수에 대한 릴리스를 늘릴 수 있었습니다. 우리는 니트로를 만들었고, 이는 판도를 완전히 바꿔놓았습니다. 우리의 방식이 정말 바뀌었습니다.컴퓨팅 환경과 컴퓨터 환경의 제어에 대해 생각해 보세요. VM뿐만 아니라 컨테이너와 표면에 대한 지원을 찾을 수 있을까요? Firecracker라는 마이크로 필름을 소개했습니다. Firecracker와 Fargate는 분명히 AWS 컨테이너 팀에서 수석 소프트웨어 엔지니어로 활동하고 있습니다. [음악] 안녕하세요. 이레 리구오리 (Liguori) 씨와 저는 오늘 이 자리에서 여러분을 모시게 되어 정말 기쁩니다. 먼 게이트는 서버리스 컴퓨팅을 위한 서버리스 컴퓨팅을 위한 것입니다.Far Gate에서는 고객을 위해 매주 수천만 개의 컨테이너를 실행하고 있습니다. 보안은 이러한 서버리스 컨테이너 워크로드에 대한 우리의 최우선 과제입니다. 가상화는 워크로드 간의 강력한 격리 경계를 제공합니다. Fargo에서는 가상화를 사용하여 고객을 서로 격리하고 심지어 애플리케이션 (애플리케이션 및 Fargate) 의 각 복사본을 격리하는 데에도 하나 이상의 컨테이너로 구성되며, Fargate는 Fargate 격리의 내부 하에 있는 자체 가상 머신에서 실행됩니다. 실행 중인 다른 모든 컨테이너에서 가져온 것입니다.Fargate 내부에는 전용 커널 네트워크 인터페이스 (데이터 볼륨 및 자격 증명) 가 있기 때문에 애플리케이션을 여러 수준에서 격리할 수 있습니다. 이 격리된 가상 머신에서 내부적으로 실행되는 일반적인 애플리케이션이 어떤 모습인지 보여드리고자 합니다. 재창조 퀴즈입니다. 재창조에 관한 온라인 상식 게임으로 화요일에 Fargate에서 실행되고 있습니다. 이제 Elastic 커뮤니티 서비스와 함께 Fargate를 사용할 수 있다고 발표합니다. 이 응용 프로그램은 eks와 Fargate를 사용하므로 무엇을 보여 드릴까요?이 웹 사이트에 대규모 트래픽 스파이크가 발생하면 Fargate에서 내부적으로 발생합니다. 예를 들어 Rhema 기조 연설에서 수천 명의 사람들에게 보여줬습니다. 먼저 트래픽 변경을 처리하기 위해 Fargate를 자체 ec2 인스턴스에서 실행하지 않고 eks로 이 애플리케이션을 실행할 때 어떤 일이 발생하는지 살펴보겠습니다. pod와 kubernetes라는 컨테이너의 수와 ec2 인스턴스의 수를 모두 자동으로 확장하도록 kubernetes를 구성했습니다. 그래서 여기에서와 같이 일반적인 트래픽의 경우 몇 가지 쉬운 인스턴스에서 몇 개의 포드를 실행하고 있습니다. 이제 게임을 방금 보여 드렸습니다.기조 연설이므로 물론 게임을 시도하는 사람들로 트래픽이 넘쳐날 것입니다. 하지만 kubernetes가 해당 트래픽을 처리하는 데 필요한 모든 포드를 실행할 수 있을 만큼 충분한 ec2 인스턴스를 스핀업하는 데 시간이 조금 걸립니다. 따라서 해당 인스턴스가 시작되기를 기다리는 동안 프로비저닝이 부족하여 지연 시간이 크게 증가하고 잠시 후 트래픽이 감소하기 시작할 것입니다. kubernetes는 포드 스핀다운으로 이어집니다. 결국 해당 ec2 인스턴스를 종료하지만 즉각적인 축소는 포드 축소보다 지연되는 경향이 있으므로 이 기간 동안 실제로오버프로비저닝은 이제 동일한 상황에서 어떤 일이 발생하는지 살펴보도록 하겠습니다. Fargate를 사용하면 이러한 모든 포드를 실행할 수 있는 충분한 ec2 인스턴스가 있는지 걱정할 필요가 없습니다. 서버리스 컴퓨팅입니다. 파 게이트는 가상 머신에서 각 포드를 분리하고 포드당 적절한 양의 컴퓨팅을 할당하므로 트래픽 스파이크가 다시 발생하기 때문에 새로운 파드와 파 게이트가 등장하고 있습니다. 후드 아래의 포드당 새 가상 머신을 빠르게 할당하고 있습니다. 포드가 시작될 때 약간의 지연 시간이 발생하지만일단 가동되어 실행되면 파드 (far gate) 를 사용하면 파드의 수가 사이트 트래픽 변화에 매우 빠르게 반응할 수 있고, 트래픽이 감소할 때 kubernetes는 이러한 포드를 축소할 수 있으며, 저는 파 게이트 서버 목록 컴퓨팅을 나란히 사용하고 있기 때문에 오버프로비저닝에 대해 걱정할 필요가 없습니다. 여기에서 내 ec2 인스턴스에서 실행하는 것과 Fargate에서 실행하는 것의 차이를 아래에서 쉽게 확인할 수 있습니다. 그리고 프로비저닝이 너무 많았지만 게이트 4개를 통해 각 게이트가 격리된 트래픽 변화에 빠르게 대응할 수 있었습니다.가상 머신이 있는 포드에 적절한 양의 컴퓨팅을 할당했습니다. 이제 서버리스 컴퓨팅을 위해 컨테이너를 어디까지 확장하고 격리하는지 살펴보았습니다. 이제 faregates가 출시된 이후 애플리케이션 간의 강력한 격리 경계를 제공하기 위해 사용하는 가상화 기술을 살펴보겠습니다. 이 모델에서는 각 애플리케이션에 Fargate 데이터 플레인을 실행하는 새롭고 쉬운 인스턴스가 할당되지만 기존 가상 머신에서는 Fargate 데이터 플레인을 실행하는 새롭고 쉬운 인스턴스가 할당되지만 기존 가상 머신에는 기계는 격리에 사용하기에는 꽤 무겁습니다.컨테이너 기존 가상 시스템은 컨테이너가 신경 쓰지 않는 많은 인터페이스와 장치를 제공하는 경향이 있습니다. 예를 들어 기존 VM은 일반적으로 비디오 카드를 제공하고 그래픽을 위해 최소 4메가바이트의 메모리를 예약하지만 컨테이너는 그래픽 환경이 거의 없고 Fargate에서는 256메가바이트로 매우 작을 수 있으므로 Fargate는 컨테이너를 격리하는 데 더 나은 효율성을 제공합니다. Fargate는 컨테이너를 격리하는 데 더 나은 효율성을 제공합니다. Gate는 컨테이너를 격리하기 위해 특별히 제작되었으며마이크로 VM이라고 하는 가상 시스템의 기능은 기존 VM과 동일한 수준의 격리를 제공하지만 빠르고 가벼우며 필요하지 않은 디바이스가 전혀 없습니다. 디바이스 모델은 컨테이너와 기능에 실제로 필요한 디바이스만 구현하므로 기존 VM처럼 4메가바이트의 메모리를 예약하는 마이크로 비아 내부에 비디오 카드가 없습니다. 실제로 마이크로 VM은 총 5메가바이트 미만의 오버헤드가 필요합니다. 그래서 컨테이너를 분리하는 데 매우 효율적으로 사용할 수 있습니다. 그리고 열린 모습을 보게 되어 정말 기뻤습니다.위브 (weave) 와 같은 소스 프로젝트는 야간에 작동하고, Kotik 컨테이너는 Firecracker를 활용하여 프로젝트에서 빠르고 효율적인 격리를 제공합니다. 따라서 Firecracker 기반 us 격리를 사용하면 각 대상 애플리케이션에 새로운 ec2 인스턴스 대신 새로운 Firecracker 마이크로 VM을 할당할 수 있습니다. 이러한 마이크로 비아는 이미 보여 드렸던 ec2 인스턴스와 매우 유사하며 내부에서 실행되는 애플리케이션 컨테이너와 차이가 없습니다. Fargate 데이터 플레인과 같은 구성 요소가 모두 동일하지만 폭죽을 사용하면 가능했습니다.기존 VM에 비해 더 나은 효율성을 달성하기 위해 Firecracker를 사용하는 Firecracker에서 점점 더 많은 원거리 게이트 (Fargate) 를 실행함에 따라 각 마이크로 VM이 자체적으로 격리된 Fargate 애플리케이션을 실행하는 방식으로 많은 마이크로 VM을 하나의 Nitro Bare Metal 인스턴스에 패킹할 수 있습니다. 밀도가 높으면 Fargate에서는 효율성이 향상된다는 의미입니다. Fargate에서는 현재 작업 중인 작업에 대해 간단히 말씀드리고자 합니다. Fargate에서는 원래 실행했던 Fargate에 폭죽을 넣는 방법을 최적화하고 있습니다. 각 마이크로 VM 내부의 동일한 대상 데이터 플레인이 각 인스턴스에서 수행한 것처럼 동일하지만 더 이상 최적이 아닙니다.Nitro 베어 메탈에서 확장성이 높고 밀도가 높기 때문에 서비스 컨테이너 컴퓨팅의 고유한 요구 사항에 맞게 Fargate 데이터 플레인을 처음부터 다시 설계했습니다. 현재 개발 중인 이 새로운 데이터 플레인은 모든 마이크로 VM과 그 내부의 컨테이너 워크로드를 관리하는 Nitro 베어 메탈 인스턴스에서 직접 실행되도록 설계되었습니다. 마이크로 VM 내부에서 실행되는 컨테이너는 기다릴 필요가 없기 때문에 실제로 이 모델에서는 더 빠르게 시작할 수 있습니다. 우리가 개발 중인 멀리 떨어진 데이터 플레인과 같이 마이크로에서 시작하는 다른 구성 요소들은이 새로운 Fargate 데이터 플레인의 핵심 구성 요소는 github에 공개되어 있습니다. 파이어 크래커 컨테이너 D 프로젝트 파이어 크래커 컨테이너 D는 파이어 크래커를 사용하여 컨테이너를 격리하는 것을 더 간단하게 만듭니다. 오픈 소스 프로젝트 컨테이너 d를 사용하여 파이어 크래커 마이크로 VMS를 관리할 수 있습니다. 마이크로 VM에서 컨테이너를 격리하는 데 필요한 오버헤드를 최소화하고 컨테이너 이미지를 블록 디바이스로 마이크로 VM에 노출시켜 체크아웃이 파이어 크래커가 발생하지 않도록 합니다. 컨테이너 d를 github에 올려서 Fargate 언더 후드 일부의 미래를 살짝 엿볼 수 있게 해줘서 정말 고마워요 [음악]투명 필름으로 목재를 사용할 수 있다는 것은 물론 다행스러운 일이에요. 네, 사마귀를 보시면 지난 몇 년간 동문들이 발전하는 모습을 보시면 아시겠지만, 지난 몇 년간 우리가 해왔던 일이 몇 주, 몇 달이었고 릴리즈하면서 정말 멋진 일들을 해냈다고 생각합니다. 많은 분들이 fEPC 경계에 의존하고 있다는 점을 감안하면 실제로 시작 지연 시간을 크게 줄일 수 있었습니다. CPC 한도 내에서 PC 대역폭을 사용할 수 있습니다. 새로 출시한 동시성 확장 기능을 보면 다른 모든 구성 요소가 매우 효율적입니다.동시성을 비교해 보면 시작 시간 및 기타 여러 부분을 정말 잘 제어할 수 있습니다. 사실 우리가 잘 이해하지 못하고 있다는 사실도 잊어버렸습니다. 우리는 표면 기술이 젊은 기술 회사에 의해 처음 채택될 것이라고 생각했지만 그렇지 않다는 것이 밝혀졌습니다. 기업에서 서비스가 빠르게 채택되고 있는 이유는 대부분 실행 시간에 대해서만 비용을 지불하면 되고 관리가 훨씬 간단하기 때문입니다. 엄청난 속도의 서비스, 우리는 당신에게 소개하고 싶습니다Jeff, IT 경영진이 어떻게 이러한 기술을 활용하여 뱅가드 제프리 (Vanguard Jeffrey) 를 완전히 개조하고 있는지 공유합니다. [음악] 안녕하세요. 오늘 뱅가드를 대표하게 되어 매우 기쁩니다. 뱅가드에서 클라우드로 향하는 뱅가드의 여정을 여러분과 공유하게 되어 기쁩니다. 뱅가드의 핵심 목적은 모든 투자자가 자신을 공정하게 대우하고 투자 성공의 최고의 기회를 제공하는 것입니다. 우리는 글로벌 자산 관리사이며 3천만 명의 투자자가 우리에게 5포인트 7조 달러를 맡긴 글로벌 자산 관리사입니다.당사가 제공하는 자산: 450개의 투자 상품을 보유하고 있습니다. 17,000명의 직원을 보유하고 있습니다. 이것이 바로 직원을 지칭하는 방식입니다. 물리적 지점이 없습니다. 디지털 기업입니다. 고객 상호 작용의 90% 가 디지털 채널을 통해 이루어집니다. 40년 동안 투자 비용을 절감해 왔습니다. 가장 중요한 것은 IT 관점에서 볼 때 업계 최고의 고객 만족도 결과를 얻고 있다는 것입니다. 당사는 규모가 크고 복잡합니다. 글로벌 데이터 센터, 메인프레임, 수천 개의 서버, 많은 스토리지, 수천 개의 엔드포인트, 5,000개의 기술 직원을 보유하고 있습니다. 그리고 우리 회사의 다운타임은 그렇지 않습니다.60년 전, 뱅가드의 수석 IT 리더들이 혁신을 시작했습니다. 우리는 뱅가드가 디지털 시대에서 경쟁력을 유지하려면 IT 비즈니스를 더 잘해야 한다는 것을 알고 있었습니다. 우리는 혁신의 속도를 가속화하고 싶었습니다. 우리는 스타트업 속도로 비즈니스 가치를 제공하고 지속적 전달, DevOps, 마이크로 서비스, 클라우드, 새로운 작업 방식 (CI CD) 이 모두 작용했지만, 우리는 클라우드가 빠르게 나아갈 수 있는 초석이라는 것을 알고 있었습니다. 알고 있는 것이 성공의 핵심입니다. 그래서 우리는 사설 클라우드 여정을 시작했습니다.퍼블릭 클라우드 보안에 대한 우려 2015년에 퍼블릭 클라우드 보안에 대한 우려: AWS에서 제공하는 클라우드 기반 서비스와 경쟁할 수 없다는 것을 알았고 프라이빗 클라우드를 구축하는 데 너무 오래 걸리고 비용이 많이 든다는 것도 알고 있었습니다. 시즌과 다른 고위 경영진들과 잠깐 이야기를 나누고 퍼블릭 클라우드로 전환했습니다. 우리는 목적지로 퍼블릭 클라우드를 사용하는 클라우드 공급자로 AWS를 선택했습니다. 빠르게 클라우드 구축 팀을 구성했으며, 그 중 상당수가 오늘 청중으로 참석했습니다. 감사합니다.여러분, 구조가 풀스택이고, 사명이 성과 지향적이라는 것, 무엇보다도 목표가 일치합니다. 그래서 빅 데이터 센터를 갖춘 Vanguard와 같은 대기업이 어떻게 클라우드를 구축할 수 있을까요? 우리의 출발점은 무엇이었습니까? 전통적인 기술 스택이 심하게 가상화되었고 빅 데이터 플랫폼, 모놀리식 애플리케이션이 있었습니다. 저는 백만 줄의 코드인 모놀리스에 대해 말하는 것이 아닙니다. 우리는 30, 4,000만 줄의 코드인 모놀리스가 있었고 우리는 다음의 설계 지침에 따라 새로운 마이크로 서비스 포트폴리오를 위해 Prem에서 운영되고 있는 유인원보안은 우선 엄격한 규제를 받는 자산 관리자에 맞추어 계정을 구축합니다. 보안과 함께 10050개 이상의 보안 제어를 수반하는 보안 장치와 PC를 구성했습니다. 일부 워크로드를 클라우드로 이전하기 시작하고, 일부 웹 앱 또는 서비스로 시작했으며, 이것이 클라우드로 일부 워크로드를 가져오기 시작하는 가장 빠른 방법이라고 생각하여 테이프를 옮겼으며, 동시에 DNS용 Route 53을 사용하여 보안 인터넷 연결을 구축했습니다. AWS는 CDN을 위한 웹 애플리케이션 방화벽이자 클라우드 프론트이기도 합니다.시설 간 복원력과 대역폭을 개선하기 위해 VPN 액세스에서 Direct Connect로 마이그레이션한 후 빠르게 성장하는 온프레미스 빅 데이터 플랫폼 폐쇄에서 승리했습니다. 우리는 s3 및 EMR을 많이 사용하게 되었습니다. Comprehend Lex sage maker가 전술했으며 Glu는 더 많은 AWS 보안 서비스를 도입했습니다. 인증 자격 증명을 위해 비밀 관리자를 사용하고, 민감한 정보를 발견하고 보호하는 데에는 Macy를 사용하고, DDoS 보호를 위해 쉴드를 사용합니다. 데이터를 마이크로에 더 가깝게여전히 CDC 기술을 사용하여 데이터를 보관하기 위해 하나의 Prem 데이터 센터로 다시 연락하던 서비스입니다. Aurora와 함께 이를 통해 자체 Prem 관계형 데이터베이스에서 유사한 스키마로 데이터를 이동할 수 있었습니다. 마이크로 서비스 솔루션 제공 팀 중 일부는 키 값 구조의 데이터에 대한 액세스를 원했기 때문에 데이터 스트리밍에 Kinesis를 사용하고 이벤트 기반 데이터 변환을 위해 Lambda를 사용하는 Dynamo를 도입했습니다. 그래서 Dynamo DB로 전환하기 시작했고, 이것이 바로 Dynamo DB로 전환하기 시작했습니다. 우리는 클라우드 기반 데이터 캐시를 제거할 수 있는 위치에 있습니다. 우리의 다음 중요한 설계 결정은 다음과 같습니다.앞서 학습자 의견에서 언급한 바와 같이 API를 Fargate의 ECS로 전환했습니다. 컨테이너 격리가 강화되었고, 보안을 즉시 사용할 수 있었으며, 다른 주요 서비스, 특히 ID 및 액세스 관리와의 통합이 가장 중요했습니다. 가장 중요한 것은 AWS 청구서를 지불한 사람이었고, 순수 소비 모델에 Fargate의 ECS를 연결했습니다. 이제 가속화되면서 API에서 마이크로 서비스를 고갈시키기 시작했습니다. 모노리스가 분해되는 속도를 조절하면 가까운 장래에 유인원을 퇴역시킬 수 있을 것입니다.마침내 우리는 기능 및 데이터의 제한된 컨텍스트를 클라우드로 이전하기 시작했습니다. 최근에는 새롭게 떠오르는 자문 플랫폼을 Fargate의 ECS에서 호스팅하기로 전략적으로 결정했습니다. 이 플랫폼은 고객의 수요가 점점 증가하고 있는 자문 서비스를 지원합니다. 최종 상태는 거의 100% 클라우드 네이티브 아키텍처입니다. Vanguard는 이를 통해 컴퓨팅 비용을 최소 30% 절감할 수 있다는 것을 알고 있습니다. 소프트웨어를 30% 이상 구축할 수 있다는 것을 알고 있습니다. 우리는 우리의 능력을 20배 더 빠르게 배포할 수 있다는 것을 알고 있습니다. 그리고 이 모든 것이1973년 이래로 뱅가드는 투자자들의 금융 보안 추구 방식을 혁신하고 있습니다. 뱅가드는 투자자들이 금융 보안을 추구하는 방식을 혁신해 온 것이 17번째입니다. 뱅가드가 어딘가 재창조 무대에 선 것은 17번째입니다. 이러한 기회를 주신 AWS에 감사의 말씀을 전합니다. 이 모든 것을 가능하게 해주신 Vanguard 클라우드 구축 팀에 감사드리며, 금융 보안을 누릴 수 있도록 자산을 맡겨주신 투자자분들께 감사의 말씀을 전합니다. [박수] 고마워요 [음악] 그래서 충실한 고객들의 이야기를 들을 수 있어서 정말 좋아요팬들이 좋아한다는 것, 특히 플랫폼에서 얻을 수 있는 모든 이점을 볼 때 특히 한 가지 더 일반적인 개념에 대해 생각해 보면, AWS와 Amazon도 그렇지만 특히 AWS는 항상 진화 가능한 아키텍처에 대해 생각한다는 것입니다. 즉, 아키텍처를 구축하기 시작하는 경우가 많다는 것입니다. 동일한 소프트웨어가 아닐 수도 있다는 점을 염두에 두어야 합니다. 지금부터 1~2년 후에 운영하게 될 것입니다. 특히 다음과 같이 규모를 확장해야 하는 경우에는 더욱 그렇습니다.AWS에서 해야 할 일이 있습니다. 예를 들어 몇 배나 되는 규모로 구축한 아키텍처를 거의 다시 볼 수 있는지 확인해야 합니다. SV와 같이 우리가 모든 사람에게 제공한 최초의 실제 서비스인 SV에 대해 이보다 더 좋은 예는 없을 것 같아요. s3를 설계할 때 보드에 많은 객체가 있었는데 처음 6개월 동안 저장해 두었다가 단지 그 용도로만 저장해 두었던 것이 기억납니다. 한 두 배나 되는 돈을 벌었죠. 첫 달에 그걸 뚫어버렸죠. 그리고 그것은 확실히 의미가 있죠.우리가 아키텍처를 잘 살펴야 한다는 뜻이었어요. 작년에는 제 남자가 무대에 서서 SV가 시간이 지남에 따라 어떻게 진화했는지에 대해 이야기했습니다. 그리고 작년에 엄마가 무대에 섰는데 s3에 53개의 마이크로서비스를 보유하고 있었는데 지금은 262개입니다. 하지만 예를 들어 여러분이 들었던 모든 새로운 기능, 예를 들어 출시된 s3 액세스 포인트, 그리고 이 기조 연설은 새로운 마이크로 서비스입니다. se 복제 시간 제어는 8개의 마이크로 서비스이고 s3에 대해 분석된 액세스는 또 다른 4~5개의 마이크로 서비스입니다.시스템을 발전시킬 수 있다는 것은 모든 아키텍처의 발전이 될 것이라고 생각할 때 정말 주의를 기울였기 때문입니다. 하지만 제가 s3에서 항상 놀라고 있는 것 중 하나가 바로 신뢰성입니다. 왜냐하면 항상 말씀드렸듯이 모든 것이 항상 실패하고, 디스크에 대해 생각하면, 하드웨어에 대해 생각하면 실패율이 정말 높지만 네트워크 컨트롤러는 여러분이 가지고 있는 일을 합니다. 비트 플립 메모리에는 필요한 대규모로 일어날 수 있는 모든 일들이 있습니다.이런 상황에 대비할 수 있어야 한다는 것이죠. 블랙 스완 같은 사건 같은 부품에 커다란 고양이가 들이닥쳤을 때 어떻게 하면 그 영향을 줄일 수 있을지 항상 고민하고 있습니다. 어떻게 하면 고객에게 미치는 영향을 줄일 수 있을지 항상 고민하고 있습니다. 그래서 폭발 반경을 줄이는 방법을 항상 고민하고 있습니다. 그리고 저는 작년과 작년에도 말씀드린 바 있습니다. 사람들이 셀 기반 아키텍처에 대해 훌륭한 강연을 했으니 이제 지역별 아키텍처에 대해 간단히 다시 설명하겠습니다.아키텍처: 여러 개의 AZ를 소비한 셀 기반 버전은 이렇게 크고 작은 구성 요소를 만들어 잠재적 고장의 폭발 반경을 셀 자체로 제한할 수 있습니다. 하지만 또한 한 번에 한 영역 또는 다른 영역에 있는 영역 아키텍처를 사용하는 경우 동일한 접근 방식을 위해 셀 기반 아키텍처를 실제로 사용할 수도 있습니다. 항상 폭발 반경을 정확히 줄이고 싶을 때가 있습니다. 세포의 크기가 작으면 세포의 크기를 선택할 수 있으며 실제로 크기를 줄일 수 있습니다.블래스트 반경은 테스트하기 쉽고 운영하기도 쉽지만 셀이 클수록 비용 효율이 높고 분할이 적으며 따라서 홀 시스템이 운영하기 더 쉽다는 것을 알 수 있습니다. 이제 문제는 시스템을 얼마나 멋지게 파티셔닝하여 실제로 아키텍처를 사용하거나 판매할 수 있느냐는 것입니다. 이제 AWS의 자체 오일 기반 서비스에 대해 생각해 보면 아마도 EBS가 정말 좋은 예일 것입니다. 그래서 어떤 것들에 대해 살펴보겠습니다. 그 세계에서 폭발 반경을 줄이기 위해 ABS로 한 것이죠. 그러니 은행 EBS를 블록으로 생각해야 합니다.스토어 서비스를 제공하지만 디스크만 연결되어 있는 것으로 생각하지 마세요. 실제로 볼륨을 구성하는 셔츠가 여러 개 있고 물론 이를 복제합니다. 예, 실제로 이 모든 것에 대한 복제인 또 다른 샤드 세트를 처리합니다. 이제 이러한 샤드의 모든 유형의 장애를 제어하기 위해 구성 마스터와 구성 마스터가 있습니다. 두 번째 네트워크는 일종의 오버플로우입니다. 네트워크는 ec2와 EBS 사이의 Firm 10 네트워크만큼 크게 프로비저닝되지 않습니다.하지만 구성 마스터는 거기에 있고 구성 마스터는 아무 것도 하지 않습니다. 실제로 하는 유일한 일은 이러한 샤드 중 하나라도 실패했을 때, 노드에 장애가 발생하면 일종의 재시작이 애플리케이션 보기를 트리거하기 때문에 실제로는 아주 간단합니다. 예, 뭔가 실패하면 백업으로 페일오버한 다음 새로운 샤드 세트로 복제하기 시작합니다. 그래서 구성 마스터는 그렇게 많이 할 필요가 없습니다. 여러 가지가 동시에 실패합니다. 이 문제는 쉽게 과부하가 걸릴 수 있습니다. 특히 우리가 그렇지 않기 때문입니다.디스크 하나를 말하는 것이 아니라 볼륨 하나가 아니라 수백만, 수백만, 수백만 개의 볼륨에 대해 이야기하고 있습니다. 따라서 구성 마스터가 한 명뿐인 경우 구성 마스터가 실제로 단일 장애 지점이 됩니다. 왜냐하면 쉽게 압도될 수 있기 때문입니다. 자신에 대해 생각해 보면 항상 그렇듯이 일관성과 가용성 사이의 긴장이 항상 존재합니다. 여기서 한계 정리에 따르면 파티션이 있는 세상에서는 일관성을 유지할 수 없습니다. 및 가용성과 일관성EBS는 타협의 대상이 아니므로 고가용성과 일관성을 실제로 보장하고 교육을 통해 일관성이 다시는 이를 해치지 않도록 할 수 있는 환경을 구축해야 합니다. 예, 셀 기반 아키텍처를 두 개의 EBS와 EBS 마스터에 적용하면 먼저 영역 내에서 하나를 선택하고 영역을 분할할 수 있습니다. 아마도 클리프톤일 수도 있습니다. 넷째, 구성 마스터의 고장 또는 과부하로 인한 영향의 폭발 반경을 줄일 때마다이에 대해 생각하고 있습니다. EBS를 통해 실제로 달성할 수 있는 가장 작은 셀 단위가 무엇인지, 특히 구성 매스의 경우 실제로 EBS는 구성 마스터 데이터 셀에서 거의 모든 경우에 해당된다는 사실을 깨달았습니다. 모든 클라이언트가 모든 데이터를 사용할 필요는 없기 때문입니다. 본질적으로 구식 데이터베이스 세계에서는 모든 사람이 액세스할 수 있어야 한다는 것을 기억하는 모든 클라이언트가 모든 데이터를 사용할 수 있어야 하는 것은 아니기 때문입니다. 당신의 비행기는 여기서는 그렇지 않습니다. 왜냐하면 그것은 클라이언트 전용이고, ec2 인스턴스뿐입니다.EBS 볼륨은 실제로 이 특정 구성 데이터에 액세스해야 하기 때문에 이를 4개로 나누는 대신 수백만 개의 작은 데이터베이스를 사용하여 EBS의 폭발 반경을 가능한 한 작게 만들었습니다. 파셀리아는 실제로 세계에서 배운 교훈에서 나온 것입니다. 포르투갈의 맨 오브 워 (man-of-war) 이고 해파리처럼 생겼지만 본질적으로 노숙자 또는 수천 명의 사람들로 구성되어 있습니다. 함께 군체를 이루고 존재하는 작은 미생물들이 여러분에게 있어 한 가지이므로, 보시면 그 이름이 유래되었습니다.셀에서 데이터 모델에 대해 말하자면, 생성되는 각 볼륨은 파티션 키를 갖게 되고, phacelia의 각 데이터베이스는 하나의 파티션 키만 관리합니다. 그리고 여러분이 하는 것은 각각의 셀이 하나의 파티션 키만 지원하는 마이크로 셀 군집을 다시 만드는 것입니다. 그래서 우리가 정말로 필요로 하는 것은 수백만 개의 셀이 필요하지만 괜찮습니다. 작고 관리하기 쉽고 돛은 Milt와 같은 환경에 살고 있습니다. 셀 내부에는 Paxos를 실행하는 여러 노드가 있으며 실제로 다음과 같은 독특한 제안을 할 수 있습니다.마스터: Paxos가 있는 7개의 셀이 이 상태 머신을 가질 때 우리는 신뢰할 수 있습니다. sadya를 위해 우리가 할 수 있었던 일 중 하나는 이 셀들이 항상 클라이언트에 최대한 가깝게 위치하도록 하는 것입니다. 왜냐하면 이러한 데이터베이스는 매우 작기 때문입니다. 그래서 클라이언트가 AZ 전역으로 이동하면서 볼륨이 Lanta에 연결되기 때문에 프리즈 영역은 구성 마스터가 그대로 유지되도록 할 수 있었습니다. 검색에서 가능한 한 클라이언트에게 이러한 셀에 가까이 가서 다시 줄입니다.폭발 반경, 그러니까 위상 영역에 어떤 영향을 미쳤는지 보시면, 이것은 일종의 오류율입니다. 즉, Phacelia 이전의 세계에서 구성 마스터에 액세스할 때 항상 사용되는 전체 오류율입니다. 보시다시피 그 이후에 어떤 일이 일어나는지 볼 수 있겠죠. 그래서 셀 기반 아키텍처는 여기서 매우 중요한 역할을 합니다. 그리고 이 특별한 경우에는 셀로 이동할 수 있었습니다. 하나의 키만큼 작은 두 개의 셀은 잠재적 영향의 폭발 반경을 크게 줄이는 것으로 이해되었습니다.실패입니다. 셀을 기반으로 한 아키텍처를 생각해보면 Amazon에서 시간이 지나면서 배운 몇 가지 다른 기술이 있는데 정말 멋지다고 생각해요. 특히 애플리케이션이 스테이트리스 (Stateless) 이거나 소프트 스테이트인 경우 어떤 일을 할 수 있을까요? 그래서 여기서 클라이언트가 실제로 이야기에 참여하고 일종의 지역 아키텍처에 대해 생각해 봅시다. 저는 카드 한 벌을 다른 것을 나타내는 것으로 사용합니다. 여기 라스베가스에서 다이아몬드 시동이 걸리면 고객들은 주사위를 포기하고실패하면 엄청난 워크로드가 유입되기 시작하거나 버그가 너무 세게 푸시되어 버그가 트리거됩니다. 지역 아키텍처를 가지고 있다면 첫 번째 노드를 제거할 수도 있고 그들이 할 일은 당연히 즉시 시도될 것입니다. 그러면 이제 셀 기반 아키텍처를 사용하는 경우 기본적으로 이를 매핑하고 고객을 특정 셀에 매핑합니다. 다시 같은 시나리오가 발생하면 두 노드가 그 안에 메모를 남기는 것입니다. 휴대폰을 꺼내도 괜찮습니다. 이 특별한 경우에는 25% 에 불과합니다.고객들이 영향을 받게 되면 클럽이 잘 잡히게 될 것입니다. 그게 클럽이죠. 그런데 셔플 샤딩 (shuffle Sharding) 이라고 하는 완전히 다른 방법을 찾게 되면 어떻게 될까요? 노드를 여러 개 가지고 각 클라이언트를 두 번 가져가서 무작위로 해시를 취하거나 다른 차트에 무작위로 분산시키면 어떻게 될까요? 다이아몬드가 실제로 실패를 일으키고 있다면 실제로 오래된 것이 아니라 다른 차트에 분산시키는 거죠. 여전히 동일한 셀을 공유하는 고객이 영향을 받습니다. 즉, 기본적으로이를 뒷받침하는 계산을 살펴보면 기본적으로 조합이 가능한데, 이 특별한 경우에는 노드가 8개이고 샤드 크기가 2개인 경우 특정 장애로 인한 실패율이 고객의 3.6% 에 불과하기 때문입니다. 집합이 매우 작지만 100개로 개선하고 샷 크기가 5개라고 가정하면 어떤 클라이언트도 다른 클라이언트에 거의 영향을 미치지 않는다는 것을 알 수 있습니다. n이 커질수록 수렴 조합도 늘어납니다. 수학을 활용하여 실제로 매우 안정적인 시스템을 구축할 수 있습니다.시스템에 장애가 발생할 수 있는 범위를 최소화합니다. 그래서 밥 먹는 법을 아는 스마트 클라이언트가 있어야 한다는 뜻은 아닙니다. 하지만 나머지는 수학적으로 보면 이스라엘이 정말 잘 만들어진다고 생각합니다. 분산 시스템을 구축하는 것이 어렵다면 말이죠. 예, 거의 그 일을 해왔습니다. 아마존에서 지난 20~25년 동안 대규모로 병렬로 이 작업을 해왔습니다. 여러분 중 많은 분들이 가지고 계신 것 같은데요. 이걸 어떻게 할 수 있냐고 항상 물어봤는데, 25년 후에는 이런 것들을 만드는 데 많은 경험이 있을 거예요.일종의 시스템, 그러니까 Furnace Amazon은 어떻게 이런 작업을 할 수 있을까요? Amazon은 어떻게 이 규모를 설계할 수 있을까요? 운영 관리에 대해 여러분이 배운 교훈이죠. 그래서 우리는 그곳에서 여러분을 위해 무엇을 할 수 있을지 고민해왔고, 지난 몇 년간 강연을 통해 최고의 엔지니어와 아키텍트를 모았습니다. 오늘 이 모든 정보를 실제로 가져올 Amazon 빌더 라이브러리를 발표하게 되어 기쁩니다. Amazon이 하는 것처럼 매우 안정적인 시스템을 구축할 수 있도록 하기 위해서입니다.15개의 기사를 가지고 다양한 분야에서 이 프로젝트를 출시하고 있습니다. 예를 들어, 상태 점검을 구현하는 방법을 개선하세요. 아마존의 역사가 무엇인지, 거기서 배운 것들이 무엇인지, 이 모든 것이 Amazon과 AWS가 하는 것과 동일한 규모와 동일한 안정성으로 분산 시스템을 구축하는 데 도움이 되기를 바랍니다. 그래서 생각해 보면 우리 모두 미지의 영역에 도전하고 있습니다. 네, 그리고 혼합 고객은 정말 새로운 고객입니다.세일존은 매우 흥미로운 스타트업으로 풍력과 태양열로 구동되는 자율 주행 차량을 만들고, 온갖 기술을 활용하여 모든 지표를 충전합니다. 그래서 저는 어린이들의 CEO를 초대하여 실제로 여러분께 세바스찬 [음악] [박수] [음악] 에 대해 이야기하고 싶습니다. 우리의 바다는 믿을 수 없을 만큼 광대하며 행성의 70% 를 차지하고 강력한 엔진 콤플렉스를 구동하는 역할을 합니다. 전 인류에 영향을 미치는 행성계이지만 해양 데이터는 어떤 기준으로도 부족합니다. 왜냐하면 바다는 그렇지 않기 때문입니다.믿을 수 없을 만큼 방대하고 위험한 환경이기도 합니다. 이제 육지에서는 수십억 개의 연결된 센서에 익숙해졌습니다. 하지만 해상에서는 주로 계류용으로 수백 개에 불과합니다. 4마일 길이의 케이블에 기차 바퀴 세트를 달고 해저로 향하는 대형 강철 부표를 상상해 보십시오. 물론 위성은 지난 25년 동안 큰 그림을 제공해 왔습니다. 저해상도에서는 몇 가지 변수만 측정할 수 있고 물 속을 볼 수 없기 때문에 우리는 알고 있습니다.더 잘할 수 있습니다. 우리는 태양계의 먼 세계를 연구하기 위해 로봇을 사용해왔습니다. 이제 우리는 측정할 수 없는 것과 모르는 것에 대비할 수 없는 것을 고칠 수 없기 때문에 우리 행성을 정량화하기 시작할 때입니다. 이것이 바로 젤드론에서 우리가 시작한 획기적인 목표입니다. 2009년 3월 26일에 육상 항해 속도 기록을 추구하면서 10년 전에 시작된 획기적인 발전이었습니다. 시속 2마일의 모하비 사막은 그린버그 마크 파이브라고 불리는 풍력 자동차를 타고 시속 2마일에 달렸는데, 그 기록은아직도 서 있고 고맙습니다. 이 기록의 핵심은 항해 드론의 탄생이었습니다. 비행기를 들어 올리는 것과 비슷하지만 90도 기울어진 혁신적인 날개와 꼬리 배열은 매우 오랜 시간 동안 엄청난 전방 추진력을 발휘할 수 있는 솔루션이지만 전기 소비량은 냉장고 전구보다 3와트 미만입니다. 셀 드론마다 대기 측정을 위한 센서 세트를 탑재하고 있습니다. 풍속, 풍향 등 믿을 수 없을 정도로 정밀한 값을 가진 해양 및 해양 변수대기 온도, 압력, 기압, 습도, 태양 복사뿐만 아니라 물 속, 수온, 염도, 용존 산소, 용존 이산화탄소, 대기, 이산화탄소, 수중 소리, 전류 프로파일, 1,000미터까지 대칭이 가능한 수중 음향 전류 프로파일 바이오매스. 저는 데이터 수집의 강국입니다. 물론 단일 셀 드론이 아니라 전 세계 셀 드론이 필요합니다. 이 놀라운 행성 인프라는 당연히 AWS에 의해 구동됩니다. 우리 로봇은 지구력과 복원력이 관건입니다. 24 시간 내내 임무 달성12개월 이상 지속 기간: 복원력에 대한 냉철한 논의가 바로 AWS가 대규모로 확장할 수 있을 뿐만 아니라 산업 수준의 복원력을 제공할 수 있는 파트너라는 것을 보여주는 정확한 이유입니다. 미션 크리티컬 데이터를 24시간 내내 전 세계 고객 기반에 제공할 수 있도록 하는 동영상을 제공합니다. 이러한 복원력이 왜 그렇게 중요한지, 더 나은 어류 데이터가 어업을 관리하는 데 매우 중요하다는 것을 보여주는 예가 있습니다. 수천 년 후 전 세계 수백만 개의 일자리에 영향을 미치는 정보어획량 증가 추정 (1996년) 이 최고점이었는데, 이는 우리 바다의 심각한 남획을 나타냅니다. 하지만 측정할 수 없는 자원을 어떻게 관리할 수 있을까요? 그래서 정어리, 고등어, 어린이 등 다양한 어류의 바이오매스를 추정하는 임무를 수행하려면, 소리를 내며 태양 파도를 방출하고 물고기 뒤쪽과 해저에서 들려오는 메아리를 들을 수 있는 장치를 사용하고 여러분에게 소리로 바다에 그림을 그려 넣으세요. 매우 중요한 지역의 바이오매스에 대한 대규모 통계 모델을 개발할 수 있습니다. 그래서 우리는 셀 드론 함대를 사용하여 이 작업을 수행합니다. 왜냐하면 물고기는이동 속도가 빠르면 세면 빠를수록 더 정확한 예상 결과를 얻을 수 있습니다. 그래서 그는 상업용 어획량의 약 1/3을 차지하는 미국 북극의 베어링 및 트럭 (GC) 을 담당하는 세일링 드론으로 일하고 있습니다. 그리고 집 근처에서 캐나다 밴쿠버 섬부터 멕시코 국경까지 미국 서부 해안을 따라 매년 이 작업을 수행합니다. 수면 위에서는 자율주행차를 이용한 정말 획기적인 작업입니다. 우리 기내 카메라는 정말 획기적인 작업입니다. 태그가 붙은 이미지로 구성된 매우 큰 데이터 세트를 바다의 이미지넷이라고 생각해야 합니다.dataset now power는 최초의 기계 학습입니다. 모든 프레임에서 모든 것이 항상 움직이는 곳인 해양 영역 인식에 최적화된 드론입니다. 물론 이것은 매우 복잡한 문제입니다. 바다는 계속 우리를 놀라게 하고 알고리즘이 드론 타는 물개와 같은 참신한 장면을 발견하기 때문에 올해 초에 태깅하기가 매우 어렵기 때문에 여전히 작업이 진행 중입니다. 우리가 다녔던 트랙을 한 바퀴 돌기가 너무 어려웠어요남극 대륙이 뉴질랜드에서 뉴질랜드까지 196일 동안 쉬지 않고 이 임무를 수행한 결과 얻은 데이터를 통해 기후 변화의 주요 동인인 지구의 이산화탄소를 조절하는 데 남극해가 차지하는 핵심 역할을 정량화했습니다. 이러한 위업을 달성하기 위해 우리는 먼저 남극해에서 중간 지점까지 항해할 때 남극해역의 중요한 데이터를 분석하여 다양한 바람을 몰고 오는 압력 시스템의 변화를 설명하는 수많은 수치 모델을 수집해야 했습니다. 드론의 궤도에 영향을 미치는 다른 방향의 패턴은 매우 드라마틱합니다.표면 아래에서는 전류를 추적해야 했습니다. 이리저리 몰아치고 소용돌이치는 전류를 추적해야 했습니다. 물론 60피트 높이의 큰 파도, 다양한 주기의 파도, 서로 다른 주기의 파도, 이런 것들이 수많은 장애물로 작용해서 진행을 늦추거나 말 그대로 차량을 파괴할 수 있습니다. 드론을 확대해보면 내비게이션 로직이 실제로 매우 복잡하다는 것을 알 수 있습니다. 가장 광학적인 최적의 방식으로 이 여러 필드를 탐색하는 작업입니다. 클러스터의 다양한 컴퓨팅을 원활하게 수행한 다음 결과를 전송했습니다.비전이라는 용어에 따라 위성을 통해 차량에 지시하는 것을 정량화된 행성이라 부릅니다. 단지 하나의 고장난 도로에 관한 것이 아닙니다. 우리는 지구 전체 대양을 각각 6x6도 크기의 1,000개의 하위 영역으로 나누고 각 상자에 드론을 배치하기 위해 노력하고 있습니다. 목표는 행성 커버리지를 확보하여 인류에 영향을 미치는 행성 시스템에 대한 더 나은 통찰력을 제공하는 것입니다. 이제 날씨와 같은 시스템을 모델링할 수 있기 때문에 그렇게 할 수 있습니다. AWS에서 P 3 및 C 5 n 대신 새로운 인스턴스 유형을 사용하여 수치적으로구형 슈퍼컴퓨터는 아드리아의 컴퓨팅과 셀 존스의 전례 없는 연구소 데이터를 결합하면 지구 강수량에 대한 새로운 통찰력을 제공할 수 있습니다. 예를 들어 지구 강수량, 예를 들어 지구 풍력 모니터링, 허리케인, 폭풍, 태풍 등에 대한 새로운 통찰력을 제공할 수 있습니다. 물론 열대 태평양의 열유속 (유명한 엘니뇨) 의 장기 모니터링을 위해 거의 실시간으로 이러한 정보를 제공합니다. 우리는 항해 드론 예측 앱을 통해 이러한 통찰력을 전 세계 모든 사용자에게 제공합니다. 다음 혹은 다음 개척지대는 지구 해저를 최대한 세게 매핑하는 것입니다.전 세계 해저의 85% 가 아직 지도화되지 않고 탐험되지 않은 상태로 남아 있다는 것을 믿기 위해 우리는 이 데이터 수집 문제를 해결하기 위해 열심히 노력하고 있지만, 큰 문제에는 큰 해결책이 필요합니다. 그래서 우리는 이 작업을 위한 궁극의 기계를 만들었고 저는 Sail John Surveyor를 발표하게 되어 매우 자랑스럽습니다. 이 장치는 2만 4,000피트 해저의 해저를 8,000미터 (24,000피트) 까지 촬영할 수 있는 72피트 길이의 풍력 수중 음파 탐지기 시스템을 탑재하고 있습니다. 향후 10년 이내에 이 임무를 완수하는 것을 목표로 하는 파트너들을 위한 최초의 완전한 지구 지도를 만드는 것입니다.인류의 혜택: 진정한 지구 차원의 노력이며 전례 없는 범위와 데이터 세트를 필요로 합니다. 많은 작업과 마찬가지로 이 놀라운 중요 데이터 세트를 저장하고 처리하는 AWS와의 협력을 통해 가능해졌습니다. 판매용 드론으로 새로운 램과 새로운 가능성을 탐구하면서 미래가 어떻게 될지 기대됩니다. AWS와의 놀라운 파트너십을 지속적으로 강화할 수 있기를 기대합니다. [박수] [음악] 감사합니다. 물론 기상 예측, 유체 역학의 큰 부분을 차지합니다. 어떻게 할 수 있는지 알고 싶으면 말이죠.AWS를 슈퍼 컴퓨터로 생각한다면 월요일 밤에 있었던 과학자 프레젠테이션인 Peter를 보셔야 합니다. 이 프레젠테이션에서는 Easy to 인스턴스를 사용하여 슈퍼컴퓨터를 구축할 수 있는 방법에 대해 자세히 설명해 드리겠습니다. 이제 조금 다른 트랙으로 넘어가겠습니다. 지금까지 보아온 대규모 산업 분야에 대해 좀 더 자세히 살펴보겠습니다. 예를 들어, 인더스트리 1.0은 스팀 머신이 등장한 1800년대 말이었습니다. 전체 산업 혁명이 일어나기 시작한 것을 볼 수 있었죠. 유전자 카드도발명되기 시작했습니다. 이제 영화 산업 1.0이 전기가 유입되는 곳에서 전기가 유입되고 큰 동력의 원천이 되고 제조 공정에도 큰 변화가 생기기 시작합니다. 첫 번째 조립 라인은 그런 것들에 건설되는 첫 번째 조립 라인이고 3.0은 모든 전자 장치가 전기로 연결되고 모든 공장 바닥이 PC 등에 대해 통제되기 시작하는 시기입니다. 오늘날 인더스트리 4.0이라고 불리는 것의 다음 단계는 자동화입니다.이제 모든 것이 자동화되기 시작합니다. 특히 물류와 관련된 모든 것들이 자동화되고 있습니다. 인더스트리 4.0에서 VD를 사용하는 것입니다. 왜냐하면 저는 여러분이 아는 바가 별로 없다고 생각합니다. 왜냐하면 2015년에 공장 장비의 평균 연식이 22년이고 1935년 이후로 그렇게 오래된 적이 없었기 때문입니다. 사실 장비는 너무 노후되어 우리가 원하는 데이터를 생산할 수 없습니다. 인사이트를 만들면 아직 4.0은 아닌 것 같아요. 공장과 제조 현장에는 필요하기 때문이죠.크게 변화해야 합니다. 우리가 정말로 이 세상에 대한 통찰력을 창출하기 시작한다면, 그렇습니다. 제조 현장에서 여전히 중요한 역할을 하고 있는 다양한 부분을 모두 살펴보면 그러한 통찰력을 창출하는 데 도움이 되는 데이터가 없습니다. 그리고 이 데이터가 제조 현장에서 실제로 끝까지 해낼 수 있는 곳으로 흘러 들어가야 합니다. 통찰력을 만들고 싶다면 거기에서 많은 통찰력을 얻어야 합니다. 예를 들어, 예측 유지보수를 알고 있거나 자율 주행 운송 변수를 알고 있을 때제 눈에는 이런 종류의 협동로봇이 인더스트리 4.0에 관한 것입니다. 하지만 제조업은 거의 없습니다. 이미 그런 속도로 진행되고 있습니다. 오늘날 일반적으로 공장에서는 이미 연간 약 1,800페타바이트의 데이터를 생산하고 있습니다. 하지만 이 세상에 대한 통찰력을 창출하는 데 필요한 데이터는 극히 일부에 불과합니다. 제조업체에서든 스마트 시티에서든, 실제로 이 데이터를 클라우드로 옮기기 시작하면 실제로 다중 계층 접근 방식 및 다음과 같은 작업을 수행할지 여부지금 우리가 있는 곳이라던가, 교통수단과 회사가 어떻게 생겨났는지에 대해 생각해 보고 싶다면, 계산에 대해 더 현명한 결정을 내리거나, 예를 들어 도시 수준으로 나아가거나, 더 나아가서, 농업과 관련하여 우리가 할 수 있는 일과 해야 할 일이 무엇인지 생각해 보세요. 전 세계가 실제로 점점 더 성장하고 있습니다. 기대치는 2050년을 넘어서고 있습니다. 우리는 이 세상에 35% 더 많은 사람들이 있습니다. 운송까지 끝까지 먹이를 주어야 합니다. 네, 이 모든 것을 여러 개 먹을 수 있습니다.데이터를 어떻게 수집해야 하는지, 그리고 이것이 어떻게 데이터가 함께 성장하여 새로운 통찰력을 창출할 수 있는지를 나타내는 계층입니다. 예를 들어 생각해보면 아마존이 운영되는 방식으로 되돌아가는 것에 대해 생각하고 Amazon.com의 물리적 부분을 생각해보세요. 그래요. 그래서 초창기에는 책을 팔았고 아마존이 시작되었을 때 사용할 수 있을 때는 물론 주문 처리도 할 수 있게 되었습니다. 어려웠지만 그들만의 물류 문제가 있었다는 건 알지만 실제로는 비교적 간단합니다.하지만 TV, 치약, 베개, 신발, 커피를 팔기 시작하면 모든 것이 훨씬 더 복잡해집니다. 네, 저희 계획은 실제로 그렇게 하는 것이었기 때문에 초기에는 그녀가 일반 창고처럼 보였을 것입니다. 하지만 더 이상 그런 일은 아닙니다. 25달러 무료 배송에서 이틀 배송, 그리고 하루 배송으로 긴 시간을 옮겼기 때문입니다. 지금 배송하고 프라임 상태라면 한 시간 안에 받을 수 있습니다. 그렇다면 아직 이 모든 것들이 어떻게 변할까요?작업자 안전을 개선하고 원하는 속도로 작업을 보장할 수 있어야 합니다. 물론 일반적인 창고에는 약 4백만 개의 쓰레기통과 약 1천만 개의 품목이 있습니다. 시스템 전반에 걸쳐 컴퓨터 비전을 사용합니다. 우리는 스코틀랜드 맨해튼 그리드 스타일을 구현했습니다. 경로는 딱딱한 꼬투리와 케피르 시스템이 실제로 따라갈 수 있는 곳입니다. 작업자가 있는 지구로 데려다 줍니다. 상자에 물건을 함께 넣을 수 있고 실제로 주문한 품목이 두 개인지 확인할 수 있기 때문입니다.같은 상자에 들어가서 검색을 해봅시다. 이제 머신러닝을 사용하여 이러한 작업을 실제로 어떻게 할지 예측합니다. 네 가지 영역에 있습니다. 예, 어떤 제품을 사야 하는지 예측하고 누구에게서 사야 하는지를 예측하는 것입니다. 대형 제조업체에서 가져온 것이고 문제는 제품을 어디에 배치하고 잠을 자면 어떤 약속을 할 수 있느냐는 것입니다. 고객님들께 배송을 해드리는데 이건 사실 꽤 어려운 일이죠. 왜냐하면 실제로계절에 맞는 제품 같은 매우 인기 있는 제품이죠. 따뜻한 양말이나 여름에 쓸 수 있는 햇빛 모자와 같은 것들도 사실 전 세계에서 팔렸기 때문에 예측하기 쉽습니다. 하지만 니콜라스 케이지 리버서블 시퀸 베개 커버가 있다면 이제 어떻게 해야 할까요? 실제로 어디에 놓아야 할지 예측하기 어려운 Nicolas Cage 양면 시퀸 베개 커버가 있다면 어떨까요? 기계 학습을 활용하여 수천 개의 유사한 항목을 살펴보고 제작을 시작할 수 있습니다.어디서 사야 하는지 예측해서 라스베가스에 계시다면 아마 이 베개를 구하실 수 있을 겁니다. 실제 기계가 사는 곳이 점점 더 중요해지고 있습니다. 아마존이 지난 20년 25년 동안 해왔던 많은 일들을 보면 기계 학습은 아마도 그 모든 것의 기반이 될 것입니다. 펜더 같은 작은 것들이죠. 이제 감지용 펜더 같은 작은 것들이죠. 모든 것이 은밀하게 이루어지고 있지만 알렉사, 예, 드론 또는 스카우트와 같은 주요 혁신도 일어나고 있습니다.머신러닝에 의해 움직이거나 아마도 여러분이 알고 있는 가장 극단적인 폭탄은 아마존 유령일 것입니다. 아니면 그냥 들어가서 진열대에서 물건을 꺼내고 물건을 등에 넣고 걸어 나가면 됩니다. 그 모든 것에는 충분한 도전 과제가 있습니다. 그리고 그 이야기에 대한 설명이 무엇인지, 그리고 그에 대한 많은 마스터 CDV 프레젠테이션을 먼저 알아내야 합니다. 그래서 이 중 일부는 그가 노란색으로 변하고 엉망으로 변하고 있습니다. 아, 사실 잘 모르겠지만, 이 모든 카운티들이 실제로 그곳으로 이주하고 있는지는 잘 모르겠습니다.컴퓨터 비전의 문제점은 사실 제품인데 어떤 제품은 똑같지만 무너졌거나 다른 제품들은 사실 거의 똑같지만 서로 다른 제품이고 많은 사람들이 실제로 매장과 상호 작용하기 때문에 합성 정보를 생성하는 데 많은 투자를 했습니다. 그래서 우리는 합성 정보를 생성하는 데 많은 투자를 했습니다. 그래서 우리는 실제로 이러한 알고리즘을 더 효율적이고 정확하게 만들기 시작할 수 있습니다. 모든 결과를 바탕으로 매장에 들어가서 밖으로 나가는 곳을 스캔하기만 하면 됩니다. 요금이 청구되지만 AWS 외부에서 보면아마존 밖에도 물리적 세상에는 AWS로 구동되는 멋진 일들이 정말 많이 일어나고 있습니다. 그 중 몇 가지를 먼저 살펴보겠습니다. 우선 작업장 안전에 관한 것입니다. 제가 가장 좋아하는 고객 중 하나는 운영 품질과 안전을 개선하기 위해 나아간 고객 중 하나입니다. 이곳은 목재 현장입니다. 호주에서 액체 천연 가스를 생산하고 있으며 근처에서 액체를 생산하는 부분 중 하나는 액체를 생산하는 부분입니다. 천연 LPG를 점화시켜 사실상 얼려버리면영하 60도 이하로 떨어지죠. 이 거대한 냉장고에서 이런 일이 일어납니다. 옛날 세상에 있는 일 중 하나에 센서가 있으면 이 센서가 할 수 있는 유일한 일은 무언가 잘못되면 데이터를 생산할 능력이 없는 사람들이 실제로 데이터를 생산하는 시스템으로 이동할 수 있도록 하는 것입니다. 그리고 실제로 평가자 고장 부분에 거품이라고 불리는 공정 부분이 있습니다. 항상 알람이 울리는 걸 봤어요. 그러면 공장 전체가 문을 닫아야 할 거예요몇 주 동안 작동을 멈췄습니다. 이 냉장고의 센서와 스텐실에 있는 10,000개의 센서는 실제로 거품을 예측하기 시작하고 고객에게 더 이상 이러한 위험 조건을 만들지 않을 수 있습니다. 하지만 그 후 이것이 첫 번째 실험이었고 그 후에 스위치를 뒤집고 20만 개의 센서를 온라인으로 가져와서 작업자를 위한 자율 환경을 만들기 시작했습니다. 환경은 매우 위험합니다그래서 한편으로는 바다에 있는 자율 플랫폼이 있고 거기에는 작업자가 없고 상자는 하나뿐입니다. 이 특별한 경우에는 로봇이 공장 전체에서 실제로 움직이는 것을 볼 수 있습니다. 작업자에게 아무런 위험이 없는 극도로 위험한 공장입니다. 왜냐하면 작업자들은 중앙 집중식 환경에 앉아 로봇이 무엇을 보고 있는지도 실제로 볼 수 있기 때문입니다. 여기 튀어나온 상자는 IOT 센서이고 AWS를 실행합니다. IOT 코어가 있고 통제할 수 있는 조치를 실제로 수행할 수 있습니다.이런 일이 일어나야 할 필요가 있습니다. 단순히 커다란 위험 정장을 입은 사람들을 보내서 일을 하는 대신 Joe는 이 또 다른 흥미로운 회사에서 일하고 있습니다. 그들은 작업장 안전을 개선하기 위한 안전 벨트와 장갑 등과 같은 것들을 만드는 웨어러블 장치를 만들고 있습니다. 작업자들이 위험한 환경에서 어떻게 움직이는지 추적할 수 있도록 말이죠. 그들이 들려준 흥미로운 이야기 중 하나는 미국의 주요 항공사 중 하나가 실제로 안전 벨트를 사용하여 얼마나 멀리 있는지를 측정한다는 것입니다. 사람들은 사실 제가 얼마나 열심히 일하고 있는지 굽혀요.실제로 작업자 건강을 개선하기 위해 땅에서 물건을 집어 올리는 데 올바른 기술을 사용했는지 여부에 관계없이 유나이티드 렌탈스는 완전히 자율적으로 작동하는 거대한 기계를 만들기 위해 움직이고 있습니다. 따라서 더 이상 위험한 환경에서 이러한 거대한 기계로 작업할 수 없습니다. 이러한 디지털 물리적 세계의 결합에서 정말 흥미로운 또 다른 영역은 도시를 웃게 만드는 방식이고 그 특정 세계에서 많은 일이 진행되고 있다는 것입니다. 손가락 몇 가지 흥미로운 예ShotSpotter는 도시의 총기 활동을 측정합니다. 갱단과 관련된 모든 살인 사건에 대해 백 번의 총격전이 벌어지고 있습니다. 한 번도 보고되지 않은 수백 발의 총격 사고가 발생하면 여러 센서를 사용하여 60초 이내에 총이 발사되어 전송된 위치를 정확하게 식별하고 법 집행 기관이 이를 알아내도록 할 수 있습니다. 마이애미 시가 이 조치를 취했고 2014년에는 그 이후로 살인 사건이 감소했습니다. 버지니아 비치 시는 5월 오전 5시에 35% 의 센서를 설치했습니다.바다에서 홍수가 언제 일어날지 측정하고 예측하기 시작했죠. 제가 실제로 설치한 모든 것은 교통을 최적화할 수 있도록 도로 주변에 센서를 설치하는 것이었습니다. 농업 대신 매우 흥미로운 물리적 디지털 세상을 갖게 되었죠. 그리고 여기에는 미래를 먹여 살릴 새로운 방법을 찾는 데 관한 많은 작업이 진행되고 있습니다. 그 분야에는 우리의 흥미로운 고객 중 두 명이 있습니다. 그 중 하나는 기후 기업입니다. 그들은 실제로 디지털을 활용하고 있습니다. 우리는 디지털 아키텍처를 보유하고 있습니다. 다음을 활용하는 당신을 위한 문화적 기후 분야농부들이 생산량을 최적화할 수 있도록 현장에 있는 트랙터와 기타 장비를 검열하지 않고 이미지처럼 설정했습니다. 농민들의 비즈니스 네트워크는 흥미로운 네트워크입니다. 왜냐하면 여기 농부들이 밭의 수확량과 현재 재배되는 작물의 종류에 대한 정보를 익명으로 공유하기 때문에 실제로 종자 공급자와 단체 교섭을 할 수 있을 뿐만 아니라 판매하는 작물의 가격을 정할 수 있기 때문입니다. 그곳의 운송 수단, 그리고 센서를 모두 장착하고 있는 것이 지멘스인지 여부전 세계 열차 선로에서 말이죠. 왜냐하면 지연의 가장 큰 원인은 종종 레일이 구부러지는 것이어서 측정할 수 없기 때문입니다. 독일의 대형 운송 업체인 도이치반이 각 열차의 센서에도 이를 삽입하여 지연을 정확하게 측정할 수 있게 해주기 때문에 Vantage power는 흥미로운 고객입니다. 모든 전기 버스에 센서가 있어서 이 구절의 배터리에 대한 예방 유지 보수를 할 수 있기 때문입니다. 우리가 이야기했던 곳으로 돌아가는 것에 대해 생각해보면이전에는 제조의 현대화라고 할 수 있습니다. 이것은 제조 현장에서 데이터 스트림을 생성하여 실제로 통찰력을 최적화하는 것입니다. 이에 대해 더 자세히 말씀드리자면, 매우 흥미로운 다음 연사가 있습니다. 그는 올해 CEO 매거진의 CIO Innovation Award를 수상하여 이러한 제조의 현대화에 대해 더 자세히 이야기했습니다.마틴 허프만 (Martin Huffman) 안녕하세요. 저는 폭스바겐의 Martin Hoffman입니다. 저는 폭스바겐의 마틴 호프만 (Martin Hoffman) 입니다. 비틀을 시작으로 오늘날 우리는 12개의 상징적인 자동차 브랜드로 구성되어 있습니다. 당사의 포트폴리오에는 폭스바겐 포르쉐 벤틀리, 부가티, 람보르기니 참조, 스코다 두카티 모터사이클, M en, 스카니아 트럭 등 365개의 모델이 있습니다. 매일 다른 모델을 운전하고 싶으시다면 순수한 재미와 기쁨으로 가득한 한 해가 될 거예요. 우리는 매년 1,100만 대의 차량을 생산하고 있는데, 하루에 약 44,000대의 차량을 생산한다고 약속합니다. 왜 이 수치를 언급할까요? 이것은 엄청난 규모이며 누구에게나 필요한 요구 사항입니다.공급망은 매우 효율적이고 효과적인 방식으로 운영되어야 합니다. 따라서 당사의 공급망은 매우 복잡하고 전 세계에 1,500개 이상의 공급업체가 있으며 이들은 매일 2억 개 이상의 부품과 부품을 제조업체에서 생산합니다. 이러한 부품과 부품은 글로벌 공장으로 운송되어야 합니다. 따라서 매일 18,000대의 트럭이 우리 공장으로 부품을 운송하고 대양을 가로질러 7,700척의 선박이 생산된 차량을 운반합니다. 연간 약 7,500만 입방미터 우리가 처리하는 물질의 미터 단위는 수백 개에 달합니다.그리고 전 세계에 22개의 공장이 있습니다. 북미에 5개, 브라질과 아르헨티나에 9개, 남아프리카에 9개는 유럽에, 33%, 중국과 인도에 있습니다. 이 모든 공장은 서로 다른 시대에 서로 다른 성장 기술을 사용하여 운영되고 있습니다. 그래서 우리가 EWS와 함께 하고 있는 일을 우리는 122개 공장을 클라우드로 전환하고 있습니다. 그래서 이 전체 프로젝트를 폭스바겐이라고 부릅니다. 현재 산업용 클라우드는 아마도 제조 세계에서 가장 큰 IOT 프로젝트일 것입니다.우리가 AWS를 선택한 이유는 기술 때문만이 아니라 공장의 표준, 구현 속도, AWS 방법론에서 얻은 구현 속도, 유연성 및 문화는 우리가 이 프로젝트를 실제로 가속화하는 데 도움이 되고 있습니다. 센터에 건물을 짓는 방식, AWS 클라우드에 구축한 디지털 생산 플랫폼입니다. 이 플랫폼은 모든 기계, 로봇, 압력 프린터, 차체, 조립 기계, 물류 시스템을 연결하는 AWS 클라우드 플랫폼입니다. 클라우드에 연결하세요AI 및 기계 학습 알고리즘, IoT 서비스 및 보안 제어를 실행하여 공장의 상황을 지속적으로 최적화하고 계산한 다음 폭스바겐 그룹 앱 스토어라고 부르는 AWS 클라우드를 기반으로 합니다. 여기서 공장의 사용 사례 기반 애플리케이션을 개발하고 한 번 개발한 후 모든 공장에 복사하여 붙여넣고 클라우드 애플리케이션에서 다운로드할 수 있습니다. 이를 통해 공장 기능을 관리 및 최적화할 수 있습니다. 이것이 바로 디지털입니다. 이제 프로덕션 플랫폼을 가져 가면이를 외부 세계로 확장하고 있다는 뜻입니다. 즉, 모든 공급업체를 클라우드로 연결하고, 물류 회사, 장비 제조업체 및 모든 비즈니스 파트너를 산업 클라우드에 통합하고 있습니다. 심지어 다른 자동차 제조업체가 산업 클라우드에서 애플리케이션과 기술을 사용하여 기여하고 오픈 소스 생태계처럼 클라우드에 소프트웨어를 로드할 수 있도록 개방할 예정이므로 이것이 앞으로 가장 큰 생태계 중 하나가 될 것입니다. 업계에서 구축된아키텍처 이면에 있는 모든 세부 사항을 다 다룰 수는 없고 저보다 더 잘 아실 것입니다. 하지만 이들이 사용하는 네 가지 주요 구성 요소는 아키텍처입니다. 하나는 기계 로봇을 클라우드에 연결하는 Ooty 운영 기술 (IT 게이트웨이) 이고, 엣지 게이트웨이입니다. 왜냐하면 많은 기능과 워크로드가 공장별로 전초 기지를 구축하기 위해 사용 중인 기계 근처에서 실행되어야 하기 때문입니다. Prem에서 실행해야 하는 애플리케이션이 여러 개 있기 때문에 우리가 사용하는 것입니다. 플랜트 클라우드의 전초 기지이자 네 번째 요소는 DPP 엔터프라이즈 클라우드입니다.Lucey 애플리케이션 프레임워크가 고도로 표준화되었으므로 생산 시스템용 애플리케이션을 빠르게 더 빠르게 개발하고 클라우드에 보관할 수 있을 것입니다. [박수] 여기가 모든 일이 일어나는 곳입니다. 작업 현장, AWS 클라우드가 기계와 용접 시스템을 갖춘 로봇, 그리고 여러분이 상상할 수 있는 모든 것이 공장 운영과 결합되어 수천 개의 센서가 데이터를 AWS 클라우드로 지속적으로 전송하여 알고리즘, 기계 학습 알고리즘이 지속적으로 설정을 최적화합니다.기계의 공장 및 파라미터, 그리고 라나가 앞서 언급한 것처럼 공장 시스템을 더 잘 관리하기 위해 클라우드를 기반으로 직원을 위한 애플리케이션을 실행할 것입니다. 자동화를 넘어서는 제조 분야의 혁신은 공장 내 모든 데이터 포인트의 완전한 통합에 관한 것이므로 폭스바겐의 재로드는 우리의 새로운 생산 전략의 토대입니다. 앞으로 우리는 자율 공장, 암실 공장을 갖게 될 것입니다. 하지만 이를 통해 공장 비용도 절감할 수 있을 것입니다. 서로 간의 IT 표준을 정의한다는공장: 제품 생산 프로그램 이행을 늘리고 있습니다. 즉, 고객에게 차량을 정시에 납품하고 제품 출시가 훨씬 빨라져 신차를 더 일찍 출시할 수 있습니다. 생산성이 30% 증가하고 공장 비용을 30% 줄일 수 있으며 공급망에서 10억 유로를 절감하는 것을 목표로 하고 있습니다. 파트너로서 AWS와 함께한 놀라운 여정이었습니다. [박수] [음악] 그래서 운이 좋았습니다. 지난 몇 년 동안 전 세계를 여행하고 많은 고객을 만났고항상 흥미로워요. 젊은 기업들이 정말 인간적인 부분인 문제를 해결하려고 노력하고 있습니다. 교육 문제든, 건강에 관한 것이든, 그들은 모두 현재 우리가 겪고 있는 가장 어려운 인간 문제를 해결하기 위해 열심히 노력하고 있습니다. 예를 들어 애플 바이트는 베르겐 외곽의 한 회사이고 노르웨이의 베르겐에 있는데 단백질을 만드는 방법을 연구하고 있습니다. 네, 단백질이 주요 식품 공급원이 될 가능성이 높습니다. 미래에 그들이 하는 일은 연어를 키우고 그렇게 쉽게 두 개를 추가할 수 있다는 것입니다.십만 7분의 1, 그래서 우리가 현장에 와서 실제로 비디오를 찍을 수 있게 해준다는 것이 흥미로워요. 그래서 우리는 now go build라는 TV 시리즈를 시작했습니다. 지금까지 8개의 에피소드가 있었는데 모두 세상에서 가장 어려운 문제를 다루고 있습니다. 우리는 젊은 기업들이고 AWS와 협력하여 심장 문제를 해결하고 있습니다. 그래서 이것은 제가 가장 좋아하는 음식 중 하나입니다. 이 회사는 우리가 만든 첫 번째 에피소드였습니다. 자카르타의 한 가지 증거와 인도네시아의 문제는 소규모 농장주라면 많은 농부들이 농장을 소유하지 않는다는 것입니다.정체성 때문에 농장에 쓸 씨앗을 살 수 있는 대출을 받을 수 없습니다. 민병대에 속해 있는 롱 척에게 가서 60% 의 수수료를 부과하는 경우가 많았습니다. 그래서 이 농부들에게 신원을 부여함으로써 신원을 알려줄 뿐만 아니라 토지의 크기와 토지의 생산량을 측정할 수 있습니다. 농부들에게 신원과 데이터를 제공하여 은행에 가져갈 수 있습니다. 은행들은 이 농부들에게 실제로 대출을 해주기를 열망하고 있습니다. 급여율이 거의 100% 에 달합니다. 다시 말씀드리지만 이 회사들은 정말 어려운 인간 문제를 해결하고 있습니다.이 모든 것에서 조금 더 재미있었던 에피소드가 하나 있었는데 오늘 공개한 에피소드입니다. 암스테르담에서 진행했던 에피소드입니다. 저는 이 도시를 사랑합니다. 저는 제가 가장 좋아하는 배터리 중 하나를 위해 암스테르담에 있습니다. 암스테르담 댄스 이벤트는 태양광, 음악가의 건강, 선착장 소리 사이의 장애물을 제거하는 데 기술이 어떤 역할을 하는지 보는 것이 흥미로워요. 그래서 우리가 한 가지 일을 할 수 있게 도와주는 다른 에피소드가 공개되었습니다. 지난 주 리우데자네이루에서는 의료 서비스에 관한 새로운 의료 서비스 방법을 찾는 방법에 대해 이야기했습니다.브라질의 가장 가난한 사람들을 위한 의료 서비스 (National Health Service) 가 있긴 하지만 브라질 국민들의 요구에 부응할 수 없습니다. 특히 열악한 복원력에 대해서는 그렇지 않습니다. 꼭 오셔서 확인해 보시기 바랍니다. 이 모든 것들이 AWS에서 운영되고 있는 아주 젊은 기업들이나 이 모든 것을 잘 해결하고 있습니다. 오늘 밤 여러분을 볼 수 있기를 바랍니다. 즐거운 시간을 보내세요. 더 파티 앤 고 빌드