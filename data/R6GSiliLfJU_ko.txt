- 오늘 이 자리에 와주셔서 감사합니다.제 이름은 브루노 에메르예요.저는 제 동료 바이런 아르나오와 함께 왔어요.우리 둘 다 해결책이에요
크리티컬 역량 팀의 설계자와 현재
고객이 좋아할 수 있는 방법에 대해 이야기해 보겠습니다.
특정 건축 패턴을 활용하여 면적을 줄이세요.
영향력이 크고 어려운 날에도 버틸 수 있죠?한 가지 명심하고 싶은 건
이 세션은 매우 학문적이고 100, 300 레벨의 세션처럼 진행될 것입니다.그래서 우리는 이에 대해 이야기하지 않겠습니다.
예를 들어, 어떤 네트워킹 개념이나 심지어 우리와 같은 서비스들도요.
건축 패턴에 정말 집중하고 있습니다.
이 세션에서는 여기요. - 자, 이건 좀
오늘 여러분을 초대한 실험입니다.그러니까 이건 기본적으로, 우리가 할 거라는 거죠.
워크숍은 우리 둘이 어렸을 때 그 형식이었는데
이걸 해볼까 생각해 봤는데, 우리가 나누던 대화였죠.그래서 우리가 할 얘기는
고객들이 일반적으로 듣는 이야기의 역할을 약간 설명해 드리죠.
몇 가지 당면 과제와 문제에 대해 이야기해 보세요.
다음에 대해 생각할 때는 꼭 생각해야 할 것이 있습니다.
이런 식으로 고립되는 거죠.그렇긴 해도 알다시피 AWS는 우리 문화에 깊숙이 자리 잡고 있습니다.
이런 생각은 항상 실패할 거라는 건가요?아마 이 슬라이드를 보셨을 겁니다.
일주일 내내 여기 계셨다면요.이런 얘기가 나왔어요
몇 군데 다른 곳에서 말이죠.그래서 바로 여기가
AWS에서 하는 일의 핵심입니다.오늘을 통해 많은 것을 배우실 수 있기를 바랍니다.
여러분이 경험하는 실패나 영향이 회사에 미치는 영향은 아닐 것입니다.먼저 생각해 보고 싶습니다.
카테고리에 대해, 혹은 그냥 일반적으로 생각해보세요.
실패에 대해서요, 그렇죠?그래서 이것들이 사라지고 저기
아마 알아두셔야 할 것들이 많죠, 그렇죠?그래서 코드에 대해 생각해 봅시다.
배포 및 구성.이런 것들이 전형적인 모습입니다.
잘못된 코드 배포에서 볼 수 있는 것들은
애플리케이션 구성 오류, 이런 것들.
그리고 알아두세요, 그렇죠?우리가 생각할 때
하드웨어와 그런 문제들, 맞죠?우리가 생각하는 건 절대 아니에요
문제의 유형에 대해, 아시다시피, 어디서 시작되는지에 대해
처음에는 하드웨어가 좀 있을 수도 있는 그런 상황이었죠.
실패를 겪게 되면 중간을 통과해서 잘 돌아가게 되죠.
그리고 물론 마지막에는 다 타버리기 시작하죠.그래서 결국엔
실패하기 시작하는 문제죠.데이터 및
상태 유형의 문제.두 번째 범주는
제가 여기서 보여드리는 것은, 아시다시피, 보통
데이터 캐시가 오래되고 구성이 잘못되면 메모리가 부족해질 수 있습니다.
예를 들어, 이런 유형의 문제가 있을 수 있습니다.
그런 범주들 말이에요.그리고 다음과 같은 것들이 있습니다.
서드파티 유형의 물건들이죠.따라서 업무, 기타 서비스 또는 워크로드에 대해 생각해 볼 수 있습니다.
여러분이 의존하고 있는 조직.뉴스 피드에 대해 생각해 보세요.
가지고 계신 애플리케이션의 다른 부분들.이러한 유형의 문제는 다음과 같습니다.
거기에서 일반적으로 생각하게 될 문제들이죠.그리고 핵심 인프라, 그렇죠?그게 뭔지 알잖아요, 그렇죠?RAC 장애, 인프라 관련 문제, 그런 성격의 것들
일종의 네트워크 데이터 센터 문제 등이죠.그리고 물론
가능성이 거의 없는 시나리오이고 여러분도 몇 장의 사진을 보셨을 겁니다.
이런 것들에 대해 생각해 보세요. 예를 들어, 우리가 다음과 같은 이야기를 할 때
유성 투하, 아시다시피, 지역 전체가 고장나고, 권력이 떨어지고
전력망 문제 등등, 그런 것들이요.그러니까
이 모든 것을 말하자면, 생각해보면
이것들의 원인은 다양하죠?왼쪽에 있는 것들은 다음과 같습니다.
분명히 우리는 고가용성을 염두에 두고 설계하죠, 그렇죠?이런 것들은 다음과 같습니다.
우리가 얘기하고 있는 운영자의 실수인지 아닌지,
잘못된 코드 배포, 컴포넌트 포스트 실패,
전체 랙 장애, 이런 종류의 문제들이죠.그리고 나서 여러 가지 생각을 하게 되죠.
여기 반대편에서처럼요. 우리가 실제로 하고 있는 곳이죠.
우리의 DR 유형의 발견이죠?대부분의 고객은 정말
이런 문제에 초점을 맞추는 것은 장기적인 문제와 같습니다.저희는
전체 인터넷 장애, 지역 장애 등
그런 성격의 것들이죠?그럼 그럴 가능성은 거의 없겠죠?그래서 그런 것들은 더 드뭅니다. - 네.그러니까, 바이런, 내 생각엔
지금 말씀하신 게 우리가 생각하는 방식이잖아요
실패란 그런 걸 예측하려고 하는 거잖아요, 그렇죠?그리고 이러한 범주들은 우리에게 도움이 됩니다.
그 지점에 도달하기 위해서죠, 그렇죠?하지만 제 생각엔, 문제는
정말 어떻게 하면 우리 자신을 보호할 수 있을까 하는 생각이 들어요.
그런 실패에 대비해서?어떤 메커니즘이 있는 걸까요?
우리가 거기에 도달할 수 있는 사고방식이 필요할까요?- 네, 좋은 질문이에요.그럼 오른쪽 상단에 있는 것들인가요?많은 고객들이 이렇게 생각합니다.
오일 체크 그린에 대해 말하자면, 그들은 정말, 바로 이런 것들입니다.
우리가 흔히 알고 있는 거잖아요, 그렇죠?RAC 다운, 오토가 생겼어요
이를 위한 스케일링 그룹AZ 장애, 해당 유형
뭐 그런 것들이요.다시 말씀드리지만, 거래 상황을 보실 수 있습니다.
다중 AZ 배포, 지역 장애 조치로 해결할 수 있습니다.
지역적 장애가 있잖아요, 그렇죠?하지만
이런 것들은 바닥에 있습니다. 잘못된 배포들처럼 말이죠, 인간
일부 고객들이 알고 있는 실패와 독약
속편 주사를 맞는 블랙 스완 같은 이벤트
아니면 잘못된 코드 같은 것도 있고요.
시스템을 망가뜨립니다.바로 그 사람들이죠.
완전히 완화하기는 정말 어려워요. - 네.다시 한 번 생각해보면
그런 관점에서 봤을 때 그렇죠?그리고 이것들을 생각해보면
실패와 이를 완화하는 것이 얼마나 어려운지 다시 한 번 질문을 던질 뿐인 것 같아요.
워크로드가 너무 커지거나 실제로는 너무 커집니다.
실패하는 게 중요하죠?가장 중요한 건 이거처럼요.
우리가 얘기하는 어플리케이션들은요. - 네, 좋은 질문이네요.자, 이제 실제에 대해 이야기해 봅시다.
세계 시나리오부터 시작해볼까요?그래서 우린 이미 많은 걸 얻었죠
많은 사람들이 이런 중요한 하이퍼스케일링 유형을 가지고 있습니다.
너무 커져서 테스트할 수 없는 애플리케이션의 양상이죠.이런 타입은 사실 그런 것이 아닙니다.
모든 워크로드가 반드시 필요하겠죠.
이런 유형의 격리를 해야 하지만
가장 중요한 건, 아시다시피, 그러려면 시간이 오래 걸리죠.
테스트하고 확장하세요, 그렇죠?그럼, 알다시피, 우리는 언제 이런 생각을 하고, 오늘날 어떻게 할 수 있을까요?- 글쎄요, 이게
어려움을 이해하는 걸 정말 좋아하죠, 그렇죠?다시 말씀드리지만, 바이런이 말했듯이, 우리는 정말 많은 것을 가지고 있습니다.
장애 모드와 비슷한 완화 조치들이 마련되어 있습니다.
건축에 대해 생각해 보고 이야기를 시작해볼까요?정말 이해를 하고 있는 거죠.
여정 같은 것도 요즘 우리가 하고 있는 것과 비슷하죠, 그렇죠?그래서 대부분의 애플리케이션은
우리가 흔히 볼 수 있는 것들은 다음과 같은 것들에 의존하는 것처럼 말이죠.
전통적인 엔터프라이즈 복구 전략.그래서 우리는 대부분
백업, 복원 연습 같은 걸 말하는 거죠?그리고 이건 뭔가요?
아주 평온한 것 같아요, 그렇죠?하지만 우리가 방향을 바꾸기 시작하면서
클라우드와 우리는 좀 더 진보한 수준으로 전환하기 시작했습니다.
레질리언스 패턴 같은 것도 분명 생각해 볼 거예요.
앞서 말씀하신 것처럼 고가용성과
재해 복구에 대해 얘기할 거예요, 그렇죠?다시 말씀드리지만, 말씀드렸듯이 이건 정말 다음과 같은 문제입니다.
여정을 거치면서 이걸 발전시켜 나갔죠.그래서 보통 우리가 보는 것은 다음과 같습니다.
고객들은 멀티 존 (Multi-Zone) 으로 시작해서 의존하고 있습니다.
가용 영역을 기반으로 일종의 구현을 하고 있습니다.
가용성이 높은 애플리케이션과 같은 활성 고가용성 구현
또는 다중 영역 페일오버와 같은 것을 생각하는 것과 같을 수도 있습니다.
전략 맞죠?그러면 다음과 같이 진화하는 경향이 있습니다.
점점 더 다양한 지역으로 발전하기 시작했죠.
액티브 디플로이먼트는 물론이고, 페일오버와 같은 멀티 리전도 가능하죠?이걸 없애는 것과 같아요.
우리 지역의 경계선, 그냥 외삽하는 것 처럼요
그들에 대한 적용이죠.그리고 제 생각엔 정말
메시지는 이런 것을 기본으로 생각하고 있습니다.
사실 우리가 생각하기 시작할 수 있게 해주는 것이죠.
좀 더 발전된 레질리언스 패턴 같은데요?제 생각엔 이게 정말 맞는 것 같아요.
마치 대화의 장소 같은 컨텍스트를 설정하는 것과 같습니다.
어디서 와야 되고 어디로 가는지, 그렇죠?다시 말씀드리지만, 그 점을 염두에 두고 보면 정말 뒤로 물러나는 것 같아요. 마치 한 걸음 뒤로 물러서는 것과 같습니다.
다시 한 번 질문을 던지죠. 보통 우리는 이렇게 하죠.
처음에 겪었던 실패로부터 보호해 주세요.
완화하기가 쉽지 않나요?- 네.자, 여기서 리뷰를 좀 해보자면, 기계로 돌아왔는데, 알다시피, 우리는 그 것들을 살펴봤어요.
실패하기 쉬웠지만 오른쪽 아래에 있는 것들은
이 문제들은 우리가 정말로 해결할 수 있어야 하는 것들입니다.그럼 지금부터 생각해 보죠.
벌크헤드 패턴의 관점이죠?우주선을 가지고 계신 거죠. 개념을 차용한 거죠.
이 격벽이 있는 해군 공학과 관련해서요.
설치 방법은 이 모든 내부 챔버와
보트 안에 있어서 특정 구역이 영향을 받을 경우
잘 모르겠어요. 부딪혔다고 가정해 봅시다.
빙산, 예를 들어 배 전체가 그러지 않을 거라고 해봅시다.
물을 가득 채우세요, 그렇죠?그래서 그게 예방이 되는 거죠.
배 전체가 가라앉는 걸 막을 수 있죠.그러니까 이건 고립된 실패죠.그게 바로 그런 종류의 문제죠.
그걸 생각하고 있어요.그렇긴 해도, 이걸 소프트웨어로 어떻게 만들 수 있을까요?- 음, 다시 말씀드리지만, 제 생각에는
이건 대단한 컨셉이네요, 그렇죠?제 생각엔 이게
정말로 좋아요라는 개념에 대해 이야기하기 시작하면
셀 기반 아키텍처 맞죠?하지만 그 얘기가 나오기 직전에 여기 계신 청중들께 여쭤보고 싶은게 있는데, 여기 계신 분들 중에 이 분야에 종사하시는 분이 얼마나 되시는지 여쭤보고 싶습니다.
셀 기반 아키텍처라는 이런 개념에 대해 들어보신 적이 있으신가요?좋아요, 좋아요, 고마워요.그리고 그 사람들 말처럼
실제로 들어보셨을 때, 얼마나 많은 분들이 이런 패턴을 가지고 계실까요?
프로덕션 환경에서 실행 중이신가요?정말 그래요.
구현했습니다. 알겠습니다. 몇 분이 보이는데 따라잡고 싶습니다.
나중에 좀 더 알아보고 싶은데요.
당신이 거기서 하고 있는 일처럼요. 왜냐면 이건
우린 정말 관심이 있어요, 그렇죠?하지만 마치 앞으로 나아가는 것과 같아요.
그리고 우리가 기준선과 같은지 확인하는 것, 그런 식으로요.
저희는 이 프레젠테이션과 같은 레벨링 세트를 만들고 있습니다.'유사 세포'라는 개념
기반 아키텍처는 다음과 비슷합니다.
바이런이 이 주제에 대해 언급할 때 얘기했던 것은
벌크 헤드가 더 좋죠?그래서 우리가 볼 때,
기존 소프트웨어 아키텍처 또는 기존 소프트웨어 아키텍처처처럼
애플리케이션 아키텍처, 우리는 모든 것을 좋아할 것입니다.
피드를 받고 모든 것을 서비스하는 것은 거의 다음과 같습니다.
우리가 제공하는 인프라, 맞죠?자, 이 예시에서는
인스턴스에 쉽게 넣을 수 있는 로드 밸런서가 정말 좋았을 것 같아요.
마치 종속성 역할을 하는 것과 같은 데이터베이스.하지만 생성이라는 개념은
이 벌크헤드는 복사본을 만드는 것과 비슷하거나 실제로
전체 애플리케이션의 인스턴스가 서로 다릅니다.그리고
전체 애플리케이션과 마찬가지로, 제 말은 정말 그 애플리케이션처럼 말이죠.
그리고 우리가 실제로 소유하고 있는 모든 종속성과
우리가 원하는 대로 그것들을 개별적으로 배포하는 것은
벌크 헤드 패턴 맞죠?이건 정말 어떤가요?
우리는 세포를 호출할 것입니다.그래서 이렇게 시작한다면
전체 애플리케이션의 복제본을 여러 개 배포하는 것으로 시작해서 실제로 격리하고 있습니다.
특정 장애, 맞죠?무슨 일이 생기면
특정 세포 하나에만
실제로 영향을 받는 사람은 고객 또는 고객일 것입니다.
그 특정 셀에 묶여 있잖아요, 그렇죠?그러니까 진짜 줄인 셈이네요
잠재적 고장의 폭발 범위, 맞죠?하지만 이렇게 하는 것이 매우 중요하죠.
이런 상황에 대해서는 이해해 주세요.
구현 데이터는 파티셔닝이 필요하죠?우리가 얘기하는 건 아니에요
데이터를 세포에 복제하는 거죠.기억하시겠지만, 한 가지 개념은
데이터를 포함한 모든 것이 세포 안에서 살아야 합니다.
사용자나 클라이언트가 소비하게 되는 거죠?다시 말씀드리지만, 이 방법은
해당 애플리케이션에 대해 완전한 격리를 제공하는 것과 같죠?다시 말씀드리지만, 우리에게도 도움이 됩니다.
왜냐하면 우리가 이 모델을 중심으로 생각하기 시작하면 실제로 다음과 같은 결과를 얻을 수 있기 때문입니다.
이 경우에는 예측 가능한 규모 단위인데
세포가 되겠죠?그럼 세포에 대한 몇 가지 개념이죠?그냥 확실하게 하기 위해서요
아주 분명한 사실인데요, 첫 번째로 중요한 것은 세포는
워크로드 격리 같은 기능을 제공하기 위한 거죠?이것이 바로 우리가 시도하는 것입니다.
여기서 달성하고자 하는 것은 워크로드 격리를 통해 실제로 할 수 있을 것입니다.
마치 장애 억제 같은 걸 구현하는 것 같죠?다시 말씀드리지만, 벌크 헤드 패턴의 경우 셀 하나에 문제가 생기면 문제가 확대됩니다.
단일 세포는 전체 환경이 아니죠?실제로 변하고 있는 거죠.
스케일링이라는 개념은 스케일링에 대해 생각하기 시작했기 때문이죠.
스케일아웃 vs 스케일업, 맞죠?그게 바로 컨셉이죠.업무량이 점점 늘어난다면, 더 많아지면
사용자, 더 많은 클라이언트, 더 많은 셀을 추가할 거예요.용량을 더 추가하는 게 아니에요.
세포에 말이죠, 그렇죠?그러면 다음 단계로 넘어갈 수 있습니다.
그러면 세포의 크기가 항상 최대로 커집니다.그러니까 우리가 그렇게 말하는 게 아닌 것 처럼요.
모든 세포는 다른 세포와 다를 것입니다.아이디어는 이들을 다음과 같이 만드는 것입니다.
왜냐면 이게 테스트에 도움이 될 거고 심지어
이런 전체 환경의 관리 용이성 맞죠?다시 말씀드리지만, 세포는 세포를 감소시킬 것입니다.
이러한 실패가 미치는 영향 범위, 맞죠?다시 말씀드리지만, 어떻게 다른지
기존 환경과는 다르지만, 만약 그렇지 않다면
세포의 개념처럼요. 만약 제가 이런 걸 가지고 있다면
단일 구현, 내 단일 인스턴스
애플리케이션 전체에 오류가 발생하면 모든 사람이 영향을 받습니다.하지만 제가 생각해보면
판매라는 개념 맞죠?그리고 만약 이런 게 있다면
구체적인 실패는, 정말 문제가 있는 것 같아요.
특정 사용자 그룹에 해당 오류를 포함하는 것과 같습니다.
사용자 아니면 클라이언트, 맞죠?그래서 우리는 정말로 줄이는 것과 같습니다.
잠재적 재무적 측면에서처럼 우리에게 미치는 영향도
손실은 거의 모든 사람에게 영향을 미치는 것과 같지 않기 때문입니다.
회사 이미지에 도움이 되잖아요, 그렇죠?꼭 필요한 것은 아니기 때문에 꼭 큰 것 같지는 않습니다.우리는 앞서가는 게 아니에요.
전체 애플리케이션이 다운되었다고 말하면서 페이지 뉴스에 올라왔죠?이게 정말 바뀌고 있어요
장애가 실제로 사용자에게 어떤 영향을 미치는지에 대한 인식과
그게 우리 비즈니스에 실제로 어떤 영향을 미치죠?하지만 그게 한 가지인 것 같아요.
바이런, 우리가 말하는 게 이런 격리에 대해 말하는 건가?
세포, 그리고 이런 데이터를 복사해서 말이죠, 그렇죠?그리고 좀 다른 것 같기도 하고
인프라와 같은 것들 말이에요. 다른 인스턴스들처럼요.하지만 막상 일이 생기면
액세스 패턴과 이 데이터를 공유하는 것은
각 사용자가 어디로 가야 하는지 명확하게 알려주면 어떻게 생각할까요?- 네.그래서 생각해 볼게요
전통적인 건축물의 관점에서 보면 그렇죠?저희는 보통 여기에 라벨을 붙였는데 방금 살펴본 결과
A부터 H까지 라벨을 붙였어요. 그러니 이것들에 대해 생각해 보세요.
워크로드와 고객, 그리고 우리는 맨 아래에 있는 노드에 대해 생각합니다.그리고 오늘날에도
누군가 들어가서 그냥 워크로드라고 부릅시다.
예를 들어, 그렇죠?그리고 그들은 통과하고 저기 있어요.
그 워크로드에 문제가 있잖아요, 그렇죠?그래서 결국 중독에 빠지죠.
첫 번째 노드가 저기 있다가 결국 문제가 생깁니다.그럼 어떻게 하면 효과적일까요?
그러면 해당 노드를 사용할 수 없게 됩니다.그래서 그건 좋지 않아요.
이상적이긴 하지만 안타깝게도 결국에는
그 같은 작업량을 가지고 독약이나 그런 것에 대해 이야기를 나눴습니다.
블랙 스완 이벤트가 시작되었는데 이제 보게 되는 것은
결국 전체 워크로드에서 발생하는 연쇄적인 실패입니다.그건 일종의 도전이죠, 그렇죠?그리고 우리가 없애고 있는 건
하루가 끝날 무렵에는 모든 워크로드의 모든 것이 가능하지 않습니다.
우리 서비스를 활용할 수 있어야 해요. - 네.그리고 일종의
분명히 말씀드리자면, 이 독약에 대해 이야기하실 때 꼭 그런 것은 아닙니다.
의도적인 거잖아요, 그렇죠?아까 말씀하신 것처럼
코드를 기반으로 하고 실제로 할 수 있는 재시도
인프라를 무너뜨리세요, 그렇죠?- 네, 우리 모두 예전에 이런 걸 본 적이 있어요. 이런 계단식 구조들이 있거든요.
영향 영역에서의 실패, 그렇죠?오늘날 우리가 보는 것 중 많은 부분이 그렇습니다.
우리가 모든 고객을 보유하고 있다는 거죠.또 다른 사고 방식으로는
하지만 이 문제에 대해서는 이걸 받아들이고 생각해보는 거예요.
이걸 샤딩하는 거에 대해서요, 그렇죠?그래서 이걸 통째로 가져가면
이걸 다시 한 번 해보시고 “알았어, 이걸 분해할게”라고 말하세요
조각이 나와서 여덟 개 다 먹지는 못하겠어요.
같은 워크로드 세트 또는 서버 세트 맞죠?하지만 저는 이것들을 여러 조각으로 나누겠습니다.그래서 오늘 E가 나왔을 때도 마찬가지입니다.
같은 독약과 같은 문제, 똑같은 배포 이슈가 들어오고 있는데, 아까 말씀드렸듯이 그 첫 번째 메모를 깨트립니다.
거기선 사용할 수 없게 되죠.무슨 일이 일어날 거라고 생각하는지
같은 걸 가지고 들어가서 추가하죠.
작업량은 또 똑같아요. 결국엔 망가질 거예요
두 번째 문제지만 결과는 훨씬 낮죠, 그렇죠?이걸 관점에서 본다면 이제 F는
물론 이것의 영향을 받지만 다른 워크로드는 영향을 받지 않습니다.여기 저기 보이실 겁니다.
이렇게 하면 E와 F를 제외한 나머지 모든 것들이
아시다시피 워크로드는
보존하고 우리가 기대하는 대로 작동하세요.그래서 우리는 이 분야에 대해 생각해 보죠.
클라이언트를 샤드로 나눈 값이라는 것을 보여주기 위한 것이죠, 그렇죠?그래서 샤드가 많을수록
이걸 세분화하면 할수록 궁극적으로는 영향이 줄어듭니다.
결국에는 겪게 될 거예요, 그렇죠?그렇긴 해도, 그렇죠. 이건 정말 어려운 일이죠.
어떻게 하면 이 모든 다양한 세포로 라우팅할 수 있을지 생각해 보세요. 그렇죠?왜냐하면 지금은 거의 비슷하니까요.
어떤 면에서는 단일 실패 지점이죠. - 네.그리고 제 생각엔
이건 일종의 자연스러운 질문인데 결국 퇴원하면 되겠죠.
사용자가 좋아하고 모든 요청이 들어오는 것으로 보고되었습니다.
요청이 어디로 들어가야 하는지 어떻게 알 수 있을까요?
판매 조건, 심지어 사용자와 같은 샤드가 어떤 샤드에 속해 있는지도 알 수 있습니다.이것이 바로 이런 이유 때문입니다.
셀 기반 아키텍처를 구현하는 것과 같습니다.
애플리케이션 수준에서 방전하는 것과 같은 것을 생각한다면, 생각해 볼 필요가 있습니다.
라우팅 메커니즘을 구현하는 거죠?그러니까 얘기할 때는
이 라우팅 메커니즘에 대해 말하자면
정말 얇은 레이어로 구현과 같은 역할을 할 것입니다.
라우팅 로직, 맞죠?그리고 거의 비슷하죠
애플리케이션은 그걸 기반으로 하기 시작할 거예요, 그렇죠?그러니까 이 말은 안 할게요
응용 프로그램을 더 쉽게 사용할 수 있게 해주겠죠?몇 가지를 소개해 드릴게요.
복잡성, 그리고 이것이 바로 이 구성 요소가 반드시 필요한 이유입니다.
매우 탄력적이어야 하죠, 그렇죠?모든 것을 실행할 수 있어야 합니다.
그 이유는 라우팅에 관한 모든 로직이 그렇듯이 요청이 어디에 있는지와 같은
어떻게 처리될 건지, 샤드가 뭔지, 필요한 셀이 뭔지 등등
그러려면 확실히 이걸로 처리해야 돼요
특정 구성 요소 맞죠?그래서 이 개념은 정말 비슷하죠.
이 컴포넌트를 최대한 단순하게 만드세요, 그렇죠?이것이 우리가 의미하는 바는 다음과 같습니다.
이게 얇은 라우팅 레이어라는 거죠?그건 그렇고, 씬 라우팅이라는 건 그냥
몇 줄의 코드에 대해 얘기하는 것 같은데요, 그렇죠?마치 우리가 좋아하고 싶은 것 처럼요.
그 이면에 있는 소프트웨어 엔지니어링에 대해 생각해 보세요.
코드 몇 줄이면 돼요. 그 이상은 안 돼요. - 그럼
데이터베이스 검색을 예로 들어볼까요?- 이상적으로는 아니죠, 그렇죠?마치 우리가 원하는 것처럼
일시적입니다. 다시 말씀드리지만 탄력성이 매우 높은 것으로 만들고 싶기 때문입니다.
그리고 우리는 외부 의존성의 필요성을 줄이고 싶습니다.
이 컴포넌트의 경우 맞죠?또한 줄임으로써
외부 의존성을 줄이는 것 외에도 다음과 같은 작업을 수행하고자 합니다.
컴포넌트가 정적으로 안정적이죠?사실 그 말은 심지어
인프라에 비슷한 환경이 있다면
이 컴포넌트가 실행 중이죠?건너편처럼 실행되고 있다면
ACS가 다르고 거기에 문제가 있는 것 같아요.
AZ: 우리가 여전히 원하던 컴포넌트에 영향을 미칠 수 있습니다.
예를 들어 계속 작동할 수 있는 충분한 용량을 갖추는 거죠?그러니까 이건 정말 비슷하죠.
이게 전부예요, 그렇죠?그리고 이런 일이 생기면
이걸 구현하는 방법들, 방법이 아주 많다는 말이지요.
이걸 기술적으로 어떻게 구현할지 생각해볼 수 있다는 거죠.
그리고 이 라우팅 메커니즘을 어떻게 작동시킬 수 있는지 말이죠.그리고 저는 그냥 돌아가서
그 중 두 가지에 대해 아주 짧게 얘기하죠, 그렇죠?아주 간단한 방법은
프로토콜과 같은 기술을 사용해서 생각해봅시다.
꽤 오래전부터 사용되어 왔는데, DNS가 맞죠?거의 모든 애플리케이션
요즘은 인터넷 전체에서 DNS를 활용하고 있습니다.
DNS에 의존하죠?그럼 다음과 같이 생각해 볼 수 있습니다.
거기에 경로를 만들어 이 부분을 만들면
기본적으로 DNS 항목을 업데이트하는 코드죠?그리고 얘기하고 나니까
판매 및 요금 청구에 대해서는 각 고객에게 제공하겠습니다.
사용자 또는 다음과 같은 고객에게 다가가는 고객
특정 영업 담당자, 특히 URL이 마음에 드시나요?각 클라이언트가 그렇듯이
요청을 보내는 것과 마찬가지로 요청만 담당합니다.
어디로 가야 하는지 바로 알 수 있죠?- 그리고 이건 정말 대단한 일이에요
좀 더 간단하게 접근할 수 있는 방법은, 실제로는 그렇지 않기 때문이죠.
아시다시피 많은 소프트웨어가 라우팅 및 판매를 위해 만들어졌습니다.그러니까 이런 건 그런 게 아니에요.
진열대에 진열되어 있는 물건을 사용하는 것과 같죠. - 네, 맞아요.건물이 정말 마음에 들어요.
이런 유형의 라우팅 메커니즘에 대한 프로세스는 다음과 같습니다.
이 소프트웨어를 너무 많이 만들면 실제로는
DNS에서 해당 항목을 업데이트하세요, 그렇죠?그리고 컨트롤을 옮기면
이 트래픽이 다시 클라이언트로 돌아가는 거죠?그리고 정말 그럴 수도 있겠죠.
소수에 대해 이야기한다면 좋은 일이죠.
셀, 아니면 소수의 사용자일 수도 있습니다.하지만 우리가 성장하기 시작하면
신청이 많이 되고 그 수가 늘어나기 시작합니다.
셀 수와 사용자 기반 확장은 매우 복잡해질 수 있습니다. 그렇죠?관리 과정을 살펴보도록 하겠습니다.
그에 따른 복잡성, 그렇죠?예를 들자면, 그렇죠?예를 들어, 사용자 한 명을 옮기고 싶은 것 처럼요.
한 셀에서 다른 셀로 이동하려면 DNS, CTL에 의존해야 할 거예요. 그걸 보내야 해요.
정보가 다시 클라이언트에게 전달되죠.그래서 그 점에 대해 말씀드려야 할 것 같아요.
지역도 마찬가지죠?다시 말씀드리지만, 다음과 같은 용도로 잘 작동합니다.
간단한 사용 사례지만 상황에 따라 다르다고 말할 수 있습니다.
복잡성은 좋은 생각이 아닐 수도 있겠죠?그리고 우리가 이야기를 나눈 후로 정말
이 아이디어들과 복잡성, 이걸 처리하는 또 다른 방법에 대해
제대로 작동할 수 있는 셀 라우터를 만드는 것을 고려하고 있습니다.
거의 로드 바운서 같은 것 같아요, 그렇죠?그래서 여기의 아이디어는 다음과 같지 않습니다.
기존 프로토콜에 의존해서 생각해낸 아이디어는 다음과 같습니다.
이 완전히 새로운 계층은 모든 요청을 받을 것입니다.
그러면 이 레이어는 전송만 담당하게 됩니다.
트래픽이 있어야 할 곳이죠, 그렇죠?그러니까 서버 쪽이죠. 클라이언트에게 의존하는 것과는 다릅니다. 클라이언트가 그렇게 하지 않는 것처럼 말이죠.
이 레이어가 존재한다는 거 아시죠?하지만 마치 완전한 제어 기능을 제공하는 것 같아요.
트래픽을 어디로 보내야 하는지 말이에요. - 네, 그러고 보니
물론 이런 식이긴 하지만 DNS에는 TTL이 있을 수 있습니다.
올해 그런 성격의 것들은 그렇지 않을 거예요. 그러니
반응도 좀 더 빨라졌어요. - 네, 맞아요. - 저희가 클라이언트 측인 것처럼 - 맞아요.우리가 정말 통제하고 있어요
서버 측의 모든 트래픽 로직이 그렇죠?하지만 그게 그런 뜻은 아니에요
솔직히 말해서 간단할 거예요, 그렇죠?우리는 다음과 같은 것에 대해 생각해 볼 필요가 있습니다.
방금 살펴본 모든 개념들에 대해 생각해 볼 필요가 있습니다.
이것을 매우 탄력적으로 만드는 데에는 많은 것들이 있습니다.
적용할 수 있는 다른 기법들이 있죠?예를 들어보죠.
라우팅 레이어를 만들어야 한다면 어떻게 접근할 수 있을지 말이죠.한 가지 사고 방식은
저는 정전기 장애에 대해 정말 생각하고 있는데
이 라우팅 레이어를 서로 다른 두 레이어로 나누는 것에 대해 생각해 보세요.
컨트롤 플레인을 생각하는 레이어죠.여기서는 모든 로직, 모든 신규 셀, 신규 사용자, 거의 모든 것을 구현할 것입니다.
그게 일종의 중요한 작업이죠.이걸 보내면 좋겠어요
컨트롤 플레인 다음엔 데이터 플레인만 있으면 되겠죠.
기본적으로 이 정보를 수신하게 되고
요청을 라우팅하는 거죠?그나저나, 이야기를 시작하면
이건 사실 대부분 우리가 이해하고 있기 때문이죠.
비행기는 훨씬 더 복잡한 경향이 있습니다. 왜냐하면 이것은
여기서 모든 로직을 다루게 되죠.여기가 당신이 있는 곳입니다
정말 모든 변경 사항을 적용하고 있죠?그래서 우리가 확실히 하고 싶은 건
컨트롤 플레인이 애플리케이션 다운되더라도 라우팅에는 영향을 미치지 않겠죠?그리고 정말 다른 것도 있어요
우리가 생각할 수 있는 메커니즘을 위에 추가할 수 있습니다.
더 탄력적으로 만들기 위해서죠.생각해 볼 수 있는 건
작업 패턴이 일정하기 때문에 다양한 종류가 있습니다.
이 구성 요소가 제대로 작동하는지 확인하기 위해 할 수 있는 일들
정말 필요한 만큼 회복력이 필요하죠. - 그리고 이게 바로 우리의 모습인 것 같습니다.
스태틱에 대해 이야기할 때 줄곧 고객에게 알리십시오.
안정성은 데이터 플레인 운영에 더 초점을 맞춰야 합니다.
컨트롤 플레인에 집중할 수 있다는 것보다도 말이죠.우린 그 컨트롤을 알고 있으니까
비행기는 신뢰성이 떨어질 수 있어요. - 네, 맞아요.그리고 그럴 수 있는 것처럼
정확히는 신뢰성이 떨어지죠. 왜냐하면 더 많기 때문이죠.
움직이는 부품 맞죠?- 네. - 움직이는 게 더 있어요
조각들이니까 항상 그것에만 의존하고 싶진 않아요. - 네.그래서 제가 생각하는 건
그리고 제가 이 문제에 대해 어떻게 생각하는지 아시다시피 그게 정말 중요하죠.
왜냐하면 사람들이 이 모든 것에 대해 혼란스러워하는 것 같거든요.
뭐, 그렇죠, 셀은 가용 영역이나 지역이 아닙니다.
그리고 이것은 구별되는 중요한 사실이죠, 그렇죠?쉬울 것 같아서
이러한 세분화를 통해 가용성에 대해 이야기할 수 있습니다.
물리적 격리 경계로서의 구역 및 지역.우리가
세포 같은 것에 대해 생각해보면 사실 더 많은 이야기를 하고 있는 거죠.
분리를 위한 논리적 장벽에 대해서요, 그렇죠?그래서 생각해보면, 제가 오버레이를 해서 그냥 넣으면
이걸 합쳐서 “좋아요, 보시면 아시죠?
세포에서는 사실 그럴 수 있어요. 왜냐하면 우린 여전히 같은 걸 가지고 있으니까요.
우리가 가지고 있는 HA DR 관련 고려 사항들, 그 중 어느 것도 사라지지 않았어요.그래서 우리는 실제로 세포를 가질 수 있습니다.
그러면 여러 지역의 여러 AZ에 걸쳐있을 수 있겠죠?왜냐하면 우리가 가지고 있을 수도 있기 때문이죠.
애플리케이션, 즉 고객이 '괜찮다'고 말하는 것은 매우 중요하고 확장성이 뛰어나야 합니다.
해당 가용성 수준을 유지할 수 있습니다.그러니까 정말 그래야겠네요
일종의 세포들이 서로 다른 구획화를 해주는데
이 둘을 조합해서 디자인하는 게 정말 좋겠어요.
신뢰성 목표를 달성하기 위한 것들이죠.또한 세포는 그렇지 않습니다.
스케일링 메커니즘처럼 반드시 묵시적으로 사용되어야 합니다.그럴 수도 있습니다. 여러분에게 도움이 될 수 있습니다.
전체적으로 안정성을 유지할 수 있기 때문에 확장이 확실합니다.
전체 사용자층과 유입되는 고객.하지만 저는 이런 건 생각하지 않을 거예요.
제가 먼저 했더라면, 상황에 따라 달라질 거예요.
제가 이렇게 생각하는지 아닌지에 대한 워크로드의 복잡성
스케일링에 적합합니다. - 네, 그러니까 기본적으로
바이런이 말한 것처럼, 여기서 말씀하시는 것은, 제가 유일하게 필요한 것은 단지
제 애플리케이션을 확장하는 것은 제 비즈니스에 중요한 애플리케이션이 아니기 때문에 실제로 그렇게 하지 않을 수도 있습니다.
판매를 활용하거나 요금을 청구하는 것에 대해 생각하다 보면 다른 방식을 생각해 볼 수도 있습니다.거의 다 됐어요, 그렇죠?- 네.네. - 좋아요, 멋지네요.그리고 계속 나아가세요.
대화는 이제 세포의 개념이 생겼고, 충전이라는 개념이 생겼으니까요. 그렇죠?거기서 이 라우팅에 대해 얘기했고, 어떻게 이런 경로를 만들 수 있을지에 대해 이야기했었죠.
레이어의 복원력이 더 뛰어나죠?그래서 이런 정적 개념은
안정성, 컨트롤 플레인, 데이터 플레인하지만 다시 돌아가면
당신의 예를 들어보죠, 바이런, 저는 진짜로 요점을 맞췄어요
처음에는 아무 충전도 하지 않았는데, 독이 있었다면
앞서 말한 연료 시나리오는 모든 고객에게 영향을 미칠 거예요, 그렇죠?그러고 나서 우리는 계속 나아갔고
샤딩에 대해 논의하고 있었는데, 한 고객과 같은 한 가지 문제가 생기면 실제로는 영향을 받지 않는다는 것을 알게 되었습니다.
고객뿐 아니라 다른 고객들도 마찬가지지만, 기본적으로
같은 샤드 위에 앉아 있는 거 맞죠?그래서 제 질문은 정말
복원력을 더 높일 수 있는 방법이 있을까요?다른 것과 같은 것도 있나요?
이 공간에 활용할 수 있는 기법이나 패턴 같은 건 없나요?- 절대 안 물어볼 줄 알았는데샤딩에 대해 생각해 볼 때 예제를 살펴봤습니다.
예전에 기억하고 있는 게 맞아요. 25% 또는 1/4은
고객들이 영향을 받았죠.하지만 다른 방법이 있을 수도 있습니다.
그 문제에 대해 생각해 볼까요?그럼 같은 걸 복용하면
우리가 살펴본 결과, 알다시피, 우리는 재배포를 원한다고 말할 수 있습니다.
그리고 우리는 셔플 샤딩이라는 것을 사용하려고 합니다.셔플 샤딩도 마찬가지입니다.
기본적으로 말하자면 이러한 워크로드를 처리할 수 있지만 그 대신
일대일로 매핑해서
각 세포를 서로 다르게 매핑할 수 있어요.
이 양식 안에 있는 노드들이죠.그리고 그들의 파트너들도
또는 함께 상주하는 고객이나 워크로드
공동 상주하는 두 사람은 거기 있는 다른 노드에 있죠, 그렇죠?그래야 계속 볼 수 있겠죠.
이것들은 무작위로 나타나거나 알고리즘적으로 할 수 있습니다.
해시를 통해 이들 각각을 할당할 수 있도록
방향을 바꿔서 다른 노드에 할당합니다.앞서 설명한 예제를 보면 워크로드 E가 들어오고 있습니다.
물론 이전과 마찬가지로 매핑되지만 첫 번째 매핑에는 매핑되지 않았습니다.
하나는 맞지만 실제로는 첫 번째와 세 번째입니다.
이 특별한 케이스죠.그리고 똑같은 독약이 들어오는데, 똑같은 블랙 스완 이벤트
시스템을 꺼냈다가 예상대로 다시 꺼내는 거죠.
두 번째 걸 없애버리세요.하지만 여기서 우리가 알아차린 것은
우리가 지적해야 할 것은 워크로드의 파트너라는 것입니다.
이 특별한 경우에는 인접한 곳들이 서로 다릅니다.그래서 다른 점이 있습니다.
조합이니까 우리가 봤을 때 같은 걸 볼 수 있어요.
워크로드 C는 영향을 받지 않았고 독약을 먹지도 않았습니다.
아무것도 안 먹었어요. 웃으면서 여전히 행복해요. 모든 게 애들한테는 좋아요
그리고 워크로드 수준에서도 영향을 받지 않습니다.하지만 우리는 같은 것을 보고, 여기서도 같은 것을 가져와
워크로드 D로 갈 수 있습니다. 워크로드 D는 워크로드 E와도 공유하는데, 이 워크로드는 실패한 세트에서 같은 장애가 발생한 워크로드입니다.그러면 워크로드 D를 볼 수 있습니다.
여기 들어왔는데 아직 작동 중이에요.그러니까 똑같아요.
이전에 겪었던 문제를 다음과 같이 완화할 수 있었습니다.
셔플 샤딩을 할 수 있고, 물론 작업을 진행할 때 나머지 부분도 살펴보죠.
워크로드는 신경쓰지 않아요. 이 모든 것에 영향을 받지도 않았죠.우리의 경우를 보면 알 수 있습니다.
이 모든 것이 초록색이거나 E 하나가 빨간색입니다. 우리의 영향 영역은
클라이언트의 오버 콤비네이션.여기 정말 강력한 수학이 있어요. - 네, 이제 막 알아가는 중이에요
다시 수학으로 돌아가 볼까요?방금 논의한 내용에 대해 몇 가지 관찰 내용을 덧붙일 수 있다면
세션 내내 말이죠, 그렇죠?만약에 대해 얘기하는 거라면
전혀 활용하지 않는 기존 아키텍처
마치 샤딩이라든가, 셀 없이 충전하는 그런 식이죠.문제가 있다면 바로
아마 완전히 정전된 것 같겠죠?모든 사람이 영향을 받는 것처럼 말이죠.
실제로 발전하고 샤딩에 대해 논의하기 시작하면 실제로 샤딩을 줄일 수 있을 것입니다.
그 영향은 오직 고객에게만 현지화될 것입니다.
같은 샤드를 공유하고 있는 거 맞죠?바이런이 말한 예시에서
예를 들어, 노드의 개수를 취하면
그가 조합해서 합치면 25% 에 영향을 미칠 것입니다.
고객 중 몇 명이잖아요?그래서 저희는 확실히
이 애플리케이션에서 실패로 인한 영향을 줄이는 것이죠.하지만 한 걸음 더 나아가면
뒤로 돌아가서 셔플 차징에 대해 얘기하고 있는데, 셔플 충전은 우리에게 또 다른 메커니즘입니다. 그 영향은 정말
동일한 노드 조합을 사용하는 고객이나 클라이언트에 맞게 현지화했습니다.그러면 그 영향을 훨씬 더 줄일 수 있겠죠?아니면 앞서 말씀드린 예시에서
고객 중 12.5% 가 영향을 받을 거잖아요, 그렇죠?그래서 우리는 정말로 감축하고 있는 것과 같습니다.
인종 차별 철폐에 대해 생각해 보면 그 영향이 어느 정도인지 아시겠죠?그리고 몇 가지 더 추가하기만 하면 됩니다.
컨텍스트가 맞죠?왜냐하면 이 예시가 있기 때문이죠.
8개의 노드가 있고 샤드당 두 개의 노드가 있었죠?그리고 우리는 일종의
그 사용자들이 그 곳들에 분산되어 있다는 것이죠.하지만 수학은 정말 강력합니다.
그 점에서요.그래서 우리가 받아들이면, 사실 우리는 생각하기 시작합니다.
이 인프라를 늘리고 늘리는 것에 대해
샤드 개수 맞죠?그리고 우리가 간다고 가정해 봅시다.
100개의 노드에 도달하면 각 샤드는 실제로
노드가 다섯 개잖아요, 그렇죠?실제 총 개수는
여기서 얻을 수 있는 조합은 7,500만 개죠?생각해 볼 수 있겠죠.
이 카드들을 가져와서 그냥 가져가고, 무작위로 골라요.
카드 다섯 장이면 최대 7천 5백만 가지 조합이 가능하죠, 그렇죠?- 그리고 이건 정말 상당한 양이죠, 그렇죠?이건 잘못으로 바뀐 거예요
격리 또는 폭발 반경.이건 꽤 중요한 일이에요. - 네, 맞죠?그런데, 만약 시작한다면, 계속하더라도
이 예제를 진행하면서 노드 다섯 개 중 하나를 예로 들자면
이제 고객이 그렇지 않을 가능성은
영향을 받는 사람은 77% 에 달할 것입니다.그래서 제 고객 중 77% 가
이 인프라에서는 거의 아무것도 볼 수 없겠죠?반대편으로 말씀드리자면,
같은 다섯 명의 고객이 같은 다섯 명을 공유하고 있습니다.
노드 수가 0을 더하면 0.000, 즉 13% 가 되겠죠?그래서 우리는 확실히 줄이고 있습니다.
인프라 확장을 시작할 때 미치는 영향 영역
이제 적용 방식을 바꾸는 것부터 시작하겠습니다.
이 샤드 맞죠?이제 거의 다 됐네요.그건 그렇고, 이건 우리가 하는 일이에요
실제로 AWS 내부적으로 하고 있습니다.그래서 만약 우리가 다음과 같은 것을 생각해본다면
이 53번 라우트, 예를 들어 아마존 53번 라우트를 사용하는 경우, DNS 관리 서비스는
이와 똑같은 아키텍처 패턴을 활용하세요. 그렇죠?그러니까 기본적으로 이게
서비스가 매우 높은 SLA를 유지하는 데 도움이 되죠?이것이 바로 그 출처입니다.하지만 제 생각엔 이 시점에서는
우리는 정말로 그런 패턴에 대해 이야기하고 있습니다.지금 얘기하고 있는 게 진짜
어떻게 구현할 수 있을지 모르겠지만 아직 그 이상은 없습니다.
구체적인 사용 사례, 맞죠?그럼 이걸 해보는 게 어때요?생각해 보는 게 어때요?
이걸 실생활에서 어디에 사용할 건지, 그렇죠?다시 말씀드리지만, 그냥 만들고 있어요.
우리가 얘기할 때 그 패턴들은 확실하죠
셀 기반 아키텍처에 대해 말씀드리자면
샤딩, 셔플 샤딩은 확실히 증가합니다
환경의 복잡성.그래서 우리는 정말로 원하지 않습니다.
이걸 우리의 모든 애플리케이션에 퍼뜨리고 싶었죠.우리가 진짜 얘기하는 건
그 중요한 애플리케이션들 맞죠?이게 바로 우리의 모습입니다.
참고해서 예를 들어서 그림을 그려보죠.
커피숍이 있다는 거 맞죠?저랑 저한테는 없어요. 사실 사용할 예정이었어요.
사탕 가게인데 그 애가 운영이나 그런 걸 좋아하더라고요. 설탕을 멀리하라고 했잖아요, 그렇죠?하지만 제 커피숍에는 두 곳이 있어요.
유닛이 다르죠?그 중 하나가 상파울루에 있어요.
또 하나는 뉴욕에 있어요.그리고 거기 제 POS, 등록부, 그리고 모든 것이 있습니다.
누군가가 제 매장에 오면 비용을 지불해야 합니다.
뭐가 있으면 등록하러 가서 돈을 지불하기 시작하죠.
그리고 이건 일종의 백엔드 서비스에 의해 처리되잖아요, 그렇죠?이 예시는 이렇습니다.우리가 다음과 같이 상상해 보세요.
마치 새로운 배포를 하는 것과 같죠?그리고 저는 카나리아를 수행하고 있어요.
배포란 제가 사용하는 모든 POS에 배포하지 않는다는 뜻입니다.
내 모든 레지스터를 한꺼번에.그래서 저는 그냥 할게요
그 중 하나를 만지세요, 그렇죠?그리고 실제로 우리가 가지고 있는 것은
뒤에는 셔플 샤딩이라는 개념이 있죠?그래서 제 레지스터가 모두 달라요.
다양한 백엔드 서비스를 이용할 예정인가요?
기본적으로 주문을 처리하는 것과 비슷합니다.하지만 방금 배포를 해봤어요
POS 번호 2에 레지스터 번호, 그리고
배포가 잘못됐죠?어떤 이유에서인지 저는 그럴 수 없었어요.
내 테스트에서 이걸 캡쳐했는데, 뭔가 고장났어
사실 이건 당신이 언급한 실패 중 하나입니다. 바이런에 대해 말씀하셨듯이
실제로 일어날 일은 이런 일이 벌어지고 있다는 것입니다.
제 백엔드에 영향을 주기 위해서죠.보시다시피 전체 인프라에서 두 대의 서버가 가동되고 있습니다.
다운될 거잖아요, 그렇죠?그리고 POS 2는 사용할 수 없겠죠?그리고 우리는 POS에 대해 이의를 제기할 수 있습니다.
둘째는 레지스터 번호 8, POS 넘버 8, POS와 실제로 인프라를 공유하는 것입니다.
세 번째도 마찬가지죠?그리고 아마도 그럴 수도 있습니다.
그거에 어느 정도 영향을 받긴 하지만 셔플이 있어서
이 예시에서는 샤딩이 실제로는 그렇지 않을 것입니다.
맞죠?이 경우에요.마치 그들이 아직 일을 할 수 있는 것처럼 말이에요그래서 제가 말하고자 하는 것은
제 실생활 시나리오에 이런 게 있고, 제 매장에 있으면 정말 줄일 수 있을 거예요.
여기 블래스트 라디오가 있잖아. - 그러니까 내가 아직
커피는 마실 수 있을 거예요. 뒤쪽이 그렇더라도 말이죠.
특정 커피한테는 망가졌어요. - 바로 그거예요.그러니까 당신이 제 커피숍의 손님이라면 거기 가는 대신
커피를 사려고 하시는데 못 사겠다고 말씀드리지는 않겠습니다.
이제 다 됐으니까 더 이상 너한테 팔아줘. 난 기본적으로
말씀해 주실 수 있으세요, 선생님, 계산대로 가세요
세 번째는 제가 그들의 모든 시간을 맡을 수 있도록 말이죠.
1번 등록이나 제가 가지고 있는 다른 등록부를 등록하세요그러니까 정말 줄어들고 있는 거죠.
영향력, 그리고 이것이 실제 현실에서 보이는 모습입니다.
좀 더 실제적인 예시죠?- 그래서 생각해보면
이 세포들을 어떻게 작동시킬 수 있을까요?- 네.그리고 작전
비교해 보면 정말 달라지죠.
전통적인 건축물이랑 같죠?왜냐하면 다시 말씀드리지만, 이제
세포에 대해 말씀드리는 건데, 이건 단일 인프라가 아닙니다.
다양한 배포에 대해 이야기하고 있는 거죠?하지만 더 많은 것들이 있습니다.
우리가 알아야 하고 생각해 봐야 하는 것들이죠, 그렇죠?그래서 가장 먼저 할 일은
다시 개념으로 돌아가야 할 게 있는데, 우리가 얘기했던 건데요.
모든 세포는 크기가 정해져 있죠?하지만 시작하면 어떻게 되나요?
사용자를 해당 셀로 유도한 다음 특정 셀로 이동시킵니다.
사용자가 제 리소스를 더 많이 사용하기 시작하죠?일종의 자원이 필요해요
거기 열 관리 같은 거요그래서 생각해 볼 게 있어요.
이런 경우에는 다른 분들도 있고요.다시 말씀드리지만, 이건 뭔가입니다.
세포라는 개념과 함께 나온 새로운 개념이죠. 예전에는 없었지만 우리는
이 문제를 해결해야 하죠, 그렇죠?그리고 진짜 사고방식은
항상 균형을 재조정하거나
정말 마이그레이션 도구입니다.그래서 우리가 할 수 있는 건
한 셀에서 다른 셀로 이동하는 사용자 또는 다른 셀로 이동하는 사용자
방법에 따라 특정 셀에 속하게 됩니다.
그들이 그걸 얼마나 많이 사용하고 있냐고요.그리고 그 반대도 사실이죠, 그렇죠?왜냐하면 저는 이 최대치를 가지고 있으니까요.
규모가 커지면 아무도 사용하지 않는 인프라를 갖게 될 수도 있겠죠?그래서 생각해 볼 필요가 있어요.
낮은 분배율에 대해 말하자면, 저는 충분히 똑똑해야 합니다.
다음과 같이 다양한 셀에 사용자를 골고루 배치할 수 있습니다.
할 수 있는 한 말이죠, 그렇죠?그래야 인프라를 최적으로 사용할 수 있겠죠?그리고 또 다른 한 가지는 그래도
우리는 세포에 대해 이야기하고 있고, 셔플에 대해 이야기하고 있습니다.
샤딩의 목적은 폭발적인 현상을 줄이는 것입니다.
코드나 인프라에서 발생할 수 있는 잠재적 오류의 범위는 문제가 발생할 수 있습니다. 그리고 실제로
모든 것이 항상 실패하기 마련입니다.우리는 이 점을 알아야 합니다.그래서 고가용성이라는 개념은
세포 내부에도 있어야 하잖아요, 그렇죠?세포가 고장날 수 있는 것처럼 구성 요소도 고장날 수 있습니다.
언제라도 재해 복구, 고가용성 요구 사항을 해결하는 방안을 생각해 볼 필요가 있습니다.
세포 안에서 말이죠, 그렇죠?그러니까 진짜 필요한게
단일 애플리케이션에서 어떤 작업을 수행하는지에 대한 개념
해당 단일 애플리케이션에 대해 이 작업을 수행하는 것이죠.하지만 여러 번
세포를 더 많이 만들수록 그렇죠?그리고 또 다른 건
테크 스택이 경영진에 어떤 영향을 미칠지 생각해 보세요.그래서 제가 사용하는 방법은
SQL 서버처럼 관리하지만 관계형 데이터베이스는 그렇지 않습니다.
제가 SQL을 관리하지 않을 거라는 것과 똑같을 거예요.
데이터베이스를 예로 들어보죠.그러니까 뭐가 뭔지 알아두면
기술 스택, 서비스란 무엇인가, 기술은 무엇인가
제가 활용하고 있는 거요?아주 중요하죠.
이 예시 맞죠?그리고 만약 우리가 할 수 있다면
좀 더 깊이 들어가 보면 다음과 같이 빌려줄 수 있습니다.
다시 말씀드릴 수 있는 좀 더 구체적인 예를 하나 더 들어보겠습니다.
예를 들어 모니터링이 어떻게 변화하는지 말이에요, 그렇죠?모니터링이라는 개념 때문이죠.
우리가 항상 알고 있었던 것은 단지 제 환경을 살펴보고 싶고, 어떤 상황인지 이해하고 싶다는 것이었죠.
이를 바탕으로 제 메트릭과 SLO를 파악해서 다음을 할 수 있을 겁니다.
예상과 다른 문제가 발생하면 조치를 취하세요. 하지만 제 SLO 중 하나가 진짜인 것처럼 가정해 봅시다.
제 요청의 잠재성을 측정하는 것과 관련해서요.
그렇죠?세포를 사용하기 전 또는 세포를 사용하기 전에
지금 말씀드린 기법들은 제가 이 방법을 골고루 사용할 수 있을 겁니다.
제 모든 요청, 모든 서버, 모든 인프라에 걸쳐서 말이죠.하지만 이제 우리는 세포에 대해 이야기하고 있습니다.그래서 우리는 여러 가지 사례를 가지고 있습니다.무슨 뜻이냐면, 제가 원한다는 거예요
뭔가 문제가 있는지 이해할 수 있도록
특정 셀, 그리고 모든 셀에서 메트릭을 가져오는 것뿐입니다.
단일 셀에 전체 애플리케이션을 매핑하려고 하는데
그걸로 인한 건강은 좋은 방법이 아닐 수도 있습니다. 맞아요.그래서 우리는 할 수 있어야 합니다
각 세포 수준에서 무슨 일이 벌어지고 있는지 이해하세요.우리는 이해할 수 있어야 합니다.
이게 그 셀에 속한 고객들에게 어떤 영향을 미치는지 말이에요.정말 그렇다는 뜻이죠.
우리가 해야 할 일이 더 있겠죠?그러니까 이건 정말 추가적이에요.
관리 측면에서는 오버헤드가 발생하게 될 것입니다.
세포라는 개념과 다음과 같은 개념이 자연스럽게 생겼습니다.
우리가 얘기하고 있는 이런 기술들이죠.하지만 그렇다면 저는 사실
이에 대해 또 다른 질문이 있는데요, 왜냐하면 우리는 경영에 대해 이야기하고 있었고,
우리가 말하는 세포의 수, 관리 방법에 대해 말씀드린 건데요.
정말 변하죠?그리고 몇 가지 복잡한 점들도
그게 우리가 얻게 될 거예요.하지만 정말 결국에는 더 나아질 수 있을까요?
작은 세포가 필요할까요, 아니면 큰 세포가 필요할까요?뭐가 가장 좋을까요?
생각해 볼 수 있는 접근 방식은 무엇일까요?- 네, 정말 그래요
질문의 핵심입니다.정말 중요한 문제죠, 그렇죠?그러니까 작은 세포들은 분명히
충격 면적을 줄일 수 있죠.세분화할수록 고객 수가 줄어듭니다.
보유하고 있고 영향력도 적습니다.조합에 대해 이야기를 나눴습니다.
예전에도 그랬고 그래서 이런 종류의 것들이 여기에 직접 영향을 미쳤죠.더 작은 사이즈와도 함께 사용할 수 있습니다.
세포는 더 쉽게 검사할 수 있습니다. 양이 조금 더 많죠.
무엇을 하는지 관리할 수 있습니다.이건 정말 절충안이에요.
대화는 확실히 알고 있느냐에 따라 달라집니다.
아키텍처가 무엇인지, 워크로드가 무엇인지,
그 중요성 맞죠?- 네.그러니까 기본적으로 뭐
당신이 말하는건, 바이런, 만약 제가 세포 크기가 작으면 사실 세포 수를 줄이는 거라는 거죠
복부 기능 부전의 폭발 사정거리 맞죠?제 세포가 작기 때문에 세포 수가 더 많아질 거예요.
하지만 각 세포에 연결된 클라이언트는 적어요. - 네. - 하지만 더 큰 세포에 대해 이야기한다면 더 쉬울 수도 있습니다.
관리가 용이하고 따라서 비용도 더 저렴하죠.하지만 문제가 생기면
세포가 더 크고 잠재력이 있다는 이유만으로 그 세포는
더 많은 사용자가 여기에 연결되면 더 많은 사용자에게 영향을 미칠 것입니다.따라서 격리는 그렇지 않습니다.
완전히 똑같아요, 그렇죠?- 네.그러니까, 제 말은, 세포가 작을수록 조작하기 더 쉽다는 거죠?할 일이 더 적죠, 그렇죠?스택은 사실상 더 작아집니다.하지만 이걸 생각해보면
비용 효율성 차원에서 볼 때 세포 수가 적으면 궁극적으로는
ELB나 그 스택에 있는 그 어떤 것이든
처리해야 하고 프로비저닝해야 하는 필요성이 줄어듭니다.따라서 비용이 어느 정도 듭니다.
더 큰 것을 사용함으로써 효율성을 높일 수 있습니다.좀 더 쉬워졌어요
스플릿을 줄여서 통과하지 못하게 한 것 같은데요
그리고 그 특정 고객이 처한 상황이
그렇지 않으면 셀이 꽉 차서 다음과 같은 문제가 발생할 수 있습니다.
사람들을 다른 곳으로 옮겨야 얻을 수 있어요
수용 능력이 있거나 사람들을 퇴거시키고 이동시키는 데 실패했을 때
다른 곳으로 이주하기 위해서요그리고 이건 정말 그럴 수도 있어요
VMware를 기억하고 있다고 생각하시는 분들께는 어려운 일입니다.
감정에 대해, 그리고 언제 겪으며 겪게 되는지에 대해
일을 할 때 그 워크로드를 묵인하고 라이브로 옮기는 것은 매우 어려운 일입니다.
일종의 소프트웨어죠, 그렇죠?기억하세요, 이건 조각이 아니에요
여러분에게 주어진 소프트웨어 맞죠?그러니까 이게 뭔가가 될 거예요
다음에 대해 생각할 때 발전하게 될 거예요
오케스트레이션과 마이그레이션 과정에서 발생하는 이러한 분할을 관리하는 것이죠.
그 세포들 사이에 있는 사람들이죠.그래서 시스템 또한
궁극적으로 오케스트레이션의 관점에서 볼 때 필요한 셀이 적을수록 관리도 조금 더 쉬워집니다.그 얘기 했던 거 기억나?
라우팅 레이어와 그 안에 있는 셀의 양따라서 복잡성도 줄어듭니다.그래서 다른 주제들도 마찬가지겠죠.
여기서 고려해야 할 정말 중요한 부분이죠. 바로 인증이고
권한 부여 문제죠?그럼 제가 어떻게 하는 거죠?오늘은 제가 단일 스택으로 갈 건지 아시죠?
그리고 엔드포인트를 관리하는 것도 조금 더 간단합니다.각 셀마다 고유한 셀이 있나요?
트래픽을 끊는 곳에서의 셀 인증서 맞죠?관리 업무가 좀 더 필요하죠.우리 모두 이런 일을 겪어왔어요
서비스 기간이 만료되는 인증서가 있으면 정말 괴로워요.
그 결과 실패하는 거죠?그건 또 다른 일이죠.팀의 경계는 무엇인가요?
프로세스가 어떻게 돼요, 그렇죠?그렇다면 우리 개발자 팀은 어디에 있을까요?
조직 안에 모여 앉으세요.
세 개의 다른 개발 그룹과 세 개의 개발 그룹에
서로 다른 사업부가 그 세포에 기여하고 있죠?그게 또 다른 문제죠.
그 스택이나 개별 세포를 더 많이 만들 거예요.
복잡한데 이걸 네트워크로 어떻게 연결할까요?VPC가 있나요?여러 곳에 흩어져 있나요?네트워크 아키텍처란 무엇인가요?
그런 것들은요?알다시피, 그게 세포 수준에서 맞춰질 건가요?이거 맞춰질 거예요?
다른 세포들 간에 공유되고 있는 거죠, 그렇죠?우리 AWS 계정도 가지고 있는 것들인데, 그게 가능할까요?
단일 AWS 계정에 속해 있나요?제가 직접 해체할 건가요?그러니까 이 모든 것들이
우리가 이 일을 할 때 고려해야 할 중요한 사항들이 될 거예요그래서. - 네, 그러니까 다음과 같이 생각해요
우리가 여기서 보는 것과 비슷하다는 건, 무슨 일이 생기면
우리가 구현할 수 있는 이러한 중요한 애플리케이션들은
샤딩을 위한 아주 좋은 메커니즘 같은 거죠. 가능하다면
더 자세히 설명하자면 셔플 샤딩에 대해 더 자세히 설명해 보겠습니다.
그런 다음 판매에 대해 이야기하고 있습니다. 라우팅 계층을 추가하고 모든 것을 확인하는 거죠.
정말 탄력적이죠.이 솔루션은 정말 효과가 있는 경향이 있습니다.
전에 봤던 문제를 해결해 보죠?그래도 이건
복잡성이 더해지면서 다음과 같은 문제가 발생합니다.
우리가 목격한 문제를 해결할 때 얻을 수 있는 이점 및
이런 종류의 확장 가능한 기능을 제공하는 데 정말 도움이 되었어요.
애플리케이션도 마찬가지죠?그럼 하나 더 있는 것 같아요
간단히 요약해 볼 수 있을 것 같은데요.
우리가 이야기를 나눈 모든 게 정말 많았다는 걸 알기 때문이죠
오늘 여기서 논의했던 정보들이죠.그럼 한 번 짚어보죠.
그리고 그 개념들이 잘 맞는지 확인하기만 하면 됩니다.
우리 대신 말했죠, 그렇죠?그럼 가장 먼저 할 일은 언제죠?
우리는 세포에 대해 이야기하고 있는 것이고, 지금 이야기하고 있는 것은
논리적 분리, 그렇죠?다시 말씀드리지만, 다시 한 번 말씀드리자면
말씀하신 벌크 헤드 컨셉이죠?이것들을 분리해 보도록 하겠습니다.
세포, 그리고 장애가 생기면 그 실패를 억제할 거예요
그 특정 세포로 가서 우리가 할 수 있는 일은
폭발 폭발을 정말 줄여주죠.그게 정말 도움이 돼요
대부분의 환경이 달라지는지 확인하세요.
우리가 하는 일에 따라서는 여전히 작동할 수 있겠죠?또 다른 건 정말
샤딩과 셔플 샤딩 예제에 대해 이야기하기 시작하면 다음과 같은 내용이 있다는 것을 알 수 있습니다.
데이터 모델링이 매우 절실히 필요한 이유는 기본적으로
세포에 모든 것이 있다는 개념이죠.마치
중앙 인스턴스인 단일 인스턴스입니다.그래서 각 세포는 마치
단일 인스턴스이고 데이터는 공유되지 않을 것입니다.
셀 간에 말이죠, 그렇죠?그래서 우리는 그 방법을 이해해야 합니다.
이 데이터를 제대로 모델링하기 위해서죠.샤딩과 같은 것에 대해 이야기한다면 무엇을 이해해야 할까요?
우리가 샤딩 전략의 기반이 될 거예요, 그렇죠?고객 아이디어와 같은 이야기를 하고 있는 건가요?성 같은 걸 말하는 건가요?그러니까 이게 필요해요
시작하기도 전에 데이터 모델링 작업을 진행해야 합니다.
이러한 패턴을 구현하고 있죠?그리고 제 생각엔
세 번째로 중요한 건, 우리가 알아차릴 수 있을 거라는 거죠.
트래픽을 라우팅하고 그 패턴에 접근하기 위해서는 이걸 만들어야 합니다.
정적으로 안정적인 라우팅 레이어와 이 컴포넌트는
우리 솔루션이 제대로 작동하려면 정말 중요하겠죠?거의 모든 요청이
그걸 관통할 거예요.그래서 매우 중요해집니다.
전체 애플리케이션에 적용되죠?생각해 볼 필요가 있어요
이 컴포넌트를 빌드하지 않으면 만들 수 없습니다.
요청을 라우팅하기 위해서요. - 네, 꼭 필요해요
데이터 모델링에 집중하는 것은 정말 중요합니다.저는 할 수 없어요
그 점을 충분히 강조해 주세요.제 생각엔 그게 바로 그거인 것 같아요
우리는 여기서 큰 도전으로 여기고 있으며, 이를 통해 여러분은
세포에서 아무 것도 공유하지 않을 수 있어야 합니다.그래서
추가로 보면 모니터링이 바뀌는 것 같아요.
일종의 핵심이죠, 그렇죠?그래서 오늘 살펴보죠.
우리는 세포를 바라보는 것이고, 오히려 서비스를 보는 것입니다.
전체 서비스 수준의 SLO와 SLI에서 말이죠.하지만 언제
이걸 세분화하고 있는데, 이제 생각해 볼게요
세포 전체에 걸쳐 이런 작업을 하는 거죠.그러니까 그 차원, 양
우리가 수집하고 모니터링하는 데이터의 양은 엄청나죠.
예전보다 훨씬 더 많죠.그래서 배포에 대해 생각해보면
오늘날 블루그린을 사용하거나 전역에 배포를 하면 결국
더 많은 셀을 배포해야 합니다.그래서 복잡하죠.
오늘날 우리에겐 없는 것들이죠.그냥 한 사람한테 하는 거잖아
단일 스택, 지역 또는 어디에 사용하든 설정할 수 있습니다.그러니까 그 수를 곱한 셈이죠.
아웃은 분명 또 다른 작품이 될 거예요셀 오케스트레이션
구현이 필요합니다.아까도 얘기했잖아요, 그렇죠?엄청나네요.다시 말씀드리지만, 소프트웨어는 아닙니다.
바로 지금 바로 구입할 수 있습니다.확실히 그 중 일부일 겁니다.
복잡하기 때문에 구현이 필요하죠.우리는 이 모든 것에 대해 이야기를 나눴습니다.
이런 것들을 만들기 위해 라우팅 레이어 같은 것들이 필요하죠.그리고 다른 것도 아시죠?
아시다시피, 그게 제게 정말 중요한 교훈이에요.
셔플 샤딩으로 극한의 레질리언스를 구현할 수 있다는 거죠.그러니까 이건 종류와 비슷하죠.
어떻게 하고 싶은지 고민할 때 궁극의 결정이죠.
레질리언스를 위해 이러한 중요한 워크로드를 실제로 구축하기 위해서죠. - 알겠어요?그리고 제 생각엔
마지막으로 중요한 것은 세포를 사용할 수 없다는 것입니다.
영역과 셀은 지역이 아니죠?세포는 다음과 같은 용도로 사용됩니다.
논리적 격리를 제공하지만 항상 생각해야 합니다.
어떻게 하면 우리 자신을 다른 곳으로 확장해야 하는가에 대해
ACS는 물론이고 다른 지역도 마찬가지죠?그래서 둘은 함께 걷지만
둘은 같은 게 아니에요.이해하는 것이 매우 중요해요.
세포의 개념은 정말 논리적인 분리라는 거죠.
물리적인 고립은 아니죠?그래서 이것은 매우 중요한 개념입니다.또 다른 한가지는
오늘 그 얘기 많이 해요, 그렇죠?세포는 꼭 그런 것은 아닙니다.
스케일링 메커니즘.이점 중 하나는
셀 기반 아키텍처를 구현함으로써 얻을 수 있는 것은
애플리케이션을 다음과 같이 확장하는 것이 더 쉽다는 것입니다.
여전히 더 많은 사용자 또는 더 많은 클라이언트를 확보하고 있습니다.바로
규모 축소의 문제죠.그래서 정말 더 많이 만드는 것 같아요
세포, 여기에 새 사용자를 매핑하는 것뿐이죠.하지만 개인적으로 말씀드리고 싶은 건
정말로 애플리케이션을 확장하는 것만이 필요하다면
매우 중요한 애플리케이션이 아니거나
추가되는 복잡성을 기꺼이 감당하지 않으려 합니다.
확장에 도움이 되는 다른 메커니즘도 있습니다.그렇죠?그래서 제 생각엔 그 메시지가
정말로 확장만 필요하다면, 그리고 이것이 유일한 문제인 경우, 한 번 시도해 봅시다.
그렇지 않은 다른 더 나은 메커니즘이 있는지 이해하세요
영업으로 인한 복잡성 증대를 가져오세요.
여러분의 환경이죠?- 정말 그럴 거예요
적용 분야와 중요도에 따라 달라지죠.네. - 네, 맞아요.그러지 말자고 말하고 싶은데요
이건 정말 중요하지 않은 애플리케이션에 적용되죠?그만한 가치가 없을 수도 있기 때문이죠, 그렇죠?- 그리고 정말 도움이 되죠
그 자체로는 소프트 스테이트 어플리케이션에 그 자체보다 더 많이 쓰입니다.
DNS와 같은 하드 스테이트 애플리케이션에 말이죠, 그렇죠?소프트 스테이트 애플리케이션, 트랜잭션이 있는 하드 스테이트,
꼭 최적의 사용 사례는 아닐 수도 있습니다.
왜냐하면 여러분이 원한다면 많은 복잡성을 야기하기 때문이죠.
그 중요성의 원인을 설명하기 위해,
그것도 괜찮아요. - 네.그리고 지금 얘기하고 있는 것처럼
스테이트와 소프트 스테이트나 하드 스테이트에 대해 말하자면, 아주
세포의 경우 데이터가 있어야 한다는 것을 배우는 것이 중요합니다.
세포 간에 공유되는 건 아니죠?그래서 소유한 모든 것이
셀 안에 있는 사용자나 클라이언트는 그 셀에 있어야 합니다.그냥 공유만 하면 안 돼요
여러 셀에 있는 데이터. - 따라서 Dynamo를 다음과 같이 사용하지 마세요.
모든 세포에 대한 예시죠. - 네, 제 생각엔
만약 여러분들이 서로 다른 세포들을 가지고 있다면 정말 좋은 아이디어일 거예요.
그들은 Dynamo DB를 사용하고 있습니다. 여러분은 Dynamo DB를 만들고 싶을 것입니다.
셀당 다이나모 DB 테이블 맞죠?확실하게 알고 싶으시다면
이런 종류의 격리를 매번 구현하는 것과 같습니다.
여러분의 애플리케이션에 있는 하나의 유사 의존성, 맞죠?그리고 이것도 하나일 거예요.
생각해보는 방법. - 궁극적으로는 아무 것도 공유하지 않겠다는 건데, 어떤 진언이 맞죠?- 맞아요.그거 맞아요
맞아요.아무것도 공유하고 싶지 않아요.그리고 드디어 제 생각엔
세포가 가지고 있다는 것을 이해하는 것이 매우 중요하다는 걸 이해하는게 정말 중요하죠.
상호 의존적인 논리는 없습니다.다시 말씀드리지만, 우리는 많은 이야기를 나눴습니다.
애플리케이션에 필요한 모든 것을 보관하는 것에 대해
세포 안에서 일해야 합니다.그러니까 우리가 말하는 게 아니에요. 알겠어요, 저한테 세포가 두 개 있고 그
두 세포는 서로 종속되어 있습니다.이런 경우에는 진짜가 아닐 수도 있습니다.
셀 기반 아키텍처는 우리에게 도움이 되지 않을 수도 있기 때문입니다.
모든 고립감 같은 건 우리가 좋아하는 데 별로 도움이 되지 않을 수도 있어요
지금 일어나고 있는 문제들처럼 그 영향을 줄이세요, 그렇죠?그래서 기본적으로 이 예제에서 말씀드렸듯이 B 세포의 기능이 떨어지면 세포 1에도 영향을 미치겠죠?그럼 E 세포 맞죠?그러니까 이건 우리가 원하는 게 아니잖아요, 그렇죠?그러니까 거의 다 된 것 같아요. - 네.그리고 잠깐 질문 하나 할게요.
저희가 이 일을 하고 있었는데, 처음에 여기서 몇 명의 개발자들이 하는지 묻는 걸 잊어버렸어요.
관객 중에 있나요?그냥 손 들기 위해서요좋아요, 좋아요.나머지는 해결책인 것 같아요
건축가 아니면 건축가?좋아요, 좋아요.여기 잘 어울려요.그냥 갖고 싶었어요.
그것에 대한 아이디어를 얻고 싶었죠.글쎄요, 그게 전부라고 생각해요
그거에 대해 말해야 할 것 같은데오늘 시간 내주셔서 감사합니다.모두와 이야기 나눠서 정말 좋았어요.다시 말씀드리지만, 그 사람들 중 몇몇은
여기 있는 사람들 중에 셀룰러 배포를 하고 있는 사람들이 있습니다.
아니면 셀 기반 아키텍처 배포에 참여하실 수도 있습니다.
지금 말씀드린 것처럼 내년에 무대에 설 예정입니다.
이거요.그럼 정말 좋을 것 같아요.하지만 시간을 내주셔서 감사합니다. - [브루노] 모두 고마워요.