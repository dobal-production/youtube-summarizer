- 보여줘서 고마워요
오늘 이 세션에 참석해 주세요.여러분의 re:Invent가 잘 진행되길 바랍니다.SaaS에 대해 조금 더 자세히 알아볼 준비가 되셨기를 진심으로 바랍니다.
그리고 오늘날에는 멀티테넌시도 있습니다.슬라이드에서 알 수 있듯이 제 이름은 토드 골딩입니다.저는 AWS에서 솔루션스 아키텍트로 일하고 있는데, 지금까지 일을 해왔던 것 같아요.
지난 8년 동안 여러 회사의 다양한 SaaS 제공업체와 함께 일해왔습니다.
서로 다른 영역에서 회사 전체를 넘나들 수 있도록 도와주죠.
다양한 문제들이 있죠.또한 우리가 방금 개발한 SaaS 팩토리 팀의 일원이기도 합니다.
AWS에서 SaaS를 구축하고 제공하는 것이 무엇을 의미하는지에 대한 수많은 참조 콘텐츠 및 지침.그리고 분명히, 우리가 들인 노력의 큰 부분이 바로 그것입니다.
지난 몇 년은 그저 무언가를 만드는 방법을 보여주기 위해 집중해 왔습니다.구체적인 예를 들어주세요.피드백은 항상 그랬어요.
우리는 많은 사람들로부터 받았어요.뭐, 좋아, 이런 얘기 해준 거 같았어
원칙, 하지만 어떻게 하는지 보여주세요.그래서 우리는 몇 년 전에 떠났고 실제로 우리의 삶을 시작했습니다.
EKS SaaS 솔루션을 구축하는 방법에 대해 많은 이야기를 나눴습니다.구축 방법을 보여주세요
서버리스 SaaS 솔루션.코드 주세요, 주세요.
토큰 자판기.이런 것들은 정말 멋졌고 지금도 대단합니다.
특정 엔드-투-엔드 측면에서 볼 때 정말 좋은 출발을 할 수 있게 해줬습니다.
SaaS 구축 방법의 예.하지만 우리가 자리에 앉았을 때
올해 re:Invent를 위해 저희는 어떤 주제가 있는지 물었습니다.
가치가 있을까요?우리가 말했죠. 음, 기본 사항만 익히는 것 말고는 무슨 일이 벌어질까요?
솔루션이 제대로 작동하도록 하는 것은요?기술에 구애받지 않고 정말 훌륭하고 확장 가능한 멀티테넌트 SaaS 솔루션을 구축한다는 것은 무엇을 의미할까요?
이를 기반으로 구축하고 계신가요?좋은 빌드 방법은 무엇인가요?
복원력이 뛰어난 SaaS 환경?이것이 바로 이 일에 대한 동기이자 정신이었습니다.
대화란, 구체적으로 한 가지 해결책을 제시하는 대신, 멘탈 모델을 제시해 주세요.
기본적인 움직임을 위한 프레임워크를 제시해 주세요.
AWS를 기반으로 훌륭하고 확장 가능하며 효율적인 SaaS 솔루션을 구축하는 것이 의미하는 바입니다.자, 이건 매우 광범위한 주제라고 생각해요.어떤 것들에 대한 모든 뉘앙스를 다 다루지는 못할 것 같아요.
이걸 이뤄낸다는 뜻이에요.하지만 제가 오늘 강연을 위해 노력한 것은 놀림입니다.
이런 느낌을 주기 위해 이 글의 움직이는 부분들을 정리해 보겠습니다. 몇 가지 중요한 것들을 보여드릴게요.
만약 제가 지금 고객과 함께 앉아서 이야기를 나눠보면
규모와 복원력, 이런 것들이 바로 제가 가진 것들입니다.
그걸 쫓으라고 말하고 싶어요.그리고 또 말씀드리고 싶은게, 네, 이 글의 앞면은
규모와 탄력성에 대해서요.제가 보기에 뒷부분 1/3은
이 강연은 우리가 실제로 어떻게 증명할 수 있는가에 관한 것입니다.
이런 것들이 효과가 있어요. 그게 바로 우리가 가진 영역이죠.
가장 적게 얘기한 건데, 제가 실제로 어떻게 해야 하는건지
카오스 메커니즘을 만들어볼까요?규모가 제대로 작동하고 있는지, 탄력성이 제대로 작동하고 있는지 알려주는 검증 메커니즘을 구축하려면 어떻게 해야 할까요?자, 이것은 300 레벨의 세션입니다.딥 다이브라고 쓰여 있는데 딥 다이브가 무엇인지에 대한 기대치를 설정해 보도록 하겠습니다.이제 본격적으로 시작해볼게요
아키텍처.물론이죠.여기 건축물 전체에 있을 거예요. 하지만 보여드리지는 않을게요
코드 한 덩어리야.이 문제의 근본적인 부분을 전부 보여드리지는 않을게요.이것은 건축 패턴, 건축 전략에 관한 더 많은 내용입니다.그래서 여기 오셨으면 좋겠어요.그게 뭐랑 일치했으면 좋겠어요
초록을 읽으셨군요.그렇다면 앞으로 나아갑시다.글쎄요, 여기서부터 시작하고 싶어요
여기의 바깥쪽 수준에서 말하자면, 제가 건축가를 짓고 글을 쓰려고 한다면
SaaS 애플리케이션의 경우, 알고 보니
규모와 가용성, 복원력에 대해 이야기할 때 정말 많은 것들이 있습니다.
좋은 점들이 많이 있습니다.사실, 제가 말씀드릴 수 있는 것은
이 강연을 보완해 드리자면, 여러분은 반드시
아직 확인하지 않았다면 지침을 살펴보세요.
잘 설계된 AWS를 확인해 보세요. 복원력, 확장성, 가용성에 있어 정말 훌륭한 지침입니다.
이러한 작업을 수행하는 방법에 대해그리고 그 모든 것들은 여전히 남아있습니다.
SaaS 환경에서는 유효합니다.하지만 제가 찾은 것은 SaaS입니다.
건축가에게는 또 다른 고려 사항이 있습니다.
그들은 생각해 보아야 합니다.멀티 테넌시는 이 모든 것을 더해줍니다.
달성이라는 것이 무엇을 의미하는지에 대한 이러한 미묘한 차이도 있습니다.
규모와 탄력성.그리고 이런 것들은
여기서 중요한 것은, 네, 가용성이 있다는 것입니다.
누구나 가용성을 원하지만 시스템이 중단되는 것을 절대 원하지 않습니다.하지만 멀티 테넌트 환경에서 우리가 말하는 것이 무엇을 의미하는지 상상해 보십시오.
가용성을 목표로 하고 있습니다.그리고 설계자는 가용성이 높은 시스템을 구축해야 합니다.음, 기존 시스템에서는
만약 현장에 없었다면 다음 중 하나를 의미할 수도 있습니다.
고객 두 명이 줄어들었어요. 어떤 특정한 측면이 있기 때문이죠.
시스템의 작동이 중단되었습니다.멀티테넌트 SaaS 환경에서는 다음과 같은 잠재력이 있습니다.
전체 비즈니스를 무너뜨리고 모든 고객을 무너뜨립니다.
우리 시스템이 고장나면그래서 제 생각에는 가용성에 대한 기준이 훨씬 더 높습니다.
멀티테넌트 SaaS 환경.실제로 대규모 멀티테넌트 SaaS 회사가
정전이 발생하면 뉴스가 됩니다.왜냐하면 다른 사업이거든요.
그들의 솔루션이나 다른 차원을 사용할 수 없다니 정말 광범위할 거예요.
다른 사람들이 관심을 갖고 있는 것들이죠.여기서 또 다른 건
SaaS 아키텍트로서 우리는 다음과 같은 요청을 받고 있습니다.
비용 효율성을 달성하세요.저는 비용에 대해 전적으로 이야기합니다.
최적화는 월요일입니다.사실, 약간은 있을 겁니다.
여기 약간 겹치는 부분이 있어요. 규모와 탄력성 때문이죠.
이 모든 것들이 이 개념들과 교차하는 모습을 보여드릴게요.하지만 우리는 SaaS에서 규모의 경제를 달성하라는 요청을 받고 있습니다.사람들이 SaaS를 선택하는 전체 이유는 실제로 좋은 결과를 얻기 위해서입니다.
이를 통해 얻을 수 있는 마진.따라서 비즈니스가 성장함에 따라
우리는 더 많은 수익을 창출합니다.어떻게 하면 어떻게든 해낼 수 있을까요?
인프라에 지출하는 비용을 최소화할 수 있는 이 모든 멋진 방법들은 여전히 과잉 프로비저닝하고 안전성을 보장하기 위해 우리가 하는 다른 모든 일들을 하고 싶어하죠.
가용성 등등.또 다른 과제는
이것이 바로 예측 가능성입니다.소프트웨어는 본질적으로 예측이 불가능하지만 새로운 테넌트가 있는 멀티 테넌트 환경을 상상해 보십시오.
테넌트가 항상 나타나면 잠재적으로 퇴사하는 테넌트가 있고 해당 테넌트의 워크로드는 다양합니다.
하루 종일, 한 달 내내 격렬하게 말이죠.자, 이제 여러분은
즉, 저는 가용성을 원하고, 효율성을 원하고,
이 모든 것 말고도그런데, 당신은
이 모든 것을 달성해야 하고, 세입자의 프로필과 그들이 소비하는 방식을 여전히 수용할 수 있는 환경을 설계해야 합니다.
시스템은 시시각각 변하고 있습니다.또 다른 한 가지는 우리가 결국 한 가지 종류의 것으로 끝나는 경향이 없다는 것입니다.
건축적 발자취.만약 우리가 달성해야 하는 것이라면
규모와 복원력, 그리고 이 모든 것이 하나로
아키텍처를 잘 이해하면 좀 더 쉽게 할 수 있습니다. 하지만 현실은
좀 더 자세히 살펴보죠. SaaS 환경은 실제로 다음과 같은 다양한 기능을 지원해야 합니다.
배포 모델도 가끔 있습니다.일부 테넌트는 에 배포됩니다.사일로화된 배포에 대해 알아보고 풀 배포, 솔루션의 공간, 아키텍처 변경에 대해 알아보겠습니다.이제 무엇을 해야 할까요?
확장성, 탄력성 등을 달성한다는 뜻입니다.
그런 경험을 통해서요?그리고 마지막으로
그런데 기업이 우리에게 와서 말하죠. 그건 그렇고, 우리가 할 수 있으면 좋겠다고 말이죠.
여러 부문에 판매하세요.우리는 작은 회사에도 팔고 싶고, 대기업에도 팔고 싶어요.참고로 저희는 다른 제품을 제공하고 싶습니다.
계층화된 경험.그래서 넣고 싶을지도 몰라요
경험을 제한하거나 해당 고객의 경험을 교환하고 싶을 수도 있습니다.참고로 저는 여러분의 아키텍처를 통해 이 모든 것을 실현할 수 있어야 합니다.그래서 저한테는 이런 느낌이 들어요.
가끔은 이렇게 큰 줄다리기가 벌어지기도 하죠.방정식의 한 쪽에서 보면, 회사는 제게 이렇게 말하고 있습니다. 우리는 이 모든 것을 현실에 담았으면 좋겠다고 말이죠.
왼쪽, 여기가 보이실 겁니다.우리는 이 모든 효율성, 충분한 인프라를 원합니다.
우리가 하고 있는 일을 위해, 비용 효율성을 극대화하고, 모든 인프라를 공유합니다.
여러분도 할 수 있을 거예요. 그래야 저희가 좋은 결과를 얻을 수 있거든요.
규모의 경제.왜냐하면 우리는 가능한 한 큰 마진을 원하기 때문이죠.하지만 다른 한편으로는
그나저나 다른 건 다 가지고 있다고 하던데
우리가 지원하고 싶은 변이요. 왜냐하면 우리가 할 수 있기를 원하기 때문이죠.
여러 시장에 진출하세요.우리는 계층화를 제공할 수 있기를 원합니다.여러 개를 지원하고 싶습니다.
배포 모델.그리고 이런 것들은 그렇지 않습니다.
서로 완전히 충돌할 수밖에 없죠. 하지만 서로 나란히 서서 지지하는 건 분명 어렵습니다.그래서 이런 느낌이 들어요.
여러분 모두가 시도하면서 겪는 어려움 중 하나는
이러한 시스템을 구축하기 위해서요.그리고 조립하는 재미도 있어요.
솔직히 이런 시스템들도 마찬가지예요. 접근법을 생각해내려면 꽤 창의적이어야 하니까요.
여기서는 효과가 있을 거예요.정말, 멋지네요.여기서 규모에 대해 얘기해 보죠.실제로 확장 가능한 시스템을 구축한다는 것은 무엇을 의미할까요?
멀티테넌트 환경?고려해야 할 고유한 멀티테넌트 사항은 무엇입니까?그리고 제 생각엔 만약 우리가
이에 대해 말씀드리자면, 확장이 무엇을 의미하는지에 대한 시야를 넓혀야 합니다.그리고 이건 아마도 제가 이해한 것일 수도 있습니다.
비누상자에 살짝 올려보죠. 왜냐하면 이곳은 사람들이 저울을 놓는 곳인 것 같거든요.
작은 상자 안에.일반적으로 사람들은 그렇게 생각하는 것 같아요. 특히 인프라는
사람과 건축가 여러분, 규모에 대한 관점은 보통 수직으로 확장하거나 수평적으로 확장하는 방법입니다.그래서 제가 던질 때
이 작업에는 많은 워크로드가 필요한데, 저는 규모를 확장하고 클라우드의 탄력성을 사용하고 거기에 있는 모든 훌륭한 구조물을 사용하여 부하를 감당할 것입니다.
필요한 만큼 성장하세요.조금은 더 낮을 수도 있겠지만 그래도 괜찮은 규모를 유지할 수 있을 거예요.100% 맞아요.그리고 조립하기에 좋은 방법이기도 하죠.
확장 가능한 SaaS 솔루션.그것만으로는 충분하지 않다고 생각해요.꼭 해야 할 것 같아요.
그 정의에 추가해 보세요.네, 인프라의 규모가 제 경험의 일부가 되었으면 합니다. 하지만 SaaS 세계에 살고 있다면 좋든 싫든 SaaS 아키텍트로서 비즈니스를 하고 있는 셈입니다.
이제 조금 더 해볼게요.SaaS가 어땠는지 생각해 보셔야 합니다.
비즈니스가 확장될 것입니다.즉, 규모에 대한 정의는 다음보다 커야 한다는 뜻입니다.
인프라 뿐이죠.온보딩에 대해 생각해 보세요.신규 테넌트를 온보딩한다는 것은 무엇을 의미할까요?
환경에 적응하고 계신가요?실제로 많은 조직들이 투자할 것입니다.
온보딩은 나중으로 미뤄두세요.그들은 자신의 모든 것에 집중할 거예요
응용 프로그램을 확장한 다음 결국에는 “그래, 가서 작성해 봐야지”라고 말하세요.
온보딩 자동화.온보딩은 이를 확장해야 합니다.내일 말씀드리면 100명의 신규 테넌트나 천 명의 신규 테넌트를 줄 수 있을 거예요. 그럼 제가 물어보겠는데
온보딩 프로세스를 그러한 요구에 맞게 확장할 수는 없습니다. 많은 회사들이 생각조차 하지 않았죠.
솔루션의 확장 여부.B2C 회사들이 그러하듯이, 오직 생존할 수밖에 없으니까요
대규모로 확장할 수 있기 때문이죠.하지만 한 달에 10명 정도의 테넌트만 확보하는 B2B 조직은 그렇지 않다고 생각할 수도 있습니다.
여기에 집중해야 합니다.여러분께 추천하고 싶은게
이 경험의 일부로 온보딩을 포함시켜야 합니다.죄송합니다. 진행했습니다.그럴 의도는 없었어요.돌아가자.제 생각엔 작전도 그 일부인 것 같아요
이 이야기의 내용도 마찬가지죠.운영 규모를 확장해야 하는 경우, 건축가로서
팀에 멀티 테넌트를 운영하는 데 필요한 도구, 메커니즘 및 구조를 제공하기 위해
규모 확대를 위한 환경.여부조차 모를 수도 있습니다.
아키텍처의 상태를 확인할 수 있는 데이터와 지표, 운영상의 인사이트가 없다면 효과적으로 규모를 확장하고 있는 것입니다.
실제로 행동하는 거죠.그리고 마지막으로, 이루고 싶지만, 앞으로 나아가고 싶어요. 어떤 이유에서든, 그러지 말아야 하겠지만
한 번 더 해볼까요.배포도 그 일부입니다.기능을 얼마나 빨리 출시할 수 있을까요?기능 플래그를 어떻게 지원할 수 있을까요?어떻게 하면 이 모든 것을 지원할 수 있을까요?
이러한 모든 SaaS 환경의 고유한 배포 공간을 활용하면서도 여전히 효율적으로 수행할 수 있을까요?그렇다면 아마도 그럴 수도 있을 것 같습니다.
상자 안에 더 많은 항목을 넣으세요. 하지만 제 요점은 애플리케이션의 핵심 인프라를 넘어서서 생각해 보라는 것입니다.
규모에 대해 생각해 보셨을 텐데요.비즈니스에서 다음과 같이 확장해야 하는 모든 것을 생각해 보세요.
신규 고객을 추가하죠.좋아요, 그럼 제가 잘 말했더니, 뭐가 가장 중요하죠?
어떤 내용인지 말하고자 하는 슬라이드 하나를 만들 수 있다면 슬라이드 하나를 만들겠습니다.
제가 생각할 때 제 머릿속에 떠오르는 것들은
스케일링 전략을 세우고 계신가요?여기 보이는 것들이 섞여 있어요.자, 왼쪽에서 보시면
알다시피 저한테는 업무량이 많아요.우리는 다양한 종류의 워크로드를 지원해야 합니다.
프로필, 다양한 테넌트가 잠재적으로 포화상태에 빠질 수 있습니다.
시스템의 다양한 부분을 소비하는 다양한 방식의 시스템
시스템은 항상 다른 방식으로, 다른 패턴으로 운영되고 있습니다.그러니까, 무슨 일이 있어도 상관없어요
제가 규모를 위해 무엇을 하고 있는지 알아내야 해요.그거에 대해 생각해 봐야겠어요. 그게 제 계획의 일부가 될 거예요.그리고 오른편으로는
보시면 아시겠지만, 제가 할 수 있는 방법에 관한 옵션도 여기 있습니다.
이러한 워크로드를 해결하세요.여기에는 상당히 긴 옵션 목록이 있습니다.확실히 제가 선택한 컴퓨팅 스택은 시스템 확장 방식과 많은 관련이 있습니다.EC2를 할게요.저는
서버리스를 할 건가요?자세한 내용을 알아보도록 하겠습니다.
컨테이너를 만들게요.그리고 그 특별한 것들은 어떻게 가능할까요?
컴퓨팅 기술은 모든 기술과 잘 어울립니다.
이러한 다양한 워크로드 및 기타 모든 요구 사항우리가 선택한 스토리지는
우리가 선택한 스토리지 스택.RDS를 할 건가요?다이나모, 관리할 건가, 관리가 아니라 할 건가?온갖 종류가 다 있는 것처럼
여기에 있는 편차는, 상황에 따라 다릅니다.
이러한 워크로드의 특성은 비즈니스 목표에 따라 다르므로 다음을 선택해야 합니다.
다른 전략.여기서도 도메인, 산업, 환경에서 흔히 볼 수 있는 기타 요구 사항, 규정 준수 등의 요건들이 접근 방식에 영향을 미칠 것입니다.그런 다음, 이 모든 것을 겹쳐 놓는 것이 핵심입니다.
여기 보시는 것처럼 가운데가 보이는데요.그러면 다음과 같이 보일 것입니다.
전략과 같은 계층화.고립된 모습을 보게 될 겁니다.규모에 대해 생각할 때 고립을 생각하지 않으실 겁니다. 하지만 고립은 사실
규모와 많은 관련이 있습니다. 왜냐하면 규모에 따라 달라지기 때문이죠.
리소스를 배포합니다. 선택한 아키텍처에 따라 일부 항목이 확장될 수 있습니다.
다른 것들과는 다릅니다.좋은 타협안도 있고요.
고립된 상태에서는 그렇지 않은 경우도 있습니다.여기 있는 시끄러운 이웃도 마찬가지야.어떤 전략이 시끄러운가요?다음 중 어떤 것이 있을까요?
시끄러운 이웃에게 좋은가요?부하가 정말 심할 경우 어떤 컴퓨팅 스택이 적합할까요?그래서 제가 보기에 이것은 마치 다음과 같습니다.
저는 이 과정의 초기 단계인데 당신이 말했죠.
토드, 어떻게 할 건데?어디서부터 시작하실 거예요?알아보도록 노력할게요
사업과 저 스스로가 이런 것들에 대해 충분히 생각하면 제가 선택할 수 있는 옵션이 어떤 상황이고 어떤 선택을 할 수 있는지 알 수 있습니다.다 이해해 주실래요?
첫 날 맞죠?절대 제대로 할 수 없을거야.하지만 이런 일을 전혀 하지 않고 그냥 스택을 가져가세요. 마음에 드는 데이터베이스이기 때문에 그냥 데이터베이스를 잡으러 간다면, 여전히 끝나지 않을 수도 있습니다.
아주 좋은 선택을 했으니까요.적어도 여긴 조금 있어요.
프로세스 중에 약간의 데이터가 있습니다.이제 규모라고 하면 규모에 대한 가장 간단한 관점은 무엇일까요?이제 이걸 할 수 있을 것 같아요.
슬라이드.모두 집에 갈 수 있어요.이게 뭘 가장 쉽고 간단하게 볼 수 있는 건지
SaaS에서는 대규모 테넌트를 공유 환경에 배치하는 것처럼 보일 수 있습니다.공유 풀이란
인프라는 공유됩니다.이 용어는 여기서 공유 인프라를 설명할 때 사용하는 용어입니다.그리고 모든 테넌트를 위해 모든 것이 통합됩니다.스토리지는 공유되고, 컴퓨팅은 공유되며, 이 모든 테넌트는 그저
이런 환경에 집어넣으면 수평적으로 확장되기만 합니다.
고객의 요구 사항을 충족하기 위해서요.우리는 이걸 하나로 볼 뿐입니다.
대규모 공동 작업량.아마 저희가 약간 오버프로비저닝을 했을 수도 있습니다.여기선 어떤 경험을 하든 모두에게 충분히 좋을 거라고 생각해요.하지만 상상이 가실 겁니다.
이런 환경에서는 정책 및 메커니즘 확장이 어려울 것입니다. 마이크로서비스의 특성과 확장 방식에 따라 달라지기 때문입니다.여기에는 규모 조정 정책을 적용하기 위한 약간의 노력이 필요했는데, 대부분의 사람들은 그렇게 하지 않을 것입니다.
오버프로비저닝으로 극복하세요.하지만 필요한 것이 이것뿐이고 여러분이 생각하는 것이 이뿐이라면
SaaS 환경은 어떤 모습일까요? 사용 가능한 기본 확장 도구를 모두 사용하기만 하면 됩니다.풀링된 리소스의 장점을 활용하면 작업이 완료됩니다.하지만 현실은 제가 작업하는 대부분의 환경이 그렇게 보이지 않는다는 것입니다.몇 가지 문제가 있습니다.
환경은 그렇게 보이지만 일반적으로는 그렇지 않습니다.
모두 저렇게 빠지죠.사실, SaaS 회사가 운영하는 환경의 환경은 지금과는 많이 다릅니다.
많은 사람들이 생각합니다.여러 가지 패턴이 섞여 있습니다.자, 이제 제가 모여 있는 환경을 볼 수 있을 겁니다.
저희가 보여드린 것처럼 말이죠.주문과 제품이 들어 있습니다.
이 두 마이크로서비스가 있습니다.하나는 람다에서 실행되고 있지만
워크로드의 특성 때문에 특정한 이유로 컨테이너에서 실행되고 있습니다.그리고 이런 것들이 있어요.
사일로화된 마이크로서비스.사일로화, 즉 전용이라는 의미
개별 테넌트에게.그리고 여기서 말씀드렸듯이, SLA에 기반하거나 규정 준수에 기반한 분석 서비스라고 말씀드렸습니다.
솔루션에 대한 또 다른 요구 사항은 별도의 독립형 마이크로서비스로 세분화해야 했습니다.그리고 풀스택 사일로라고 부르는 고객들도 많이 있습니다.고객들은 사일로를 통째로 가지고 있습니다.그건 그렇고, 지금은 이 모든 세입자들과 모든 서비스들이
정확히 동일한 버전의 소프트웨어를 실행하고 있습니다.모두 다음을 통해 관리됩니다.
같은 경험이죠.그러니까, 우리 같지 않아요
여기에는 일회성 버전이나 다른 버전이 있지만 실행 중입니다.
여기엔 다양한 인프라가 서로 다른 패턴으로 배포됐어요.그리고 누군가 기꺼이 한다면
충분히 큰 수표를 작성해 주세요. 많은 회사들이 여러분의 시스템을 구매하지 않겠다거나, 풀스택 사일로를 원한다거나, 어떤 사람들은 단지 프리미엄 경험을 하길 원한다고 말하더군요. 그들은 그것을 옵션으로 제공합니다.자, 이제 제게 있어, 이것이 풋프린트일 때 확장한다는 것은 무엇을 의미할까요?왜냐면 이 모든 게
당신의 전체 환경.그러니 꼭 오셔야 돼요
지원이 필요할 때 확장할 수 있는 방법을 생각해 내세요.
이 모든 전략들.자, 이제 개념은
스케일은 훨씬 더 어려워집니다.풀스택 사일로에서의 확장이란 무엇일까요?보기와는 많이 달라 보입니다.
풀링된 환경에서의 스케일링자, 말씀드렸다면 이제 조금 더 자세히 설명해 보죠.
이에 대한 공식은 페르소나부터 시작해보라고 하겠습니다.제가 나가서 할 일은 실제로 프로필을 만들어 보는 거예요.저는 사실 뭐가 뭔지 스스로에게 물어보곤 했어요.
소비 프로필?격리 프로필이란 무엇입니까?계층화 프로필이란 무엇입니까?
제 환경에서는 페르소나와 이들이 이러한 리소스를 소비하는 다양한 방식, 다양한 방식을 종합적으로 살펴보겠습니다.
그들은 고립되고 싶어하죠.그런 다음, 이것들을 다른 옵션과 나란히 놓으세요.
준비해 두었습니다.예를 들어, 저는 어때요?
다양한 마이크로서비스를 통해 이러한 요구를 충족할 수 있을 것입니다.
분해 전략?올바른 분류는 무엇인가요?
제 마이크로서비스에 대해서요?마이크로서비스의 적절한 조합은 무엇일까요?어떤 것을 사일로화해야 할까요?다음 요구 사항을 충족하기 위해 어떤 솔루션을 통합해야 할까요?
이러한 특정 워크로드?그러니까, 제가 임의적으로만 그런 게 아니에요.
도메인 객체를 가져오거나, 이벤트 스토밍을 하거나, 이런 것들 중 하나를 사용해서 명사를 생각해내고
제 마이크로서비스가 있어요.아니요, 저는 실제를 기반으로 이러한 마이크로서비스를 선택하고 있습니다.
여기서 볼 수 있는 프로필입니다.그런데 가끔은
결국 다음과 매핑되지 않은 마이크로서비스를 사용하게 됩니다.
도메인의 모든 것그냥 이게 제일 큰 문제야
시스템의 병목 현상.이걸 조금 더 다듬었죠.
기능의 일부분이죠. 실행하는 게 합리적이었으니까요.
독립형 마이크로서비스로 말이죠.다른 것들은 예상보다 훨씬 더 조잡할 수 있습니다.그런 다음 다시 컴퓨팅 기술로 돌아가 보겠습니다.어떻게 할 건데?서버리스 람다
컨테이너, 어떤 것이 적합할까요?그렇다면 어떤 배포 모델을 지원해야 할까요?그리고 유니온이 생기면
이 모든 것들 중에서 저는 좋은 감이 있는 것 같아요.
내가 어디로 갈지그리고 컴퓨팅에 대해서는 생각하지 마세요
여기서는 상호 배타적입니다.확실히 알겠어요, 우리처럼, 우리가 통제할 수 있는 건 아니에요
여기 플레인이랑 앱 플레인이 있네요. 하지만 패턴을 보면
컨트롤 플레인과 앱 플레인이 일부라고 할 수 있습니다.
SaaS 환경의 일부입니다.몇몇 사람들이 사용하는 것을 보게 될 것입니다.
컨트롤 플레인에는 서버리스를 사용하고, 앱 플레인에는 컨테이너를 사용합니다.또는 일부인 경우에도 마찬가지입니다.
마이크로서비스 (배치 워크로드) vs. 컨테이너용 워크로드 제외 (Lambda)어떤 용도로든 선택할 수 있습니다.
여러 가지 이유가 있습니다.오른쪽 아래에 있는 것은 배포 모델을 간과하지 마세요. 지금 제품 팀에 물어보세요.
예를 들어, 우리는 누구에게 판매하고 있나요?사람들이 같이 올 거예요?
풀스택 사일로가 필요하세요?이제 알고 싶어요. 그래서
그걸 중심으로 규모를 키우고 생각해낼 수 있겠죠.
이를 위한 규모 조정 전략.이걸 집어삼키기 위해서요
분해에 대해 말씀드리자면, 제가 이런 서비스 순서를 가지고 있는데 그냥 무리일 뿐이라고 해봅시다.
람다 연산에 대해서요.각 함수는 이에 해당합니다.
일부 작업에 적용됩니다.제 환경에서는 명사로서
이걸 그냥 다음과 같이 만드는 게 완전히 이해가 됐어요.
마이크로서비스와 저는 모두 끝났어요.하지만 이러한 프로필이 소비 및 격리 요구 사항을 어떻게 나타내는지에 대한 더 많은 데이터를 얻은 후 네 가지를 모두 생각해 냈습니다.
이러한 분해를 나타내는 별도의 마이크로서비스였죠.이건 너무 단순화된 예시인데요, 상상해 보세요
예를 들어, 주문 처리와 같은 것은 거대한 스케일링이었습니다.
시스템 또는 주문 처리의 특정 지점이 있었습니다.
격리 필요성 등에 따라 규모를 늘리기 위해 다르게 분해할 수 있습니다.
워크로드의 특성.우리가 가지고 있는 또 다른 것은
여기서 살펴보자면, 저는 컴퓨팅에 대해 이야기한 것입니다.컴퓨팅 선택에 대해 좀 더 자세히 알아보려고 합니다.여기서 쉬운 것은 제가 해본 것입니다.
주문 마이크로서비스가 있는데 주문 서비스에는
여기에는 GetOrder, UpdateOrder라는 두 가지 작업이 있습니다.그리고 배포 단위도
마이크로서비스입니다.그리고 EC2에서는 그게 전부입니다.
AWS는 오랫동안 해왔습니다.이건 그냥 탄력성 있는 척도일 뿐이고 수평적으로 확장할 수 있어서 정말 가능하죠.
이런 환경에서 실행해 보세요.대규모 구축을 위해 이 모든 멀티테넌트를 다루고 있다면 말씀드리겠습니다.
EC2가 가동하여 대응해야 하는 워크로드 관련 문제
그리고 급증 부하에 대응하는 것은 매우 어려울 수 있습니다.
멀티테넌트 환경.사람들이 종종 과잉 프로비저닝을 하는 이유가 바로 여기에 있습니다.
이 시나리오에서는 말이죠.따라서 이러한 인스턴스를 스핀업한다는 것이 무엇을 의미하는지, 얼마나 빨리 스핀업할지 생각해 보아야 합니다.그리고 분명히 이것은 아마도 풀링된 시나리오에서 더 잘 작동할 것입니다.그래서 통째로 보내면
테넌트를 많이 넣으면 테넌트 스케일링이 더 많아지고, 아마도 유휴 리소스도 줄어들겠죠.
아마도 더 적합할 것입니다.상황이 나아지는 곳과 제가 해낸 일
람다에 대한 논의가 많은데 람다와 멀티테넌시에 적합하다는 얘기가 많이 나오고 있습니다.왜냐하면 이제 람다에서는 우리가 움직이기 때문이죠.
관리형 컴퓨팅 서비스로 가정해 보겠습니다. 관리형 컴퓨팅 서비스의 경우 규모 단위는
전체 서비스가 아니라 규모 단위는
개별 기능.그러니까, 만약 오늘날 누군가가 정말로 소비하고 있다면
GetOrder로 아무것도 하지 않고 순서를 업데이트하면, 내일은 역으로 되죠.
별로 신경 안 써요.그냥 돈 내야겠어
세입자가 무슨 짓을 하든사실 제가 서비스를 어떻게 망가뜨리는지에 대해서는 그다지 신경 쓰지 않을 수도 있습니다.
서비스를 축소하고 분해해 보세요. 아직 서비스가 확장될 예정이니까요.
전체 마이크로서비스 수준이 아니라 함수 수준에서 말이죠.이 점은 정말 대단합니다.
올바른 규모 조정 정책이 뭔지 모른다는 측면에서 어떻게 하면 이걸 확장할 수 있을까요?여기에만 의존할게요.그건 그렇고, 이건 둘 다 잘 작동합니다.
사일로 및 풀 모델.사실, 우리의 서버리스는
레퍼런스 아키텍처에는 이 두 가지 예가 모두 있습니다.꼭 추천하고 싶습니다.
한 번 보시고 어떻게 작동하는지 확인해 보세요.그리고 물론 컨테이너도 있고요.많은 SaaS 회사들이 EKS를 배포 모델로서 애용하고 있고
여기서는 많은 도구를 제공합니다.여기서 제가 좋아하는 것은 EKS 분야인데, 새로운 사고방식도 생겼습니다.
배포 모델에 대해.예를 들어 테넌트당 네임스페이스가 옵션으로 제공됩니다.그래서 여기에 네임스페이스를 넣을 수 있습니다.노드 어피니티와 같은 작업을 수행하고 워크로드를 연결할 수 있는 방법이 생겼습니다.
특정 종류의 노드.잠시 후에 살펴보겠습니다.자, 이제 빠른 스케일링이 가능합니다.
일종의 환경이기 때문에 너무 많이 프로비저닝할 필요가 없습니다.그래서 정말 잘할 수 있어요.
이것의 효율성이죠.하지만 여기에도 옵션이 있습니다.창에 AWS Fargate가 보일 것입니다.파게이트를 통해 다음을 가져올 수 있습니다.
EKS 공간에 서버리스 옵션이 들어왔기 때문에 노드가 무엇인지 고민할 필요도 없습니다.
클러스터 아래에서 실행하고 그냥 클러스터에서 작동시키면 됩니다.
제가 람다에서 하는 것과 같은 사고방식이죠.거기에는 미묘한 차이가 있긴 하지만, 일반적으로
여기까지 가져가세요.그러니까, 저한테는 앉아서 체중계를 고를 때
전략, 어디로 가는 거예요?다시 한 번 말씀드리지만, 꼭 한 가지라고 말할 수는 없습니다.
이 중 하나가 맞긴 하지만 제 작업량을 보고 뭐가 최선인지 알아볼게요.다시 말씀드리지만, 페르소나와 그 성격에 대해 다시 말씀드리죠.
워크로드는 이미 있습니다.하지만 이걸 분해해서 배포를 어떻게 할 건지 생각해본다면
모델이 스케일링에 영향을 주나요?음, 사일로화된 것을 보면
스케일링, 사일로는 꽤 괜찮습니다. 마치 테넌트가 한 개 있는데 완전히 사일로화되어 있는 리소스라면 확장 프로파일을 예측하기가 좀 더 쉬울 것입니다.기존의 방식과 비슷합니다.
시스템에는 수명 주기가 있습니다.데이터를 소비하는 비즈니스에 종말이 올 수도 있습니다.
마지막에는 꼬리를 떼세요.방법을 알아내느라 너무 열심히 노력하진 않을 거예요
이러한 환경을 확장하세요.하지만 리소스를 투입하기 시작하면
이러한 풀링된 환경, 풀링된 환경의 모든 리소스, 이제 소비 패턴은
여기저기 널려 있죠.자, 이제 어떻게 규모를 늘릴지 알아내는 건 최고점에 어떻게 대처하느냐에 더 초점을 맞추고
골짜기에 이런 것들이 있다고요?걱정 안 해도 돼요
여기선 느긋하게 소비하는 양도 많아요.하지만 이제 생각해 봐야 할 것이 있습니다.
시끄러운 이웃 같은 것들이나 그런 성격의 것들이죠.마지막으로, 다른 규모 단위 중 하나이고 다른 하나는 제가 더 말씀드렸듯이
올해 re:Invent에서 비용 효율성에 대해 이야기했는데 여기서도 유효하다고 생각합니다. 일반적으로 우리는 서비스 경계를 따라 확장에 대해 생각할까요?
예를 들어, 컴퓨팅은 어떻게 확장되는 걸까요?이 스토리지는 어떻게 확장되나요?하지만 다음과 같은 방법도 있습니다.
규모를 더 넓게 보고 제가 만들겠다고 말해보세요.
이런 개념들을 포드 (pod) 라고 부르는데 저는 이 테넌트를 포드에 넣을 거예요.그리고 몇 가지 더 넣을게요.
거기 몇 개나 있어요.그건 내가 알아야겠어
여기 세입자 몇 명이요여기 여덟 명의 세입자가 있어요.아마 알 거야
일반적으로 테넌트가 8명뿐인 경우 스케일링을 정의하는 방법을 알 수 있을 것입니다.
이 포드에 대한 정책은 일반적으로
이 포드는 안전하다는 뜻입니다.또한 이 포드를 격리시켜서 폭발 반경이 딱 적당합니다.
테넌트 8명으로 제한됩니다.그리고 나서 포드의 경계가 어디든, 테넌트가 몇 명인지 익숙해지면
그 안에 넣고 싶은데, 그러면 다른 포드를 하나 더 돌리면 돼요.그냥 여기서 샤딩하고 가로로 스케일링하는 거예요
포드 단위로 나눠서 다음 테넌트 세트를 여기에 넣었습니다.일부 팀에서는 개별 서비스 수준까지 정책을 확장하거나 다루지 않기 때문에 이런 방식을 선호합니다.그들은 단지 포드를 충분히 성공적으로 확장하기 위해 노력하고 있을 뿐입니다.그리고, 그런데, 만약
더 이상 맞지 않는 테넌트를 하나의 포드에 넣거나 어려움을 겪으면 잠재적으로 포드 간에 테넌트를 마이그레이션하여 처리할 수 있습니다.
관리 및 확장 문제.그리고 이 문제는 계속 이어지는데, 기본적으로 포드 (pod) 를 확장할 수 있게 되는 거죠.자, 이것도 말씀드리고 싶은데요.
확장성 측면에서 가치가 있습니다. 왜냐하면 여러분이 지원할 수 있다는 뜻이기 때문입니다.
다중 지역 모델도 여기에 있습니다.그러니까, 만약 제가 이미 포드를 가지고 있다면
내 환경을 위한 유닛 배포로서
(쿵쾅) 죄송합니다. 제 환경의 배포 단위입니다. 이제 동일한 포드를 가져와서 지역에도 배포할 수 있고 다중 지역 풋프린트를 사용할 수 있습니다.거기에는 많은 뉘앙스가 담겨있네요.배포가 더 복잡하고 운영이 더 복잡하기 때문에 비용이 전혀 들지 않습니다.이제 포드 전체의 모든 것을 집계해야 합니다.
운영 뷰를 통해 확인할 수 있습니다.하지만 규모에 대해 말씀하신다면 그건 또 다른 차원이라고 생각해요.아직 어느 정도 논쟁의 여지가 있지만, 스케일 a에 접근하는 방법이라고 생각합니다.
조금 다르게 말이죠.또 다른 한가지는, 저희 팀원들 중 일부가 이 문제에 대해 이야기하기 시작했는데 저는 아직도 이 모든 워크로드와 규모 조정 전략을 살펴보는 과정에서 나온 아이디어이기도 했습니다.
저에게는 다음과 같은 서비스가 있습니다.
발자취는 아주 다릅니다.일부는 컴퓨팅 집약적이고
일부는 배치에 초점을 맞춥니다.모든 마이크로서비스를 작성하고 모두 동일한 인스턴스에 배치할까요?
타입, 특히 이것이 컨테이너 기반 환경에 있다고 가정해 봅시다. 그리고 다음과 같은 경우를 가정해 봅시다.
인스턴스 유형은 메모리가 더 필요하거나 GPU 모델을 선호합니다. 그냥 놔두겠습니다.
인스턴스 타입이 확장되면 그냥 해야겠네요
해당 부하에 맞게 규모를 확장하세요.이로 인해 특정 워크로드를 특정 인스턴스 유형에 연결하여 규모를 최적화할 수 있을까 하는 의문이 생깁니다.
여기가 좀 더 나을까요?다시 말씀드리지만, 저희는
아직도 이것에 대해 생각하고 있습니다. 하지만 예를 들어, 이것들을 상상해 보세요.
세 가지 맞춤 서비스가 있습니다.그럼, 이게 맞는 건지 누가 알겠어요?
제 프로필이 여기 있어요.하지만 제가 할 수 있는 건 제가 도망칠 수 있냐는 거예요.
이 세 가지 서비스가 서로 다른 세 가지 인스턴스 유형에 있나요?EKS 내에서 노드 어피니티를 사용하고 특정 유형의 워크로드를 특정 유형의 인스턴스에 바인딩할 수 있을까요?그러면 더 나은 확장 경험을 얻을 수 있을까요?
제 환경에 적합한가요?뭔가 있으면
메모리를 정말 많이 쓰거나
GPU가 정말 유용한데, 그 워크로드에 GPU를 주는 것이 좋을까요?뭐, 상황에 따라 다르죠.저기 있어요
거기 많은 것들이 의존하고 있어요.비용이 들어요.규모가 얼마나 커지나요?계산이 유효하다는 것을 스스로 증명하기 위해 해야 할 수학이 많이 있습니다.하지만 흥미로운 것 같아요.
생각해 볼 부분이죠.여기서 한 걸음 더 나아가자면, EKS를 보면
클러스터가 어떤지 보세요. 몇 가지 예를 들어보죠.
여기 있는 노드는 M5 인스턴스에서 실행 중이고 실행 중입니다.여기서 볼 수 있는 멋진 기능 중 하나는 바로 이것입니다.
카펜터라는 도구죠.카펜터는 실제로 이 문제를 해결할 수 있는 방법을 알려줬습니다.
카펜터가 있는 EKS 환경에서는
Carpenter에 가서 말씀드릴 수 있습니다. 사용 가능한 인스턴스 유형 목록은 다음과 같습니다. 여기에서 포드 세트를 노드에 스케줄링하여 잠재적으로 할당해 주셨으면 합니다.
실제 사용 가능한 노드에는 다양한 인스턴스 유형이 있습니다.이건 정말 추측에 가까운 이야기라고 생각하지만, 생각해보기 시작하기에 충분히 흥미롭다고 생각해요. 특히 노드에 대해서요.
어피니티 버전이죠.카펜터 비트, 난
어떻게 해야 제대로 된 작업량을 확보할 수 있을 만큼 효율적으로 스케줄을 잡을 수 있을지 알아내야 합니다.
적절한 인스턴스 유형으로하지만 흥미로운 것 같습니다.자, 다른 부분인데요, 전혀 생각하지 못하실 수도 있겠지만, 제가 추천하는 것은
제가 온보딩에 대해, 그리고 왜 온보딩이 이 이야기의 일부인지에 대해 말씀드린 건지 정말 궁금합니다.다음 사항에 대해 생각해 보셔야 합니다.
온보딩의 규모.이렇게 온보딩 프로세스를 진행하면 컨트롤 플레인이 보일 것입니다.
여기서는 테넌트를 생성하고 테넌트 환경을 프로비저닝합니다.그리고 분명히 그렇습니다.
앱 플레인으로 나가서 필요한 모든 서비스, 다양한 배포 모델을 설정하고 결제 제공업체와 대화를 나눕니다.
그 관계를 설정하기 위해서요.여기에는 움직이는 부분이 아주 많습니다.뭐가 뭔지 스스로에게 물어보세요.
우리한테는 규모가 커요?그래서 오늘은 10개 정도 하는데 100개를 던지면 어떻게 될까요? 아니면 1,000개를 던지면 어떻게 될까요?실용적이면서도 조직에 맞는 높은 상한선을 찾아보고 효과적으로 규모를 확장하고 있습니까?
그런 환경에서?온보딩을 상상해 보세요
실패하기 시작하죠. 예를 들어 내일이면, 어떤 이유로든 기업으로서 우리가 해야할 일은
더 많은 사람들을 합류시키세요.다시 말씀드리자면, 저희가 비즈니스에 대한 답을 드리자면, 충분히 빨리 온보딩할 수는 없습니다.우린 할 수 없을 거예요
필요에 맞게 확장하세요.이는 비즈니스에 큰 타격이 될 것입니다.그러니 이 점을 강조해 주세요.자, 이제 살펴보자면
프로비저닝과 함께 발생하는 멀티테넌트 복잡성
이러한 환경에서 온보딩 프로세스에 대해 이야기하고 컨트롤 플레인이 생겼습니다.다루어야 할 사항 중 하나는 이러한 다양한 배포 모델입니다.따라서 이러한 환경을 구축하고 규모를 고려할 때 알아두어야 할 사항 중 하나는 배포를 자동화하고 각 환경에 대한 구성 및 구성을 자동화하는 방법입니다.
다양한 테넌트 환경.그러니까 풀스택이 있다면
프리미엄 티어를 위한 사일로를 만들면 독특한 테라폼을 갖게 될 거예요
CDK 비트가 필요하고 DevOps가 무엇이든 무엇이든 사용할 수 있을 거예요
처리해야 할 자동화 비트가 여기 있습니다
풀스택은 조금 다르게 생겼다는 사실에서요.
다른 모든 것들보다 말이죠.몇 가지 공통점이 있을 수도 있겠지만
하지만 나름의 미묘한 차이가 있죠.저는 어드밴스 티어와 어드밴스 티어를 둘 수도 있습니다.
하나의 서비스가 사일로에서 실행되고 나머지 서비스는 공유 상태로 실행되는 경우가 있습니다.
풀링된 환경.이제 기본 계층 테넌트를 온보딩하면 해당 테넌트가 다음 단계로 넘어가는 모델도 있습니다.
완전히 풀링된 환경입니다.뭐, 여기선 생각할 게 많은데, 저희 사이트를 보면
시중에 나와 있는 예시들, 다음과 같은 예들이 있습니다.
이것의 모든 움직이는 부분들이죠.사실, 대단한 게 있어요.
헬름과 그 많은 기능을 보여주는 빌더 세션입니다.
이 모든 것을 자동화하고 제어하기 위해 다른 쿠버네티스 툴링이 사용되고 있다.
그냥 쫓아다니지 않는 방식으로 경험해 보세요.
모든 것이 제대로 작동하도록 만드는 온갖 종류의 말도 안 되는 일회성 코드, 하지만
엔드 투 엔드 프로세스는 여전히 하나죠.그리고 규모의 일부로 말씀드리자면, 멋지다고 말씀드리고 싶은 게 바로 이것입니다.
한 명의 고객에게도 효과가 있습니다.지금 이걸 잔뜩 던지면 어떡하지?뭐, 이 모든 자동화는 효과가 있죠.이런 것들 중 몇 가지라면 상당한 대안이 있습니다.
도중에 실패를 하게 되죠.시스템은 다음 여부를 어떻게 알 수 있나요?
무언가 실패했거나 성공했나요?여기서 물어봐야 할 중요한 질문이 많아요.자, 또 다른 부분은 배포입니다.배포는 테넌트 프로비저닝과 약간 다릅니다.테넌트를 온보딩하면
테넌트가 환경에 들어가서 모두 프로비전되도록 설정했습니다.
그들의 모든 환경뿐만 아니라 우리도
팀의 빌더가 어딘가에 있을 때의 경험
새로운 마이크로서비스를 만들어도 그들은 신경 쓰지 않아요
배포 모델에 대해서는 신경 쓰지 않아도 됩니다.
배포 모델에 대해서요.하지만 배포 파이프라인 어딘가에는 여전히 이 기능이 있어야 합니다.
테넌트에 대한 인식이 깊어졌습니다.예를 들어, 샘은
여기에 기능 플래그를 사용하고 있는데 표준이 있습니다.
티어와 어드밴스드 티어, 모두 종류를 가리지 않아요
다양한 설정.그런 다음 이 환경을 모두에게 배포해야 합니다.
이러한 다양한 구성.방법을 알아내야 합니다.
이 저울도 만들기 위해서요이게 무슨 의미일까요?
새로운 기능을 출시했는데 어떻게 홍보할 수 있을까요?
기능 플래그를 붙이거나 AB를 하고 있다면 어떨까요?
카나리아 릴리스를 하고 계시잖아요.카나리아 릴리즈는 정말
SaaS 환경에서 널리 사용됩니다.자, 이제 서로 다른 모든 것에 맞서 싸워야 합니다.
배포 모델.어떻게 생겼나요?어떻게 작동해요?어떻게 하면 효과를 볼 수 있을까요?그리고 나서, 이걸 만들기 위해서요.
좀 더 구체적으로 말하자면, 서버리스 SaaS에서 제외된 한 가지 예를 들어보겠습니다.
다중 배포 모델을 지원하는 레퍼런스 아키텍처.스택이 두 개 있습니다.여기 기본 스택이 표시되고 그 다음은 테넌트1로 식별되는 완전히 사일로화된 스택입니다.자, 기본적으로 모든 것이
풀링된 모든 테넌트는 기본 스택에 들어가고, 새로운 프리미엄 티어나 어드밴스드 티어가 무엇이든 간에 그 테이블에 고유한 항목이 들어갑니다. 왜냐하면 계속 추적해야 하기 때문이죠.다음은 몇 가지 예시입니다.
여러분이 해야 할 일 중 하나죠.어떤 것을 추적해야 하는지 알아두셔야 합니다.
테넌트가 할당되었으며 어떤 모델과
그들의 리소스가 어디에 있는지, 그래서 다시 돌아오면
이 모든 것을 배포하려면 어디에 필요한지 알 수 있습니다.
가서 누가 무엇을 얻는지, 어떤 플래그가 켜져 있는지, 꺼져 있는지 알 수 있는 플래그를 포함해서 누가 무엇을 얻었는지 알 수 있습니다.그리고 나서, 여기로
여기 오른쪽에 있는 AWS CodePipeline을 보세요. 방금 진행중입니다.
를 통해 소스를 가져오고 빌드를 수행한 다음
배포를 수행하고 배포를 수행하여 어떤 항목이든 만들 것입니다.
스택으로 이동해야 합니다.그리고 무엇이든 사용하기도 하죠.
설정은 여기.여기처럼 동시성을 제공했는데, 서비스 환경이고 기본 티어 테넌트는 0이고 프리미엄 티어 테넌트는 50을 받기 때문입니다.0이 좋은지는 모르겠어요.
아이디어가 떠오르네요.(웃음) 생각해 봐야겠네요.도표에서는 그냥 그렇게 부르죠.그리고 분명히,
이제 이 스택이 생겼습니다. 바로 이 테넌트1 스택입니다.
이제 배포해 보겠습니다.API 게이트웨이와 각 테넌트 스택을 사용하기 때문이죠.
자체 API 게이트웨이가 있기 때문에 URL을 추적해야 합니다.이것이 바로 시작점입니다.따라서 워크로드가 증가할 때
여기서 처리하면 바로 처리할 수 있습니다.이 물건들은 움직이는 부분이 전부예요. 제가 보여드릴 수 있는 건, 그렇게 하지 말라는 겁니다.
스택이 어떤 역할을 하는지 가르쳐 주세요.제가 보여드릴 수 있는 건 확장하려는 거라면
이 모든 메커니즘이 여러분과 함께 효과적으로 확장될 수 있도록 확장해야 합니다.이러한 도구를 사용하는 것이 적절한가요?이것이 올바른 메커니즘인가요?다음 사항에 대해 생각해 보셔야 합니다.
배포는 이 이야기의 일부입니다.좋아, 회복력.그리고 결국에는 검증과 혼란에 빠질 것입니다.따라서 회복력은 분명히
다시 한번 모든 환경의 핵심이죠.하지만 이 경우에는
복원력은 복원력의 SaaS 계층이 무엇인지에 관한 것입니다.내결함성이 있어야 한다는 것은 잘 알고 있습니다.제대로 작동해야 한다는 것도 잘 알고 있고
아키텍처에 있는 이 모든 회로 차단기와 다른 모든 패턴의 복원력을 갖추어야 합니다.하지만 다른 건 뭘까요?그리고 저는 그것을 다음과 같이 세분화해 보았습니다.
제가 말씀드릴 수 있는 몇 가지 핵심 분야가 있습니다.이 슬라이드를 만들거나 이러한 영역을 분류하려고 시도한 것은 이번이 처음입니다. 저에게는 진화하고 있는 영역이지만, 제가 이걸 가지고 있으면 좋겠다고 생각했습니다.
전체 SaaS 아키텍처에는 컴퓨팅이 포함되어 있습니다.
컨트롤 플레인도 있고, 테넌트도 있고
꼭대기에서 들어오는 건데, 어떤 층들이 있는 걸까요?
이 레질리언스 스토리?그 중 하나는 어떻게 해야 하는가입니다.
테넌트가 내 환경에 부하를 가하는 방식을 제어하기만 하면 되는 건가요?전형적인 질문이랄까요?
그냥 정문으로 들어올 때 어떤 식으로든 들어오지 않는지 어떻게 확인할 수 있냐고요
그게 제 시스템을 포화시키거나 시스템에 부하를 가해서 무릎을 꿇게 하고 그냥 고장나게 하는 거죠.또 다른 한 가지를 살펴보자면, 이건 복원력의 일부가 아니라고 주장하실 수 있겠지만, 제 생각에는 탄력성의 일부라고 생각해요. 테넌트에 대해 말씀드리자면
항상 고립되어 있어요.저에게 있어 회복력의 일부는 한 명의 임차인이 볼 수 없도록 하는 것입니다.
다른 테넌트의 리소스제가 생각하기에 회복탄력성에 대한 이야기 중 하나는 여러분이 할 수 있는 모든 것을 해야 한다는 점이라고 생각합니다.
한 명의 테넌트가 할 수 없는 일을 보장하기 위한 모든 요소를 갖추고 있습니다.
다른 테넌트의 데이터를 보세요.만약 그들이 그렇게 한다면, 그건 또 엄청난 일이 될 수 있으니까요.
SaaS 회사를 위한 이벤트죠.그럼, 저희가 정말
여기서 가장 많이 다루었으니 다시 확인하지는 않겠습니다. 하지만 체중계를 포함시켜야 합니다
레질리언스의 일환으로, 효과적으로 확장해야 하고 충분한 리소스가 있어야 하니까요.확장이 충분히 이루어지지 않으면
그리고 시스템이 망가졌어요. 확장할 수 없으니까요.
그건 문제가 될 거예요.그리고 나서, 당신이
생각하지 못하셨을 수도 있겠지만, 시스템이 실제로 무엇을 하고 있는지 충분히 파악할 수 있을까요?어떻게 확장되고 있나요?어떻게
테넌트가 확장되고 있나요?마이크로서비스는 어떻게 확장되고 있나요?시스템에 어떤 부하를 주고 있나요?그리고 시스템은 어때요?
그 부하를 기반으로 동작할까요?그걸 볼 수 없다면, 아직 보지 못했는데도...대부분 그걸 표면화하는 게 중요해요.
제가 보기에 효과적인 스케일링이죠.당신인지는 모르겠지만
여긴 시스템이 탄력적이야.회복력은 부분적으로
실제로 문제가 발생하기 전에 상황을 감지할 수 있는 능력.만약 그렇지 않다면
잘못되기 전에 알아낼 수 있는 방법이 있잖아요
다른 모든 걸 사용할 수는 없을 거예요
회복력을 얻기 위한 접근법.마지막으로 말씀드리자면, 온보딩은
그리고 배포 레질리언스.이런 것들에 대해 생각해 보아야 합니다.
이 두 부분도 마찬가지죠.온보딩은 문제를 얼마나 잘 견디나요?문제가 발생한 경우 어떻게 복구할 수 있나요?디플로이먼트는 어떻게 장애를 처리하고 장애를 복구할 수 있을까요? 그리고 우리가 제대로 작동하는지 확인할 수 있을까요?
우리가 할 수 있는 것처럼 잘 할 수 있을까요?자, 그럼 이제 그 현관에서 시작해서 안으로 들어가보면, 우선
가장 기본적인 주제입니다.이것은 실제로 모든 시스템에 적용되는데, 사용자가 강요만 하지 않도록 하려는 경우입니다.
시스템에 과도한 부하가 걸려 무릎을 꿇게 하려면 스로틀링 (throttling) 을 걸어야 합니다.
매커니즘을 제자리에 두었습니다.그래서 제가 간단한 예를 하나 보여드렸는데요.
여기 API 게이트웨이가 있습니다.API 게이트웨이에는 이런 개념이 있습니다.
잠시 후 정책을 정의할 수 있는 람다 권한 부여자에 대해 살펴보겠습니다.
테넌트가 가하는 부하의 종류를 제어할 수 있습니다.
제 환경에서요.하지만 이건 이것보다 더 깊습니다.스로틀링에 대한 이 전체 논의는 다층적인 논의입니다.그러니까, 제가 받은 이후에도
저처럼 애플리케이션 앞문을 통해
서비스에서 서비스로, 서비스에서 스토리지로, 시스템의 모든 부분과 계층을
어떻게 또는 구현할 것인지 물어봐야 합니다.
여기 일종의 스로틀링 같은 게 있네요.그럼, 제가 준비했나요?
스토리지에 동시성이 있나요? 아니면 동시성이 있나요?
누군가가 준 메커니즘이나 노브와 다이얼은
저요. 그래야 테넌트의 작업량과 요구를 충족하고 제어할 수 있기 때문이죠.
제 환경에 영향을 미치고 있나요?좀 더 구체적으로 말씀드리자면, 이걸 빼면
티어를 지정하면 네 개의 다른 티어가 있습니다. 사실 티어는 세 개, 플래티넘 티어에는 테넌트가 두 개 있는 거죠.그리고 곧 출시될 예정이라고 말씀드렸죠.
제 환경으로 들어와서 API 게이트웨이에 접근하고 있습니다. 권한 부여자를 눌러 어떤 테넌트인지 알아냈죠.
어떤 API 키에 매핑한 다음 람다로 매핑합니다.
권한 부여자, 사용량 계획에 연결된 API 키를 가질 수 있습니다.그래서 저는 기본적으로 세 개를 가지고 있습니다.
여기 다른 API 키가 있습니다.이 세 가지 API 키는 사용량 계획에 매핑됩니다.그리고 모두 람다 권한 부여자 내에서 수신 문제를 해결합니다.
사용량 계획으로 계층화하세요.그리고 그 사용량 계획
권한 부여 정책을 구성한 다음 다운스트림으로 이동할 때 API 게이트웨이에 적용합니다.할당량을 초과하면 메시지가 전달되지 않습니다.제가 바라는 또 다른 부분이지요.
여기 없는 도표를 보여드릴게요. 할 수 있잖아요
또한 권한 부여 정책을 사용하여 어떤 메서드를 제어하고
진입점이 표시됩니다.그러니까, 누군가 시도하고 있다면
게이트웨이의 엔트리 포인트에 액세스하려면
해당 역할이나 다른 용도로는 유효하지 않습니다.
여기서 그 경로를 차단할 수 있습니다. 제가 보기에 이는 회복력 스토리에서 활용할 수 있는 또 다른 훌륭한 도구입니다.하지만 여기서 생각해 보세요. 제가 실제로 동일시했던 것이죠.
계층화에서 레질리언스까지.계층화는 일부라고 생각합니다.
여러분의 레질리언스 스토리 중 하나죠.기본 티어 테넌트가 시스템에 엄청난 부하를 가하고 플래티넘 티어 테넌트의 가용성에 영향을 준다면 이는 복원력 문제입니다.
제 시스템에서는 말이죠.그걸 분류해서 정책을 넣을게요
기본 등급의 테넌트가 특정 레벨에서 차단될 거라고 말했는데 그건 의도적이에요.그래서 그들이 제게 전화해서 잠깐만요, 라고 하면, 제가 받을 수 있는 게
스로틀, 무슨 일이에요?제가 말할게요, 음,
더 나은 처리량을 원한다면 표준 등급이 되거나 플래티넘 등급으로 올라가세요.대부분의 경우 괜찮을 거예요. 하루 종일 그런 일이 일어나지 않는 곳에 정책을 설정할게요. 하지만 여전히 설정할 거예요. 왜냐하면 저는 그렇게 하고 싶지 않기 때문이죠.
언젠가 그 일에 열광해서 결국 영향을 미치게 되는 그런 날이 있을 수 있겠습니까?
내 다른 모든 세입자들이요하나 보여드리자면
이에 대한 다른 접근법, 그냥 이 모든 것을 다 만들지는 마세요.
API 게이트웨이에 대해서요.람다를 사용해보면 제가 실제로 할 수 있다는 것을 알 수 있을 겁니다.
예비 동시성을 사용하세요.그럼, 여기선 할 수 있겠네요.
실제로 테넌트를 세 개의 개별 계층에 배포하고
함수의 별도 복사본이지만 예약금은 다릅니다.
동시성 값.즉, 람다 함수 내에서 현재 실행할 수 있는 실행 횟수는 몇 개입니까?이제 기본 계층이 100개이므로 동시성 장벽에 부딪힐 수 있습니다.300 어드밴스드를 완료하면 거기 도달할 수 있습니다.그리고 프리미엄으로
누구나 더 많은 혜택을 받을 수 있습니다.그래서 제게 이것은 이전 슬라이드에서 말씀드린 것과 같은 사고방식을 구현할 수 있는 또 다른 방법일 뿐입니다.자, 회복탄력성 분야는
이 개념은 분류하기가 좀 더 어렵죠.
복원력이 뛰어난 스토리지에 대해서요.복원력이 뛰어난 스토리지를 구축하려면 어떻게 해야 할까요?이 분야는 제가 말씀드린 것 중 가장 힘들고 어려운 분야 중 하나입니다. 왜냐하면 많은 사람들이
피킹 스토리지 역시 고르고 있습니다. 어떤 사람들은 컴퓨팅을 선택해야 합니다.
그들이 고를 때 사이즈를 고르세요.그래서 그들은 나가서 이렇게 말합니다.
이봐, 내 테넌트1은 사일로야.처음에는 db.m3로 시작할 거예요.사일로 2는 db.m5입니다.그러면 db.m5와 마주치게 될 풀링된 테넌트들이 모두 생겼습니다.크기가 맞나요?
인스턴스?정말 모르겠어요.그게 보통 우리가 여기서 오버프로비저닝을 하는 이유죠.그게 우리가 할 수 있는 유일한 선택인가요?하지만 저한테는 그게 진짜 회복력이 아니에요.그냥 네가 그랬으면 하는 바램일 뿐이야
정말 실패하지 않을 만큼 충분한 용량을 거기에 두세요.그리고 실제로 하려고 하는 것은 효율성을 위해 실시간으로 하는 것입니다. 이것은 효율성과 규모의 차이입니다.
서로 싸우고 있어요.너무 과도하게 프로비저닝하지 않았으면 좋겠어요.그럼, 보시면 아시겠죠.
저쪽으로 이동하는 오른편에는
조직에서 수행하는 인스턴스의 크기를 조정하기 시작합니다.그리고 저는 그에 대한 단서가 전혀 없습니다.
사일로를 어떻게 해야 할까요? 그래프를 기억하니까요
미안해요, 수영장 그래프는 여기저기 널려 있어요.저는 아마 절대 크기를 줄일 수 없을 거예요. 왜냐하면 어느 날 누군가가 열광적으로 무언가를 가지고 다니면 모든 것을 다 가져갈 수도 있으니까요.
제 몰린 고객들이 줄었어요.좋은 순간이 아니에요.그럼, 답은 뭘까요?마법같은 해답은 없습니다.
이거에 대해서요(웃음) 하나 드릴게요.약간의 힌트가 있는 것 같아요.
답은 서버리스 스토리지입니다.좋은 점이 많이 있습니다.
현재 AWS에는 서버리스 옵션이 있는 스토리지 옵션이 있습니다.
DynamoDB 및 Aurora 서버리스.EMR에는 서버리스가 있다고 생각합니다.
오픈서치는 이제 서버리스를 사용합니다.따라서 점점 더 많은 서버리스가 스토리지 스택에 포함되고 있습니다.그리고 점점 더 많아지고 있습니다.
이러한 모델에 스토리지를 배치할 수 있습니다. 그렇지 않으면 스토리지 전략의 탄력성이 더 높아질 것입니다.
여기에 밀접하게 연결되어 있습니다.또한 이러한 스토리지 메커니즘에는 프로비저닝 처리량과 주어진 용량에 대한 자체 노브와 다이얼이 있습니다.온디맨드로 운영하시나요?온디맨드 아닌가요?거기에는 거래에 사용할 수 있는 도구가 많이 있습니다.
회복력도 마찬가지죠.자, 나머지 부분은
이건 회복력 때문이에요. 어디에 제 잘못이 있냐고요?
내 환경의 경계는?예를 들어 저한테는
제 생각에 온보딩과 온보딩은
ID 공급자와의 상호 작용, 상호 작용이 있을 수 있습니다.
테넌트 프로비저닝이 중단되고 다른 서비스에 다음을 요청하는 경우
모든 리소스를 프로비저닝하세요.그리고 아마도
청구와의 상호작용 (제3자일 수 있음)
청구 제공업체.글쎄요, 잠재적으로 비동기적이고 잠재적으로 타사 종속성일 수 있는 모든 종속성은 내결함성이 있습니다.
시스템 연락처.결제 시스템이 다음과 같은 경우
다운됐어, 뭘 하고 싶은데?여기가 네가 해야 할 곳이야
대체 전략을 세우세요.클래식을 보면
레질리언스 전략, 지금 당장 결제가 실패하도록 놔뒀다가 나중에 다시 돌아오게 할지도 몰라요
다시 시도하겠습니다.하지만 시스템이 나머지 부분과 함께 진행하도록 내버려 두세요.
온보딩 경험.배포의 경우도 마찬가지입니다.이 모든 것을 시도한다면
다양한 배포 메커니즘과 해당 배포의 일부
이 모든 테라폼을 실행하고, 이를 위한 모든 CDK 코드를 실행합니다.그리고 아마도 그 중 일부를 비동기적으로 수행하는 것일 수도 있습니다.
실패하면 어떻게 해야 할까요?아마 이걸 좀 더 잘 통제할 수 있을 거예요. 아마도 이게
자체 코드에 더 가깝지만 여전히 전략이 있어야 합니다.다시 시도할 건가요?정리하고 다시 시도할 건가요?어떻게 하실 거예요?고립이라는 개념도 가져야 합니다. 말씀드렸듯이 회복력은
고립 이야기의 일부죠.그리고 제게는 그 방법을 알아내는 게
환경을 어떻게 배포했느냐에 따라 격리에 대한 복원력을 구축할 수 있습니다.예를 들어 제 계정이 맞다면 일종의 개념을 사용하고 있는 거죠.
테넌트별 계정을 배포 모델로 사용하는 경우 어떻게 하면 교차 계정을 방지할 수 있을지 고민해야 합니다.
이들 간의 액세스가 가능할까요?아마도 더 쉬운 방법일 겁니다.제가 모든 테넌트의 VPC라면, 이제 제 전략과 복원력 전략은 무엇이고, 이러한 VPC가 언더로부터 성공적으로 격리되도록 하려면 어떻게 해야 할까요?거기에서 좋은 구조를 사용할 수 있습니다.그리고 좀 더 세분화되면 서비스를 시작합니다.
그리고 리소스 격리.그래서 훨씬 더 까다로워지죠.한 서비스가 다른 서비스를 호출하지 못하도록 하려면 어떻게 해야 하나요?
둘 다 사일로화되어 있다면?어떤 경우에는 대화가 필요할 수도 있습니다.
하지만 그렇지 않은 경우도 있습니다.다른 모든 AWS는 어때요?
제가 말씀드리는 서비스, 어떻게 하면 해당 서비스의 관점에만 초점을 맞추고 있는지 확인할 수 있을까요?
특정 세입자를 위해 받아야 하는 서비스, 그리고
그 특정 테넌트 컨텍스트요?생각해 내야 할 것이 있습니다.
이를 위한 전략이죠.일반적으로 테넌트 격리는
여러분이 해야 할 일이죠.저는 테넌트 격리를 시스템의 복원력에 연결하고 있습니다.항상 말씀드린 것처럼 테넌트 격리를 하라는 말씀입니다. 하지만 곰곰이 생각해 보세요.
회복력의 렌즈죠.마지막으로 말씀드리자면, 이 회복력은 약간 모호하고 어쩌면 너무 희망적일 수도 있지만, 사실 제 느낌은
레질리언스의 한 부분이 코드와 정책을 움직이는 것 같아요.
빌더로부터 멀리 떨어지세요.제 격리 정책이 다음 강령에 포함되는 것을 원하지 않아요.
모든 마이크로서비스.제네릭이 있었으면 좋겠어요
그걸 처리하는 메커니즘.JWT 토큰의 압축을 풀려면 어떻게 해야 하나요?
테넌트 컨텍스트를 확인하려면?메트릭과 로그를 기록하려면 어떻게 해야 하나요?빌더가 그러길 바라지 않아요.
코드 전체에 해당 정책을 반복해서 적용하면 문제가 발생할 수 있습니다.만들어 낼 거예요.
저한테는 회복력에 문제가 있어요.자, 이 특별한 경우에는 람다입니다.람다 레이어가 있어요.이것은 Java 라이브러리가 있는 EC2일 수 있습니다.어떤 JAR이든 무엇이든 될 수 있습니다.그냥, 제 요점은
건축가인 당신이 이 정책들을 옮길 거예요
개발자의 관점을 벗어나서 그냥 사용하라고 하세요.자, 이 특별한 경우에는 제가 가지고 있는 것을 보실 수 있을 겁니다.
제품 및 주문 서비스와 여기에 적용되는 모든 멀티테넌트 정책이
모든 서비스에서 공유되는 계층에 적용되고 있습니다.자, 이제 로그 방식을 바꾸고 싶으면
테넌트 컨텍스트를 주입하거나 토큰이 처리되는 방식, IAM과 정책을 사용하여 가정하는 방식
테넌트 범위를 얻기 위한 역할, 그건 전적으로 그들의 시야에서 벗어납니다.그래서 저한테는 그게
더 높은 곳으로 이끌 수 있는 훌륭한 방어 전술
시스템의 탄력성.이는 좋은 습관이기도 합니다.마지막으로 제가 말씀드린 것은, 규모를 키우고, 회복탄력성을 구축한다는 것입니다.대부분의 사람들은 거기서 멈춥니다.정말 좋아요.우리는 좋은 코드를 작성했어요.정말 효과가 있는 것 같습니다.
글쎄요.그걸로 충분해요.이런 메커니즘이 있는 것 같아요.
너무 미묘한 차이가 있어서 효과가 있는지 모른다면 목표한 바를 달성했다는 것을 증명하지 못한 셈이죠.자, 여기 보시면
이것의 공통점은, 참고로, 아무것도 없습니다.
독특한 개성 있는 얘긴데요.이건 일종의 혼돈에 대한 개념이고 이건 그냥 좋은 테스트일 뿐이에요. 제가 찾아볼게요.
레질리언스 프로파일.저울을 찾아볼게요
내가 찾고 있는 프로필.뭐가 다른가요?
앞서 이야기한 소비 프로파일은?격리 프로파일에는 어떤 것들이 있나요?이걸 다음과 같이 사용할게요.
경험에 정보를 입력하고 모든 것을 정의할게요
서로 다른 워크로드와 서로 다른 티어.그리고 그 데이터를 사용할게요
제 애플리케이션의 입력으로 말이죠.그럼, 생성해 볼게요
세입자 몇 명, 제가 찾는 프로필에 맞는 테넌트 인구를 만들어 보세요.자동화 시스템을 좀 설치해 볼게요
이 경험을 인증하세요.그리고 나서, 이 사건에선 그냥 도망칠 거예요. 왜냐면 우리가 하려고 하는 거니까요.
부하를 기반으로 하는 것이죠. 이 모든 병렬 워크로드가 제 환경을 작동시키고
그냥 이 부분들을 강조해서 말이에요.여기 있는 전체 아이디어는
이 모든 전략을 세워보세요.그리고 다음 분야에도 관심을 가져보세요.
이건 왼쪽 편이죠.많은 사람들이 오른쪽에 관심이 있는 것 같아요.그들은 이 문제의 우측 작업을 수행하는 코드로 바로 가고 싶어하죠.하지만 멋진 것들은
체중계의 문제를 발견할 수 있을 테고 회복력은 왼편에서 일어납니다.어떤 종류의 데이터가 나올까요?
이 과정에 투입되는 건가요?세입자는 몇 명인가요?어떤 프로필에 등록해야 하나요?
저는 한 대의 테넌트를 고용해요. 프리미엄 등급이 여러 개 있는 것 처럼요.
테넌트만 있고 합쳐진 사람은 거의 없습니다.그런 다음 그걸 바꿔서 뒤집으세요
다양한 패턴으로 어떻게 반응하고 반응하는지 보세요.이제 실시간 코드를 시뮬레이션해 보세요.
해당 환경을 실행합니다.그리고 확장 및 대응이 가능할까요?
예상한 방식인가요?이를 통해 실제 환경으로 나가기 전에 주변 환경이 어떻게 운영되고 있는지 알 수 있고, 그 과정에서 미처 깨닫지 못할 수도 있는 것들을 발견할 수 있습니다.
문제로 드러났어요.그리고 제 생각엔 정말 그냥 문제 해결이 되고 있는 것 같아요.
고부가가치 확장 전략.이런 일을 하고 싶지는 않을 겁니다.
여기서는 모든 시나리오와 모든 부분을 다루지만, 어디에 있는지는 알 수 있습니다.
스케일링 및 레질리언스 전략의 이러한 부분이 있고, 이를 어떻게 실행해야 하는지 알게 될 것입니다.잡음이 많은 이웃과 규모, 탄력성을 위해 쓰기를 연습하는 것을 여기서 보면, 잡음이 많은 이웃 시나리오라는 것을 알 수 있습니다.프로필이 서로 다른 시끄러운 이웃들을 여럿 만들어 봤습니다.다양한 색상들
서로 다른 일을 하는 이들 그룹에서 특이점을 보이는 다양한 사람들을 나타냅니다.제가 좀 시끄러운 걸 만들어요.
여기 이웃 오케스트레이터가 있어요.이게 새 코드예요.
가서 글을 써야 할 거예요.아니면 서드파티 도구도 있고요.다음과 같은 좋은 도구가 있습니다.
이런 것도 하세요.나가서 테넌트를 프로비전하고 앱을 프로비전할 거예요
이 세입자들을 위한 비행기.그리고 난 도망갈 거야
이 다른 로드 시뮬레이터를 통해 다양한 워크로드를 처리할 수 있습니다.그리고 핵심 부분은
사람들이 놓치고 있는 부분인데요, 저는 애플리케이션 플레인에 접속할 거예요. 제가 관찰해 볼까요?
이럴 때 어떤 일이 벌어지는지에 대한 운영적 관점
이러한 로드를 실행할 때 발생합니다.많은 사람들이 그걸 운영했는데, 살아남았죠.저는 뉴렐릭이나 데이터독을 살펴봤어요.
AppDynamics 같은 것도 있고 모든 것이 정상인 것 같네요.좋아요.엄지손가락을 치켜세웠어요.아뇨, 가서 확인해 볼게요
운영 담당자가 보는 것 같은 제 대시보드 내부는 아니에요.아, 뭔가 포화상태인 걸 볼 수 있는 여건을 만들 수 있을까요?표면화되고 있나요?여기 있어야 할 경고와 알람이 울리고 있나요?알고 싶은데
이에 대한 운영적 관점은 가능해질 것입니다.
제가 이걸 다르게 배치했을 때 그들이 기대하는 것과 같은 시야를 가지세요
시스템에 대한 요구.제가 생각하기에 이 중 많은 부분이 부족하다고 생각하는데요,
사람들은 이 경험의 운영 측면에 끝까지 관여하지 않아요.다른 한 가지는 비동기식입니다.
앞서 말씀드린 통합, 그리고 이러한 통합은 매우 훌륭합니다.
내결함성이 있는 경험.이미 말씀드린 것과 같습니다.온보딩이 있고,
히트 테넌트 관리, 히트 테넌트 프로비저닝, 앱 플레인 프로비저닝,
요금이 청구되면 바로 이동합니다.이런 실패들을 감당하고 싶어요.그리고 어디에서든 가능하죠.어디든 가지고 다닐 수 있습니다
서드파티 의존성, 어디서든, 누군가
다른 사람의 가용성이나 복원력은 통제할 수 없습니다.대체 전략은 무엇인가요?이것이 기본적인 레질리언스이긴 하지만 더 중요한 것은
멀티테넌트 환경.그리고 더 중요한 것은 다음과 같습니다.
이 컨트롤 플레인에서는 오케스트레이션을 하고 있습니다.
이 경험의 대부분이죠.컨트롤 플레인이 이 비트를 처리할 수 있어야 할 거예요또한 검증이 필요합니다.
온보딩 경험.확장 가능하고 탄력적인 온보딩 경험이 필요하다고 말씀드렸습니다.즉, 분산과 함께 다양한 테넌트 프로필을 가져와 전체 부하를 파악하는 것을 의미합니다.
다양한 메이크업으로 구성해서 실행해 보세요.
여러분의 온보딩 프로세스, 그리고 그 사실을 스스로 증명하는 것
구성만 제공하는 기본 사일로와 풀스택 사일로를 갖춘 플래티넘을 온보딩할 때
새로운 환경 설정이지만 실제로 프로비전되지는 않음
새로운 인프라가 많이 생겼습니다.그리고 우리는 이런 일들을 합니다.
서로 다른 조합으로, 혹은 몇몇은 동시에 말이죠.시스템이 처리하나요?
이 모든 것이 효과적으로 이루어지나요?그들이 하고 있는 모든 일들은
그들이 해야 할 일을 말이에요.그건 그렇고, 대부분의 경우, 많은 사람들이 온보딩 전체를 구축했을 때에도 자신감이 넘칩니다. 그러다가 이런 일을 하기 시작하면요. 오, 잘못될 일이 거의 없다는 걸 알아차리기 시작하죠.그냥 그런 일은 일어나지 않을 뿐이죠.
너무 많아서 안 보여요.다른 하나는 여기 있고, 제 생각엔 이게
가장 어려운 것 중 하나는 격리를 일부로 설정하는 것입니다.
레질리언스 이야기에 대해서요.어떻게 해야 할까요?그걸 어떻게 테스트할 수 있을까요?제가 이런 환경을 가지고 있다면 토큰 자판기를 사용하고 있는데 제 테넌트 1이 이 환경에 들어와서 시도하고 있는 거죠.
액세스 테넌트 1 데이터베이스, 테넌트 2 데이터베이스가 여기 있습니다.테넌트 1은 분명히 테넌트 2의 데이터베이스만 볼 수 있습니다.음, 어떻게 되나요?해냈어요
토큰 자판기.역할을 맡고 있어요.모두
그런 것들이 다 있어요.그게 될 거라는 걸 어떻게 증명할 수 있죠?
문제가 생기면 효과가 있나요?그리고 정말 유일한 방법이죠.
정말 여기 있는 게 코드 안에 있거나
서드파티 도구를 통해 “아니, 넌 테넌트가 아니야”라는 컨텍스트를 주입해야 합니다.
1, 당신은 테넌트 2입니다.JWT 토큰을 주입할게요.뭐라도 할게요
그러면 상황이 바뀌고, 그걸 증명할 수 있죠.
IAM 정책이 있는 시점에 주입하셨잖아요
아뇨, 안 돼요, 할 수 없다고 말하겠죠.경계를 넘으려고 하는 거잖아다시 말씀드리지만, 누군가 그럴 때
여기서 경계를 넘으려고 하면, 저 안에 뭔가가 떨어지나요?
운영 대시보드에는 “오, 여기 임차인들 사이의 경계를 넘으려는 시도가 있었어.” 라고 적혀 있습니다.그게 맞는지 알고 싶어요
제 환경에서 일어나는 일이에요.경계를 넘으려는 모든 것은 거절당하더라도
무슨 일이 벌어지고 있다는 뜻이야누군가 시스템을 망가뜨리기 위해 뭔가 하려고 하는 걸지도 몰라요.그래서, 무슨 일인지 알고 싶어요.그리고 제가 말했죠.
이 운영 경험.네.자, 이제 이게 있어요.
멋진 운영 경험.어떻게 그냥 먹일 수 있을까요?
우리가 할 수 있는 만큼 많이?운영 경험이 예상대로 작동하고 있다는 것을 증명할 수 있는 테스트는 무엇이 있을까요?보세요, 이것은 다음의 일환으로
너랑 작전들이 뭔지네 작전이 잘 됐으면 이미 해냈잖아이걸 일종의 복합적인 것으로 보세요.모두에게 말씀드리고 싶은데요.
이것은 프로덕션만큼이나 개발자와 QA에도 가치가 있다는 것입니다.제품을 만들려고 할 때마다
시스템, 멀티 테넌트 시스템, 모두가 구축을 시도하고 모두가 무언가를 밀어붙이고 있습니다. 물론
새 제품이니까 고장났어요.제가 사용하고 싶은 도구는
개발 환경에서는 다음과 같은 도구가 있습니다.
왜 이런 일이 벌어지고 있는 거죠?왜냐면 난 아직 정리 중이니까
제 새 서비스가 다른 모든 서비스와 함께 무엇을 하고 있는지 보고 싶어요.그리고 QA 담당자로서 저는
이런 부하 문제를 시뮬레이션해서 실제로 효과가 있는지 확인해 보세요.
어떻게 해야 하는 걸까요?(참석자 기침) 네, 몇 가지 요점을 알려드릴게요.그게 분명해지길 바래요
레질리언스와 스케일에 대한 이야기는 단순히 규모와 레질리언스라는 전통적인 개념이 아닙니다.저에게 멀티테넌시는 완전히 새로운 계층을 더해준다고 생각합니다.
그 외에도 고려할 사항들이 있습니다.그래서 규모에 대해 생각할 때, 그리고 다음에 대해 생각할 때
솔루션의 복원력, 멀티 테넌트가 무엇인지에 대해 반드시 생각해야 합니다.
이 이야기의 일종이고 새로운 점은 무엇인가요?
생각해 봐야 할 것 같은데요?효율성과 규모가 항상 경쟁 관계에 있을 것으로 예상됩니다.
여기서 서로 만나세요.왜냐면 그들은 항상
서로를 끌어당기죠.최대한 효율적으로 일하고 싶어요.모두에게 건물을 지으라고 했잖아요
좋은 효율적인 환경이긴 하지만, 항상 그래요,
하지만 합리적인 범위 내에서 확장할 수 있습니다.운영 중단이 발생하지 않았는지, 시스템 요구 사항을 충족하는 방식으로 규모를 확장하고 있지 않은지 확인할 수 있는 여유를 마련하고 싶습니다.다시 말씀드리지만, SaaS에는 모든 것이 혼합되어 있습니다.
비즈니스와 기술이 공존하지만 규모가 가장 중요합니다.누군가 확장 가능한 SaaS 환경을 구축하라고 한다면, 그 환경을 구축하는 올바른 방법은 무엇일까요?그럼, 배포란 무엇인지 말씀드릴게요.
모델을 가지고 계실 건가요?무슨 짓을 하는지 알아내기 위해 뭘 하길 바라는지 백 가지 질문을 할게요
스케일 버전이 맞아요.그러니 몸을 기울여야 합니다.
올바른 해답을 찾으려면 여기서 비즈니스에 집중하세요.그런 다음, 다른 제품을 어떻게 사용할 수 있는지 살펴봐야 할 것 같아요.
규모 및 복원력 도구를 위한 배포 전략.이러한 환경을 어떻게 배포하고 실행하여 이를 실제로 증명할 수 있을지 궁금합니다.
이런 것들이 효과가 있나요?그리고 분명히, 제게는
스로틀링은 단순한 계층화 전략이 아니라 스로틀링도 마찬가지입니다.
멀티테넌트 환경에서의 기본적인 전략일 뿐입니다.속도를 조절해서 아무도 강요하지 않는지 확인하고 싶어요.
과부하 환경은 제 환경에 영향을 미칠 거예요그리고 꼭 빌드하세요.
흥미로운 워크로드 프로필워크로드가 무엇인지 파악하세요.
사용자 환경의 패턴.지금 하고 있는 일에 관해선 별로 흥미롭지 않은 것 같네요.하지만 만약 여러분이 시간을 투자한다면
이러한 워크로드를 자극하고 실제 상황을 파악하는 것이죠.
흥미로운 페르소나, 제품 소유자를 찾아보고
다른 사람들이 여기에 투자했다면 여러분의 체중계에 입력할 아주 흥미로운 데이터를 얻게 될 것입니다.
그리고 레질리언스 비트.그리고 꼭,
이 모든 것을 나중에 생각하듯 검증하지 마세요.당장 만들어 보려 할 거예요.거의 테스트 기반 같아요.
개발 같은 거요정말 멋진 걸 만들었어요. 정말 멋진 일을 할 수 있을 거예요.그걸 어떻게 스스로 증명할 수 있을까요?
그거 멋진가요?그리고 여기서 너무 과하게 굴지는 마세요. 하지만 적어도 충분히 하세요
펀더멘털이 원래 해야 할 일을 하고 있다는 것을 스스로에게 증명하기 위해서죠.좋아요.자, 이제 다른 세션에 대한 몇 가지 하이라이트를 말씀드리겠습니다.그 중 일부는 제 생각에는
이들 중 하나도 없는데...어떤 일이 있었는지 모르겠어요
아직, 어느 쪽이 아닌지.이 시점에선 모든 게 흐릿해요.하지만 다음과 관련된 브레이크아웃은 다음과 같습니다.
현재 진행 중인 SaaS.관심이 있으시다면, 몇 가지 초크 토크를 드리겠습니다.
아직 진행 중이에요.아이덴티티 페더레이션은 흥미로워요.카오스 토크가 있는데, 이건 변종이에요.
더 깊이 들어가고 싶으시다면 제가 여기서 말씀드린 내용입니다.하지만 초크 토크에 참여하세요
설정.제가 할게요. 그리고 이 검증 및 테스트의 일부에 대해 좀 더 자세히 알아보도록 하겠습니다.훌륭한 워크샵이 있습니다.이 SaaS 생존자 저는
운영과 이 모든 것을 테스트하는 것이 정말 멋지다고 생각해요.
운영 도구 등등.그게 전부입니다.음, 정말 고마워요
이 세션에 참석해 주셔서많은 가치를 얻으셨으면 좋겠습니다.이 글을 통해 어떤 것들이 필요한지 전반적으로 이해할 수 있었으면 좋겠습니다.
확장성과 복원력에 대해 생각할 때를 생각해 보세요.
멀티테넌트 환경.잘 어울리길 바랍니다.
여러분에게 줄 수 있는 처방적 도구는
좀 더 구체적이죠.하지만 남은 시간도 즐겁게 보내세요
다시 발명하고 좋은 하루 보내세요.(참석자들이 박수를 치는 소리)