[음악] 먼저, 현재 우리가 만나고 있는 토지의 전통적인 소유주들, 에오라 (Eora) 의 초보 민족에 대한 감사의 말을 전합니다. 장로님들의 과거, 현재, 그리고 오늘 세션에 오신 것을 환영합니다. 대규모 복원력 있는 아키텍처에 오신 것을 환영합니다. Amazon.com에서 302건의 실제 사용 사례 제 이름은 Eigor입니다. 저는 AWS의 수석 기술자입니다. 저는 회사에서 4년 넘게 근무했습니다. 몇 년이 지난 지금, AWS에 합류한 이후로 저는 대기업이 사명을 배포할 때 복원력 문제와 절충점을 극복하도록 돕고 있습니다.AWS의 중요 애플리케이션: 오늘 제 동료 Rovan Rovan이 합류하게 되어 매우 기쁩니다. 오늘 C EO에 대해 공동 발표하게 되어 매우 기쁩니다. 안녕하세요. 여러분 안녕하세요. 제 이름은 Roven입니다. 저는 AWS에서 거의 8년 동안 일해 왔으며, AWS에서 가장 안전하고 탄력적인 방식으로 워크로드를 실행할 수 있도록 고객과 협력하고 있습니다. Amazon은 여러분 중 많은 분들과 마찬가지로 저희 고객 중 하나입니다. 이곳 사무실과 우리는 고객과 긴밀하게 협력하여 고객이 워크로드를 실행하고 일상적인 운영도 확장할 수 있도록 합니다.대규모 이벤트 기간 동안 확장 가능하고 가용성이 높은 워크로드를 유지할 수 있도록 여러 Amazon 제품에 대해 몇 가지 예제를 작성했습니다. 따라서 이러한 팀이 보유한 기능을 유지하기 위해 복원력 관점에서 무엇을 했는지 알 수 있도록 멋지게 시작하겠습니다. 실제로 Amazon은 어떻게 X를 수행하는지 자주 묻는 질문을 많이 받습니다. 몇 가지 예를 통해 영감을 주고 싶습니다. 몇 가지 용어부터 시작하겠습니다. 복원력에 대한 몇 가지 용어와 레벨 레벨 설정부터 시작하겠습니다. 간단히 말해서 레질리언스는 애플리케이션 또는 워크로드의 기능을 말합니다.생활 속에서 발생할 수 있는 비정상적인 부하, 크래시, 사용자로부터 오는 독약 등 다양한 것들을 흡수하기 위해, 회복, 그리고 무엇보다 중요한 것은 앱이 제대로 작동할 수 있어야 한다는 것입니다. 즉, 고객에게 비즈니스 가치를 제공해야 합니다. 타이틀의 두 번째 부분은 대규모이기 때문에 애플리케이션을 디자인할 때 보통 어느 정도의 예상 부하를 위해 빌드하지만, 이상적으로는 비즈니스가 성장함에 따라, 또는 원하는 시장에서 벌어지고 있는 일 때문에 전례 없는 급증이 벌어졌습니다.애플리케이션을 계속 사용할 수 있는 위치에 있다는 것을 증명하는 가장 좋은 방법은 Amazon의 Prime Day에서 나온 몇 가지 수치를 살펴보는 것입니다. Amazon.com을 뒷받침하는 AWS 서비스 덕분에 이 엄청난 수치가 가능해졌습니다. sqs에서 초당 수백만 건의 요청, 그 모든 Aurora에 대한 수십억 건의 쿼리, 이 모든 것이 현실이 되었습니다. 바로 여기 청중 앞에서 질문을 하고 계실 것입니다. Amazon.com이 아니에요. 왜 우리가 귀찮게 할까요? Amazon.com과 같은 규모에는 절대 미치지 못할 거예요.오늘 세션에서 배운 내용은 규모에 관계없이 비즈니스에 적용할 수 있습니다. 다음으로 말씀드리고 싶은 것은 바로 AWS 서비스가 대규모 복원력을 달성하도록 도와준다는 것입니다. 따라서 X에 맞게 설계할 때 이 x를 훨씬 초과하더라도 애플리케이션이 계속 작동할 수 있도록 합니다. 우리는 겸손하게 시작했으며 1994년에 단 두 대의 서버로 시작했습니다. 현재 화면에 표시되는 내용은 앞면은 axon이라는 내부 시스템의 스크린샷입니다. 각 점은 a를 나타냅니다.마이크로서비스와 어, 수만 개에 달하는 마이크로서비스가 있는데, 왜 이 기능이 Amazon.com이 대규모로 복원력을 유지하는 데 어떻게 도움이 되는지에 대한 실제 예를 들어보겠습니다. Seeing은 믿고 있는 실제 예를 들어보겠습니다. 이 페이지를 본 적이 있을 것입니다. 이 페이지를 살펴보려면 이 페이지를 세부 정보 페이지라고 부릅니다. 브라우저 개발 도구를 실행하면 모두 할 수 있습니다. 이 페이지를 렌더링하기 위해 많은 호출이 발생하고 있다는 것을 어느 정도 알 수 있습니다. 그래서 이러한 호출이 진행됩니다.음, 우리가 위젯이라고 부르는 것은 근본적으로 이러한 마이크로서비스의 인스턴스가 각각 매우 뚜렷한 목적을 가지고 있다는 것입니다. 하나는 페이지에 제목을 가져오고, 다른 하나는 별점을 가져오고, 다른 하나는 이미지를 가져옵니다. 그래서 이제 복원력에 관한 주제로 넘어가겠습니다. 그 중 한 명 또는 일부가 여전히 거래할 수 있는 타이틀이나 가격이 아닌 한, 여전히 확인해 볼 수 있습니다. 구매했지만 사용자 경험이 다소 저하되었으므로 이를 그레이스풀 디그라데이션이라고 합니다. 체류를 유지하는 데 있어 매우 기본적입니다.[음악] amazon.com과 같은 규모로 복원력이 뛰어납니다. 규모에 대해 말하자면, 이러한 마이크로서비스 또는 위젯은 각각 독립적으로 확장됩니다. 따라서 예를 들어 이 서비스를 소유한 팀이 성능 프로필을 변경하는 새로운 변경 사항을 출시하거나 갑자기 어떤 성격의 급증 또는 잘못된 배포가 발생하는 경우 다른 것과는 독립적으로 확장할 수 있으므로 부하를 흡수하므로 Amazon.com을 뒷받침하는 이 간단한 마이크로서비스 기반 아키텍처를 예로 들겠습니다. 조금 더 복잡한 다음 주제로 넘어가겠습니다.좀 더 흥미로워요. 손을 보여드리고 싶네요. 무소음 디스코 셋업에서 정말 까다롭다는 건 알지만 여기 청중들 중에 셀 기반 아키텍처를 듣거나 다룬 분이 계신 분, 여기 계신 분들, 여기 셀 기반 아키텍처의 개념을 소개한 다음 Prime Video와 Amazon Music이 이 아키텍처 패턴을 사용하여 대규모로 복원력을 달성하는 방법에 대해 이야기해 보겠습니다. 여러분 모두 전통적인 스케일에 익숙할 것입니다. 아웃아웃 접근 방식: 사용자 수를 줄이거나 작업자 수를 늘리고 규모를 확장하고이제 무슨 일이 생기면, 예를 들어 사용자 중 한 명이 항상 고양이일 때 고양이가 독약을 밀어붙인다거나 작업자 중 한 명이 추락하는 사고가 발생해서 계속 그렇게 하면 결국 전체 함대를 쓰러뜨릴 가능성이 있습니다. 그리고 종종 그가 충분히 빨리 함대를 복구하지 못하는 한, 다음에 일어날 일은 모든 고객 기반에 영향을 미치기 때문에 마지막 요율은 이 이벤트는 전체 고객 기반이기 때문에 문제를 잘 해결하는 방법 중 하나는 직원을 그룹으로 나누는 것입니다.이 예를 들어 두 그룹으로 나누고 두 그룹을 쌍으로 나누고 동일한 이벤트가 갑자기 다시 발생하면 해당 셀에 고정되거나 라우팅된 사용자만 이 셀에 고정되거나 라우팅되고 이를 실제로 셀이라고 합니다. 따라서 나머지 고객은 계속 작업을 수행하므로 폭발 반경을 줄였습니다. 이제 한 가지 꼭 말씀드리고 싶은 것이 있습니다. 피닝 또는 라우팅에 대해 말씀드렸는데 필요한 것이 있습니다. 여러분의 요청을 그 셀로 라우팅하기 위해서요. 그리고 이건 셀 라우터이고 제가 몇 가지 예를 드리죠.예를 들어, 이를 구현할 수 있는 방법은 최고 수준의 복원력으로 구축되어야 하기 때문입니다. 왜냐하면 생각해 보면 다운되면 아무것도 라우팅할 수 없기 때문입니다. 두 번째로 중요한 것은 제가 아무 말도 하지 않을 때 세포는 아무 것도 공유하지 않아야 한다는 것입니다. 상태가 있으면 공유할 수 없기 때문입니다. 생각해보면 세포가 서로 종속되어 있으면 연쇄적인 실패에 직면할 수 있다는 뜻입니다. 다른 말로 표현하자면, 세포가 기능을 할 수 있다면 한 세포가 역할을 할 수 있어야 합니다.이제 두 번째와 세 번째 회사도 이러한 지식을 바탕으로 이 지식을 바탕으로 Amazon과 Prime, Video 및 Music이라는 두 비즈니스에 대해 이야기해 보겠습니다. 그리고 이 아키텍처 패러다임을 구현하여 대규모로 복원력을 높이고 또 다른 비즈니스 과제를 해결한 방법에 대해 이야기해 보겠습니다. 이 두 가지 경우에는 실제로 상당히 다릅니다. 여기서 이야기할 두 시스템은 실시간 텔레타임으로 인제스트하는 것과 비슷한 문제를 다루고 있습니다. 동영상 시청 시 um 사용자 또는 기기를 통한 측정CDN 하이드레이션 등에 관한 결정을 내리는 데 도움이 되는 실시간 텔레메트리 피드가 돌아왔습니다. 궁극적으로는 특정 E2 인스턴스 유형에서 실행 중인 지역이 약간 과열되었을 때 다른 R 지역으로 번딩할 수 있어야 했던 사용성을 개선했습니다. 그들은 단 하나의 메시지도 삭제하지 않고 이 작업을 수행하고자 했습니다. Amazon Music의 비즈니스 과제는 조금 달랐고, 다양한 디바이스에서 발생하는 실시간 수집도 처리합니다. 음악 앱인 iOS, 안드로이드, 음, 알렉시스 등을 사용하고 있습니다.노이즈 이웃 (Noisy Neighbor) 상황을 해결해야 했습니다. 중요도에 따라 서로 다른 장치 유형과 다른 메시지 유형이 수집 프로세스에 영향을 미치지 않도록 해야 했습니다. 그래서 그들이 내려야 하는 결정의 형태로 그들이 채택한 솔루션에 대해 이야기해 봅시다. 음, 둘 다 실제로 사용되는 셀 기반 아키텍처의 예이기 때문에 Um Prime Engineers가 물었던 첫 번째 질문은 AAL 기반 영역을 셀로 분할하는 방법에 대한 해답입니다. 간단했습니다. 주어진 영역에서 사용 가능한 모든 가용 영역을 포괄하는 셀을 만들 수 있습니다.지역 (region) 을 수평으로 나누겠습니다. 왜 그렇게 잘 해야 할까요? 답은 아키텍처에서 지역 서비스를 사용했기 때문입니다. 예를 들어 ec2 같은 영역 서비스를 사용하는 경우 um, 그리고 그들이 의존했던 지역 서비스는 Lambda였습니다. (예: 영역 서비스만 사용하는 경우) 수직으로 슬라이싱을 생성하거나 az에 정렬된 셀을 생성하거나 A를 세분화하는 방법을 살펴볼 수 있습니다. 휴대전화에 방금 두 가지 중요한 용어 (지역, 구역, 거기 글로벌) 를 사용했습니다. 휴대폰을 가져가시는 것이 좋습니다.QR 코드를 스캔해 보세요. 모든 레질리언스 전문가와 실무자가 읽고 내면화하는 데 기본적으로 필요한 백서가 있습니다. 장애 격리 경계 백서에는 이러한 개념과 몇 가지에 대해 설명합니다. 따라서 Prime 비디오에서 내려야 했던 두 번째 결정은 라우팅 로직에 관한 것이었습니다. 서비스는 라우팅 요청에 사용할 접근 방식을 사용하고, Route 53을 사용하기로 선택한 경우 라운드가 있는 첫 번째 레이어는 라운드가 있는 Route 53의 두 레이어를 사용하기로 결정했습니다. 사용 중인 Zone 정렬 um 라우트 3 Zone으로 라우팅하는 로빈 로직GE 근접 라우팅 (GE 근접 라우팅) 은 셀 중 하나가 다른 지역으로 파열될 때 발생하는 비즈니스 문제를 정확히 해결하고 목적에 부합한다고 생각한다면, 이제 가장 가까운 지역으로 라우팅하고 싶을 것입니다. 부트스트래핑이 아직 부트스트래핑을 완료하지 않았거나 어떤 이유로든 상태가 좋지 않은 셀에는 물건을 라우팅하고 싶지 않습니다. 그래서 그들은 다음과 같은 조합으로 상태 검사를 고안해야 했습니다. 어, 로드 밸런서에 2, 200개가 아닌 이벤트의 수가 있는데, 여기에는 몇 가지 심층적인 상태 검사가 포함됩니다.특정 건강 엔드포인트를 위해 발명하고 이를 클라우드 워치 알람으로 포장하고 그 알람을 기반으로 r 53 상태 검사를 만들었습니다. 아주 단순하고 우아하며 작동합니다. 작품에 대해 말하자면, 4년 동안 측정했을 때 5 NES 이상의 가용성을 달성할 수 있었습니다. 음, 계산은 매우 간단합니다. 얼마나 많은 이벤트가 있었는지 빼고 그 수를 빼고 계산이 매우 간단합니다. 삭제한 이벤트를 총 이벤트 수로 나눈 다음 Amazon Music으로 넘어가겠습니다. Amazon Music은 좀 더 복잡했습니다.라우팅에 대한 요구 사항 앞서 말씀드렸듯이 이 회사는 다양한 디바이스 종류와 다양한 이벤트 유형을 다루고 있었기 때문에 일부 코드를 잘라낼 수밖에 없었고 ECS Fargate에 넣었습니다. 그리고 해당 코드의 복원력을 최대한 높이기 위해 코드 자체에 로직을 코드화했습니다. 추가 종속성이 발생하지 않도록 말이죠. 이제 파게이트 옆에 있는 라우터는 라우팅 로직이 두 배로 확장되었습니다. 기기 유형 (iOS, Android 등) 을 기반으로 한 슈퍼셀이고, 두 번째 슈퍼셀은 이벤트 유형 (일부 이벤트) 을 기반으로 합니다.다른 것들보다 더 중요하고, 시끄러운 이웃 상황에서 궁극적으로 해결해야 했던 세 번째 과제는 스케일 인 및 스케일 아웃을 관리하는 방법입니다. 때로는 최고점이 있을 때도 있기 때문입니다. 넓게 말하면 세포가 숨을 들이쉬고 내쉬도록 하는 두 가지 접근 방식이 있습니다. 두 가지 접근 방식이 있습니다. 두 가지 접근 방식이 있습니다. 후자의 경로로 이동하기 위해 선택한 크기가 동일한 새 세포를 제거하여 모두 동일합니다. 필요 없을 때 없애버리죠. 그러니까 이게 전체적인 아키텍처인 것 같은데 음,제 이야기를 요약하자면, Amazon의 두 기업 모두 Sol을 위해 s 기반 아키텍처를 사용했다는 것입니다. 둘 다 아키텍처에서 Sol을 위해 S 기반 아키텍처를 사용했다는 것입니다. 둘 다 셀 기반 아키텍처를 통해 대규모 가용성과 복원력을 달성할 수 있었을 뿐만 아니라 더 심층적인 비즈니스 문제도 해결할 수 있었습니다. 이 메모에서 링이 여러분에게 해준 몇 가지 놀라운 일에 대해 이야기하려고 합니다. 고마워요, Eagle은 우리의 전설이 아니에요. 괜찮습니다. 이제 Amazon 웹 사이트, 프라임 비디오 및 음악에 대해 알아 보겠습니다. 이제 링에 대해 이야기 할 차례입니다.ring은 매우 흥미로운 사용 사례를 가지고 있기 때문에 6박 이상의 가용성을 유지하면서 초당 13만 건 이상의 요청을 처리할 수 있는 이벤트 중심의 확장 가능한 아키텍처를 구축했습니다. 따라서 구현한 복원성 패턴을 살펴보기 전에 먼저 씬을 살펴보겠습니다. 링이란 무엇이고 아키텍처의 핵심 요소는 무엇인지, 그리고 이전에 Ring을 접하지 못했다면 u에 설치해야 할 카메라와 초인종 세트입니다. 집에서 누군가 벨을 울리거나 문 앞에서 전화를 걸면 휴대폰으로 알림을 받게 됩니다.예를 들어 진입로에서 무슨 일이 있었는지 확인하실 수 있을 거예요. 죄송해요. 제가 실제로 그렇게 링링하는 아키텍처라는 것을 몰랐어요. 제가 지적하고 싶은 핵심 사항 중 하나는 트랜스코더 서비스입니다. 그래서 여기 있는 트랜스코더 서비스는 이런 비디오를 트랜스코딩하기 위해 설계되었습니다. 그래서 이전 슬라이드에서 보셨던 빨간 자동차와 함께 보신 이미지는 실제로 비디오의 스크린샷입니다. 이 행 영상을 찍는 카메라가 A3 버킷에 넣고 est3 버킷에 도착하면 sqsqq 요청을 넣는 알림을 시작합니다.저기에는 트랜스코더 서비스를 실행하고 큐를 실행해서 비디오를 트랜스코딩한 후 저기 있는 마지막 세 개의 S3 버킷에 넣는 ec2가 있습니다. 이것이 제 화면에 보이는 내용입니다. 다른 제품이나 서비스를 확장해야 할 때 벨이 울립니다. 예를 들어 아마존 웹사이트와 같은 다른 아마존 제품을 보면, 주로 프라임 데이나 크리스마스 케일 등에 대규모 이벤트가 있습니다. 좀 다르죠. 비디오 트랜스코딩을 하기 때문이죠. 그럼 어 링, 알았어요.할로윈은 재미있네요. 아이들이 돌아다니면서 어, 트릭 앤 트릿 (Trick and Treat) 을 받고 문을 두드리려고 하면 휴대폰으로 모션 감지를 트리거하는 알림과 경고를 받게 됩니다. 따라서 링 팀은 할로윈이나 크리스마스 같은 이벤트 기간 동안 크기를 조정할 수 있어야 합니다. 패키지 등을 받는 동안 이 모든 비디오를 트랜스코딩하여 가능한 한 빨리 소비자에게 보내세요. 그러니 어떻게 확장되는지 봅시다. 아키텍처 및 링 팀은 Cloudwatch를 사용하여 SNS q의 큐를 모니터링하고 메트릭을 모니터링합니다.빈 수신기를 호출하고 빈 수신기에 관한 것인데, 빈 수신기가 많으면 아마도 우리가 초과 프로비저닝했다는 표시를 줄 수 있습니다. 하지만 작업이 많고 주변에 빈 수신기가 충분하지 않다면 대기열을 백업하고 확장해야 했기 때문일 수 있습니다. 그래서 링 (ring) 메트릭과 다른 Priory 메트릭을 가져와서 단계 함수에 넣으면 단계 함수가 상태 머신은 이 모든 메트릭을 기반으로 언제 규모를 늘릴지 축소할지 결정합니다. 또 다른 점은 링 팀이 정말 대단한 일이었죠.이 서비스들이 서로 통신하고 구성 요소가 서로 통신하고 지연 시간을 최소한으로 줄일 수 있기를 원했기 때문에 이벤트 기반 아키텍처를 구축했습니다. 이벤트 기반 아키텍처란 카메라가 이벤트를 녹화한 경우 움직임 감지 이벤트, 초인종 또는 집 앞에서 누군가가 움직여서 이 이벤트를 알림 서비스로 보내면 알림 서비스가 알림을 보내서 알림을 제 휴대폰으로 푸시합니다. 누군가가 당신의 문을 울리고 있다는 것을 말해주기 때문에 소비자로서 나는 이것을 알고 싶습니다.거의 실시간으로 발생하자마자 레이턴시를 줄이는 것이 매우 중요합니다. 그러니까 아키텍처 관점에서 볼 때 링 팀은 스트리밍 이벤트 버스 또는 제가 SIP라고 부르는 것은 멀티티어 아키텍처이므로 걱정하지 마세요. 다이어그램에서는 약간 바빠서 티어 넘버 1부터 시작하겠습니다. 이것이 API 레이어이고 API 레이어에서 거기에서 인증이 일어나고 있는데 이 어 레이어가 하는 두 번째 주요 일은 라우팅과 관련된 논리를 수행한다는 것입니다.그래서 이 주제를 두 번째 계층으로 보낼 셀을 결정합니다. 두 번째 계층에는 처리 계층과 처리 계층이 있습니다. 각 셀에는 Apache Kafka가 있고 Apache capka에는 스트립이 거의 없고 이벤트 스트리밍 기능이 거의 없습니다. 세 번째 계층은 소비자 프록시이므로 팀은 CFA를 직접 가져올 수 있는 액세스 권한을 부여하지 않고도 최대한 많은 소비자에게 배포하여 아키텍처를 확장하고자 했습니다. 그들은 이 소비자 프록시 계층을 만들어 소비자 대신 카프카를 끌어오도록 했습니다.그런 다음 직접 API 호출 또는 ssq로 이벤트를 제공하므로 전체 다이어그램으로 돌아가서 SE는 다중 셀 다중 계층 아키텍처입니다. 어 단계 팀이 모든 셀과 te를 서로 다른 계정으로 나눈 것을 볼 수 있습니다. 계정은 화면의 분홍색 상자이고, 이제 이 분할을 한 이유는 관리 용이성과 폭발 반경 때문입니다. 이제 다이어그램과 방법을 이해하셨을 것입니다. 이를 구축하는 동안 99.999% 의 높은 가용성을 유지하기 위해 적용하는 레질리언스 원칙이 무엇인지에 대해 이야기해 보겠습니다.초당 130개 이상의 요청을 처리하므로 첫 번째는 셀 기반 아키텍처입니다. 따라서 링 팀은 sip를 셀 기반 아키텍처로 구축하고 셀 기반 아키텍처의 특징은 폭발 반경입니다. 항상 수천 개의 이벤트가 발생하고 셀 1과 셀 2가 있는 셀로 라우팅됩니다. 문제가 있고 셀 중 하나가 다운되면 나머지 절반은 계속 영향을 받습니다. 트링 팀이 세포 기지 상단에서 수행한 작업을 수정하여 남은 건강한 세포에서 서비스를 받을 수 있습니다.아키텍처는 셀의 작동이 중지되면 두 번째 셀을 확장하여 모든 이벤트를 수용하고 요청을 처리할 수 있도록 합니다. 따라서 확장 가능한 셀 기반 아키텍처의 이점을 활용하고 셀 중 하나에 모든 요청을 처리하는 데 문제가 있는 경우 나머지 셀을 확장할 수 있습니다. 두 번째 원칙은 풀백 셀입니다. 여기서 볼 수 있는 질문은 셀 1과 셀 2가 구부러집니다. 당신의 얼굴은 이것이 어떻게 가능한지, 마치 우리가 셀 기반 아키텍처에 대해 이야기해왔는데, 그건 잘못이라는 거죠.격리 경계: 한 셀에서 어떤 일이 발생하더라도 다른 셀에 영향을 주지 않아야 합니다. 따라서 아래에 두 개의 셀이 있는 이유는 실제로 발생하고 이를 상관 실패라고 합니다. 따라서 여러 셀에 걸쳐 있는 서비스에 문제나 문제가 있는 경우 상관 장애란 무엇입니까? 예를 들어 Kafka를 예로 들어 보겠습니다. 그러면 AWS 팀이 가서 업데이트를 수행하거나 새 스택을 출시했을 수도 있습니다. Kafka의 경우 이로 인해 한 지역에서 서비스에 문제가 발생했습니다. 따라서 대부분의 고객이 볼 수 있는 것과팀이 그래요. 미국 동부에 문제가 생기면 우리 서부로 가거나 시드니 지역에서 문제가 생기면 멜번 지역으로 가는데 이건 정말 맞아요. 하지만 링 팀은 이 루트를 따르지 않았어요. 거기서 한 일은 폴백 셀이라는 세 번째 셀을 만들었고 이 셀과 다른 점은 스택에 카프카가 없다는 것입니다. 세 번째는 SNS와 sqs가 있기 때문에 링 팀은 Kafka 대신 SNS와 sqs를 사용하여 스트리밍 처리를 수행합니다. 네, 그렇지 않다는 것을 알고 있습니다.카프카만큼 효율적이긴 하지만 그렇게 함으로써 그들은 색깔이 있는 고장을 피하고 AB 능력을 유지할 수 있습니다. 서킷 브레이커는 서킷 브레이커이므로 서킷 브레이커는 회로가 닫혀 있으면 모든 것이 정상입니다. 라이트 스위치로 생각하면 회로에 있는 라이트가 닫혀 있으면 트래픽이 잘 흐르고 회로가 닫히면 문제가 없고 요청을 처리할 수 있습니다. 하지만 오류를 받기 시작했다고 가정해 봅시다. 한 세포의 임계값을 초과해서 건강에 해로워지기 시작해서 회로를 열었고트래픽과 요청은 나머지 정상 셀에 반응합니다. 가끔 두 번째 셀에서도 오류가 발생하기 시작하면 회로를 열면 두 번째 셀도 이제 비정상입니다. 그래서 무슨 일이 있었는지, 주제와 이벤트가 모두 폴백 셀에 반응하여 복원력을 한 층 더 높여줍니다. 회로가 열리면 절반으로 넘어갑니다. 열려 있으면 세포가 건강에 안 좋으면 반쯤 열린 상태가 되고 반쯤 열린 상태에서는 어떻게 되나요?셀에 가끔 요청을 보내려고 시도하고, 셀이 요청을 처리하기 시작하면 상태를 재평가한 다음 회로를 닫으면 요청을 처리하는 정상 셀이 됩니다. 따라서 링 스택이 전 세계 8개 지역에 배포되고 이 8개 지역의 총 요청 수가 초당 300,000개 이상입니다. 3일 동안 이 8개 지역을 세분화하면 이러한 지역 중 일부가 단순히 69를 달성한 것이 아니라는 것을 알 수 있습니다. 100% 가용성이 필요했습니다. 링 팀이 모든 것을 구현했기 때문입니다.복원력 P 관행은 셀 기반 아키텍처, 회로 차단기 (Circuit Breaker) 와 폴백 (fallback) 에서 나온 것으로 알고 있습니다. 이 두 지역은 전 세계 8개 지역 중 링이 배포된 가장 큰 두 지역입니다. 여기 호주에는 시드니 지역과 음부르 지역 두 지역이 있습니다. 따라서 이러한 원칙을 이해하고 이 두 지역에 구현하십시오. 그리고 제가 지적하고 싶은 것은 오클랜드 지역은 멀리 떨어져 있다는 것입니다. 아마존 제품 전반에 걸쳐 공유한 사례를 통해 다음과 같은 영감을 얻을 수 있기를 바랍니다.가서 확장 가능하고 복원력이 뛰어난 아키텍처를 구축하십시오. 이 원칙은 모두 적용되므로 오늘 바로 구현해 보시기 바랍니다. 또 하나 지적하고 싶은 것은 AWS에서의 레질리언스 여정 내내 접하게 될 레질리언스 서비스와 프레임워크입니다. Ark 및 Resilienc와 같은 AWS Resiliency Hub Fault Injection Service 기술은 혁신을 가능하게 합니다. 하지만 실제로 가서 AWS에 가입하면 내일을 더 잘 구축할 수 있는 사람은 사람일까요? 스킬 빌더를 사용하면 7일 동안 사용할 수 있습니다.무료 체험판 게임입니다. 이 세션이 도움이 되었기를 바랍니다. 시간을 내주셔서 감사합니다. 궁금한 점이 있으면 밖에 앉아서 답변해 드리겠습니다. [음악]