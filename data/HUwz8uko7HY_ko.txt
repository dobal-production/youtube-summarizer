[줄리앙] 지난 몇 년 동안
클라우드는 빌더에게 기회를 제공했습니다.
글로벌 규모의 환경을 만들 수 있습니다.자동화는 기업의 접근 방식을 크게 변화시켰습니다.
증가하는 요구 사항을 지원하기 위한 IT 환경과 새로운 관행이 등장했습니다.
신뢰성을 위해.이 세션에서는 심층적으로 살펴볼 것입니다.
셀 기반 아키텍처라는 한 가지 아키텍처 주제를 다루겠습니다.아키텍처 프레젠테이션입니다.AWS의 여러 서비스
함께 사용할 예정이며 예상대로 사용할 예정입니다.
플랫폼의 핵심 원칙에 대한 기존 지식이 있어야 합니다.모든 서비스가 소개될 예정입니다.
추가 참조를 위해.그럼 소개해 보겠습니다.
예시 법인.운영하는 가짜 회사예요
사무실 건물의 제어 시스템.대규모 고객과 협력합니다.
전 세계에서 자원을 더 잘 활용하고 편의성을 개선하기 위해
직원들의 이야기죠.플랫폼은 데이터를 수집합니다.
엘리베이터, 에어컨 유닛에서
조명, 거울, 연기 감지기,
및 기타 여러 센서 및 장비.모니터링, 분석 기능을 제공합니다.
시설 팀을 위한 권장 사항, 경고
지상에서 말이죠.예시: 기업 고객
여러 대륙에 사무실을 운영하고 있으며 플랫폼을 통해 이용할 수 있습니다.
매 순간 그들의 부동산을 한 창으로 볼 수 있습니다.핵심 팀은 설계, 구현 및 운영합니다.
스마트 빌딩 플랫폼.DevOps 원칙을 채택했으며 애플리케이션이 설계되었습니다.
클라우드 네이티브 관행을 따릅니다.마이크로서비스 아키텍처는 쿠버네티스에서 호스팅됩니다.
아마존 엘라스틱 쿠버네티스 서비스의 오케스트레이션된 컨테이너
또는 EKS.서비스 간 통신
AWS 앱 메시의 서비스 메쉬를 통해 관리됩니다.애플리케이션 데이터가 저장됩니다.
Amazon DynamoDB를 사용하는 NoSQL 데이터 스토어에.이벤트 버스
서비스 간의 느슨한 결합을 허용합니다.
아마존 이벤트브리지와 함께.마지막으로, 서비스입니다.
Amazon ElastiCache Redis와 함께 캐싱 계층을 만드세요.애플리케이션이 배포되었습니다.
하나의 활성 지역이 있는 여러 가용 영역에
미국에서는, 유럽에는 한 개의 페일오버 지역이 있습니다.잘 설계된 AWS 리뷰
애플리케이션의 양은 정기적으로 이루어지며 시간이 흐르면
아직 해결해야 할 몇 가지 발견이 남아 있다고 핵심 팀은 확신합니다.
플랫폼의 안정성에 대해서요.이러한 확신은 최신 버전이라는 사실에 근거합니다.
애플리케이션의 버전이 제작 중입니다.
약 1 년 동안 좋은 실적을 가지고 있습니다.
경미한 사고만 포함한 가동 시간
그 기간 동안1월 2일에 현재 회부됨
팀은 “그날”이라고 불렀지만, 플랫폼을 경험했습니다.
치명적인 사건이었죠.이벤트 요약은 다음과 같습니다.
그날의 일이죠.그리고 모든 이벤트 시간
유럽 파리 시간과 마찬가지로 파리에 기록됩니다.애플리케이션은 잘 작동하며 팀은 국가를 볼 수 있습니다.
연말연시 이후 업무 복귀.유럽 이른 오후, 첫 고객들이
미국 동부 해안에서 하루를 시작하세요.
유럽 고객들이 점심을 먹고 돌아오는 동안오후 1시 37분에 첫 번째 알림이 울립니다.
플랫폼에서 올라갑니다.그리고 상황은 계속 악화되고 말았습니다.
오후 2시 15분에 미국 지역을 이용할 수 없게 될 때까지 팀은 페일오버를 진행했습니다.
오후 3시 12분에 온라인 상태가 된 EU 플랫폼으로 향했고 거의 즉시 경보가 시작되었고 플랫폼은
오후 3시 58분에 모든 고객의 작동이 중단되었습니다.그 후 팀은
프로그램을 진단하고, 전달하고, 배포하기 위해
긴급 패치, 그리고 마침내 플랫폼이 완성되었습니다.
오후 9시 29분에 다시 온라인 상태로 돌아왔고, 팀에서 확인한 결과
인증 서비스의 실제 근본 원인새 기능이 활성화되었습니다.
12월 5일에 신규 고객을 위해 인증 제어 기능이 추가되었습니다.
캠퍼스 수준에서.한 무리의 건물이죠.Example Corp의 건물 중 하나
전 세계 고객이 이러한 기능을 활성화했습니다.
미국 캠퍼스용기존 구독자로서 수정 사항이 적용되었습니다.
다음 청구 주기 (이 경우 1월 1일) 부터하지만 설날이라 사용자들은 접속만 했습니다.
1월 2일이었죠.활성화 시
이 기능의 플래그는 미국 사용자에게만 설정되었습니다.
플랫폼의 업데이트가 이루어지지 않았습니다.
EU 사용자의 경우사용자가 연결하면
이 플래그는 다른 코드 패스를 트리거합니다.
다른 사용자용.하지만 같은 고객의 경우 두 사용자가 모두 있었습니다.
깃발이 있는 것과 없는 것.값이 일치하지 않음
예외가 발생하여 캐시 새로 고침이 트리거되었습니다.
데이터베이스에서.또한 잘못된 조항도 있었습니다.
캐시 무효화 메커니즘에서 키만 지우는 것이 아니라 전체 캐시를 지웁니다.
이 고객을 위해서요.EU 및 미국 고객으로서
그 당시에도 여전히 활발히 활동하고 있었는데, 상황은 계속 반복되었죠.
그리고 또 반복해서 말이죠.이로 인해 대량의 볼륨이 생성되었습니다.
백엔드 시스템에서 동시에 많은 요청이 들어오면서 이렇게 급증했습니다.
“천둥 같은 집단 문제”입니다.그리고 백엔드 테이블
요청으로 어려움을 겪기 시작했어요.지연 시간이 급증했습니다.
그리고 서비스가 응답하지 않게 되었습니다.다운스트림 서비스 '
처음에는 회로 차단기가 오류를 관리했지만 캐시는 자체적으로 처리했습니다.
결국 사용 기한이 만료되고 결함은 연쇄적으로 발생했습니다.
전체 플랫폼으로플랫폼 시기
백업 지역에서 활성화된 후에도 동일한 사용자가 반복해서 사용하면서 동일한 동작이 다시 발생했습니다.
애플리케이션에서도 동일한 패턴.패치는 영향을 받은 키만 만료시켜 문제를 해결했습니다.
대상 고객 한 명에게 명령을 내렸습니다.증상이 해결되었습니다.
근본 원인은 아직 밝혀지지 않았지만,
그리고 결국 다음 날 해결되었습니다.회사에서 사용하는 예시
액티브 플랫폼을 사용한 액티브/패시브 패턴
미국 및 페일오버 패시브 플랫폼
EU에서 말이죠.이 패턴은 대부분의 데이터베이스 엔진에서 기본적으로 지원되므로 일반적으로 선택됩니다.
복제를 통해맨 위에는 고객이 있습니다.
그리고 맨 아래에는 환경과 데이터 소스가 있습니다.
이러한 고객을 위한 것입니다.이벤트 발생 시
활성 환경에서는 페일오버가 발생합니다.
그리고 얼마 후 Example Corp의 고객들은
애플리케이션을 계속 사용할 수 있습니다.페일오버 환경
처음에는 패시브 모드이므로 완전히 활성화해야 합니다.
트래픽을 처리하기 전이 패턴은 효과가 있지만
특히 페일오버와 관련된 몇 가지 단점이 있습니다.
및 활성화 프로세스.페일오버 환경의 경우
대부분의 서비스가 파일럿 라이트 모드에 있습니다.
최소한으로 축소되었으므로 확장하고 준비하는 데 시간이 걸립니다.
들어오는 부하를 수용하기 위해서요웜 스탠바이 상태인 경우
서비스가 이미 확장된 경우
트래픽에 바로 서비스를 제공할 준비가 되어 있는 상태에서는 활용되지 않는 부분이 많기 때문에 비용에 미치는 영향이 중요합니다.
인프라 운영.마지막으로, 초기 활성화입니다.
페일오버 플랫폼의 경우 실패 위험이 더 높습니다.
이전에 사용된 적이 없기 때문입니다.라는 개념입니다.
“조기 실패율”처럼요.플랫폼을 배포하는 또 다른 방법은 액티브/액티브 패턴을 사용하는 것입니다.
지역 간.이 모델에서는 예제 코퍼레이션이
각각 50% 의 고객에게 서비스를 제공하는 두 환경을 모두 활성화합니다.이 모델은 다음과 같은 문제를 해결합니다.
두 환경 모두와 마찬가지로 액티브/패시브 패턴의 핵심 관심사
확장되어 이미 활성화되어 있습니다. 그리고 사용하지 않은 양도
서버 용량이 제한되어 있습니다.이를 위해서는 대부분의 고려가 필요합니다.
기존 방식대로 데이터를 복제합니다.
올온/올오프 접근 방식 및 복제 프로세스
이 모델을 직접 다루지 마세요.이 모델에서는 환경에 문제가 발생할 때
운영 이벤트인 경우 플랫폼이 페일오버를 시작하지만, 이는 고객이 사용하는 경우에만 가능합니다.
이 환경에 있으며 고객을 이동시킵니다.
두 번째 환경으로두 번째 환경은
이미 활성 상태이고 트래픽을 처리하고 있는 이 고객들은 다시 시작할 수 있습니다.
액티브/패시브 모델보다 활동 속도가 빨라야 합니다.이 환경은
규모가 커질수록 더 중요한 부하가 발생합니다.
전체 트래픽을 처리하기 위해서죠.있을 수 있습니다.
신규 고객에게는 일시적인 성능 영향이 있지만 자동화 및 용량 계획은
이러한 영향을 완화할 수 있습니다.이전 예에서는 오류가 발생했습니다.
머신, 데이터베이스 등의 실행 환경에서
네트워크 구성 또는 기타 운영 이벤트로 이어진
플랫폼을 사용할 수 없게 되었습니다.1월 2일과 같은 이 예시에서는
Example Corp의 고객 행동이 문제의 원인이 됩니다.가장 큰 차이점은
이러한 고객 생성 이벤트의 경우 환경에서는
페일오버가 가능하고 근본 원인으로부터 격리될 수 있으므로 사용자는 플랫폼을 계속 사용하게 됩니다.
그러면 같은 문제가 발생할 수 있습니다.이 반복 패턴은
독약이라고 합니다.몇 가지 일반적인 사건
독약이라고 할 수 있는, 고객에게 영향을 미치는 것은 고객의 사용 패턴입니다.
다른 고객을 방해하는 것으로도 알려져 있습니다.
“시끄러운 이웃 문제”라고 불립니다.또는 서비스 거부 공격일 수도 있습니다.
다른 고객에게 영향을 미칠 수 있는 플랫폼 고객에 대해Corp의 고객을 예로 들어 보겠습니다.
EU 팀과 미국 팀 모두 참석하여 다음을 생성합니다.
심각한 장애 상태, 즉 독약
지정된 환경에서예상대로,
페일오버 프로세스가 시작되어 영향을 받은 고객을 이전합니다.
다른 환경으로거기까진
모든 것이 예상대로 작동하고 있습니다.하지만 EU와 미국 팀은
해당 고객 중 한 명은 여전히 연결되어 있고 활발히 활동하고 있습니다.
그리고 심각한 장애 상태가 반복됩니다.
페일오버 환경에서그 결과
이러한 연쇄적인 실패로 인해 플랫폼을 사용할 수 없게 됩니다.
모든 고객이 영향을 받습니다.플랫폼 자체가 구축되었습니다.
안정성을 유지하기 위해 실패를 피하려고 합니다.
기본 환경의 장애를 처리할 수 있습니다.하지만 베르너 보겔스의 말을 인용하자면, “실패는 당연한 것입니다.
결국에는 모든 것이 실패할 것입니다.”플랫폼은 진화해야 합니다.
장애 발생 시 더 잘 대처할 수 있도록
하지만 만약 그런 일이 일어나면 안 되죠.샤딩은 다음과 같은 패턴입니다.
모든 고객을 위한 단일 데이터베이스를 보유하는 대신 데이터가 저장됩니다.
격리되고 통일된 데이터 저장소 컬렉션에
샤드라고 합니다.고객이 생성되면
해당 고객의 데이터는 샤드 중 하나에 저장됩니다.
해당 샤드에 이미 있는 다른 고객과 함께 그룹화됩니다.신뢰성을 위해
고객 데이터는 하나 이상의 다른 샤드에 복제됩니다.각 고객의 데이터처럼
소수의 다른 고객 (예: 한 고객) 과 함께 저장됩니다.
앞서 경험한 Example Corp는 극소수에 불과합니다.
고객 수.이렇게 하면 폭발 반경이 줄어듭니다.
실패 횟수.어떤 샤드를 사용해야 하는지 알기
다양한 기법을 사용하여 고객을 저장할 수 있습니다.여기에 제시된 기법은
셔플 샤딩으로, 드로잉 카드처럼 샤드가 무작위로 할당됩니다.
뒤섞인 덱에서 말이죠.아래쪽에
세포 모음입니다.세포는 샤드의 개념을 확장합니다.몇 가지 경우가 있습니다.
데이터 저장소 샤드가 있는 전체 애플리케이션 및 모든 관련 데이터베이스
이를 통한 비즈니스 로직여기 모든 고객이 살고 있습니다.
서로 다른 셀에 호스팅되는 무작위로 배정된 샤드 두 개에그 다음은 복제 프로세스입니다.
안전을 위해 데이터를 동기화합니다.고객이 있을 때
플랫폼에 접속하면 자동으로 라우팅됩니다.
활성 환경을 호스팅하는 셀로
그리고 그 샤드.그 가능성을 최소화하거나 아예 피하는 것이 목표입니다.
두 고객이 동일한 기본 세포를 공유하는 경우Example Corp의 경우
셀 기반 플랫폼에서는 비호환성이 발생했습니다.
EU 및 미국 팀의 존재로 인한 트리거
실패 조건.밑에 있는 세포
접속할 수 없게 되고 고객은
해당 셀에서 활성 상태였던 사용자가 백업 셀로 페일오버됩니다.셔플드 샤딩 사용
세포는 어느 정도 이득을 얻죠.고객은 단 세 명이었는데, 이 세 고객은
첫 번째 셀에서는 영향을 받았는데 그 중 두 개만 페일오버를 경험했습니다.
세 번째 것은 패시브 샤드였기 때문이죠.그리고 지금은 호스팅이 되어 있습니다.
서로 다른 셀에 있으므로 스케일링 요구 사항
이러한 셀에는 활성 워크로드가 있고 각 셀에서 수신하므로 최소한으로 줄어듭니다.
추가 고객은 한 명뿐입니다.하지만 근본적인 문제는
페일오버로 수정되지 않았습니다.고객의 EU 및 미국 팀
아직 활동 중이며 트리거될 예정입니다.
페일오버 셀에서도 동일한 동작이 발생합니다.그러면 해당 셀을 사용할 수 없게 됩니다.페일오버 프로세스가 다시 시작되어 영향을 받은 고객을 이동시킵니다.
그 세포에서 벗어나 건강한 세포로.그 결과, 고객은
고장의 원인이 된 셀이 고갈되어 지금은 사용할 수 없습니다.
호스팅은 가능하지만 다른 고객은 이용할 수 없습니다.
부정적인 영향을 받습니다.각 고객에 대해,
해당 고객의 데이터를 호스팅할 샤드의 수는 무작위로 선택됩니다.
카드를 그리는 것과 마찬가지로 셀 목록에서
뒤섞인 덱에서 말이죠.한 명의 고객이 될 확률은
다른 고객과 동일한 샤드에서
독약으로 인해 고객에게 영향을 미치는 경우도 거의 같습니다.
똑같은 카드를 두 번 뽑는 것보다
무작위로 뒤섞인 덱에서 말이죠.조합에 반비례합니다.
개수 중 선택한 샤드 개수
사용 가능한 셀 수.통계적으로 볼 때, 8개의 세포
그리고 고객 한 명당 샤드 두 개, 고객 중 3.6% 에 불과합니다.
독약을 복용하면 심각한 손상을 입을 수 있습니다.
다른 고객이 생성했습니다.100개 셀로 확장되었습니다.
고객당 샤드 5개로, 1억 3천만 건 중 한 번은 공동 실패가 발생할 가능성이 있습니다.
일어날 수도 있겠죠.더 확장하면 호스팅용 서비스인 Amazon Route 53을 이용할 수 있습니다.
가용성이 100% 인 인터넷 도메인 이름
서비스 수준 계약에서는 셔플 샤딩을 사용합니다.2,048개 셀 포함
그리고 도메인 이름당 샤드가 네 개면 한 번 정도 됩니다.
7,300억 달러 중 도메인이 영향을 받았습니다.
다른 도메인을 손상시킬 것입니다.배치 알고리즘
셀 기반 아키텍처의 기본 구성 요소입니다.세포를 추적하고,
구성 및 고객 위치.컨텍스트를 인식할 수 있습니다.예를 들어,
호주에 거주하는 고객이 선호할 가능성이 높습니다.
첫 활성 셀은 시드니에 있었습니다.
프랭크퍼트와 오하이오가 아닌 싱가포르에서 페일오버가 이루어졌습니다.일부 다른 고객들
예를 들어 보다 구체적인 규정 준수 요구 사항이 있을 것입니다.배치 엔진
신뢰할 수 있어야 하고 서비스가 가능해야 합니다.
예를 들어 DynamoDB 글로벌 테이블, NoSQL 데이터 스토어,
또는 관계형 데이터베이스를 위한 Amazon Aurora 글로벌 데이터베이스
지연 시간이 짧은 글로벌 방식으로 이러한 목표를 달성할 수 있도록 지원합니다.일단 고객이 배치되면
휴대전화에서는 편리하고 투명하게 액세스할 수 있어야 합니다.
알 필요가 없는 그들의 환경
플랫폼 세부 정보.라우터는 핵심 구성 요소입니다.
플랫폼의 가용성 및 요구 사항
절대 그래서는 안 되는 높은 수준의 안정성
단일 실패 지점.셀에 연결하고 가용성을 확인해야 합니다.
고객을 효과적으로 라우팅하기 위해서죠.요구 사항
클라이언트에 부여되는 것은 재시도를 할 수 있는 능력입니다.
기본 플랫폼인 경우 정상적으로
페일오버됩니다.Route 53에는 많은 기능이 있습니다.
라우팅 레이어에 필요합니다.예를 들어, 고유한 도메인 이름
고객별로 할당할 수 있고, 적절한 셀로 라우팅할 수 있습니다.
상태 점검을 사용하여 모니터링한 다음 장애 조치 셀로 리디렉션하십시오.
필요한 경우API 기반 플랫폼의 경우
생성을 위한 관리형 서비스인 Amazon API Gateway는
API의 유지 관리 및 보안은 API를 게시하고 요청을 라우팅하는 데 사용할 수 있습니다.
해당 셀로 이동합니다.이제 고객들은
셀에 배포되어 라우팅이 가능합니다.
활성 셀에 데이터를 복제해야 합니다.
고가용성을 위해 다른 셀로 전송합니다.데이터베이스 복제 기술은 일부 요구 사항을 지원하지만 긴밀하게 결합될 수 있습니다.
셀 간.핵심 사례
셀 기반 아키텍처의 복제 엔진용
또는 다음을 사용한 데이터 기반 복제
하나의 데이터를 확장하는 스트리밍 기술
액티브 플랫폼에서 복제본까지다음과 같은 서비스
모든 수정 사항을 거의 실시간으로 제공하는 Amazon DynamoDB 스트림
데이터베이스의 경우 이러한 사용 사례를 지원합니다.우리는 사용할 것입니다.
이벤트 기반 복제, 여기서 기법
이벤트 소싱과 마찬가지로 한 셀에서 다른 셀로 변경 내용을 전파합니다.
아마존과 같은 저널/원장 기술 사용
양자 원장 데이터베이스.또는 이벤트 버스를 사용할 수도 있습니다.
예를 들어 이벤트브리지.예를 들어, 리스너 서비스는
완전관리형 서버리스인 AWS Lambda에서 호스팅됩니다.
컴퓨팅 플랫폼은 방출된 이벤트를 수신합니다.
소스 DynamoDB 스트림을 통해이러한 메시지를 라우팅합니다.
API를 통해 다른 셀의 적절한 엔드포인트로 이동합니다.
지속되어야 합니다.네 번째 구성 요소
셀 기반 아키텍처 중 마이그레이션 서비스가 있습니다.마이그레이션 서비스
고객 데이터를 투명하게 마이그레이션할 수 있습니다.
한 셀 세트에서 다른 셀 세트로.예제 코퍼레이션
고객을 위한 3단계 모델을 보유하고 있으며, 이를 통해 고객은 다음을 수행할 수 있습니다.
장비를 구성하고 대시보드에 액세스할 수 있습니다.
무료로 빠르게 기능을 사용할 수 있습니다.경제적인 이유로 3계층 고객은
제어가 제한적이며 셀에 저장됨
다른 많은 고객들과 마찬가지로 이 패턴을 초과 서브스크립션이라고 합니다.하지만 고객이 성장함에 따라
결국 계약을 체결하게 되면 더 많은 옵션이 필요하게 됩니다.
데이터 배치, 성능 및 안정성을 위해서죠.다음과 같은 옵션을 사용할 수 있습니다.
구성이 다른 다른 셀 집합에서는
예를 들어.그 후 고객이 고객 수를 넘어설 때
고객의 셀 용량에 따라 저장해야 할 수도 있습니다.
용량이 더 큰 다른 세포 세트에서
그들이 계속 성장할 수 있도록 말이죠.예제 코퍼레이션의 경우
운영 이벤트의 경우, 일단 고객이 책임을 져야 합니다.
해당 이벤트에 대한 모든 데이터가 확인되었습니다.
영향을 받은 다른 고객들도 마이그레이션될 수 있습니다.
건강한 세포로 돌아가서 꼭 확인하세요
애들한테는 영향이 없다는 거요마이그레이션 서비스
플랫폼이 완전한 운영 상태를 유지하도록 보장
애플리케이션, 고객 및 사용 사례가 변경될 때이러한 구성 요소 관리
수십 개 또는 수백 개의 셀을 사용하여 수동으로 업데이트할 수 있습니다.
순식간에 병목 현상이 발생합니다.컨트롤 플레인
플랫폼의 조종석입니다.생성을 제어합니다.
그리고 모든 셀을 구성하고, 다른 구성 요소들을 조종합니다.
대부분의 작업을 자동화합니다.컨트롤 플레인은 운영자에게 제공합니다.
이를 가능하게 하는 API 및 도구 세트
플랫폼 기반 고급 시나리오.예를 들어, 지속적 통합
배포 시 파이프라인은 컨트롤 플레인과 상호 작용하여 위치를 파악합니다.
소프트웨어를 안전하게 배포하기 위해서요그리고 A/B 테스팅은
통제된 환경에서 사용할 수 있습니다.AWS 플랫폼은 다음을 제공합니다.
광범위한 자동화 서비스.AWS 클라우드 개발 키트, 프로그래밍 가능 모델
코드형 인프라 또는 인프라인 AWS 클라우드포메이션용
코드 실행 엔진으로서 배포에 일반적으로 사용됩니다.
복합 서비스.AWS 코드 파이프라인
셀을 대상으로 프로그래밍할 수 있습니다.그리고 아마존 클라우드워치도
모니터링 및 관찰 요구 사항을 제공할 수 있습니다.
세포용.이 구성 요소들을 넣어봅시다.
상황에 맞게.첫 번째는 데이터 플레인이고
고객 데이터가 있는 곳.이 데이터 플레인에는 라우터가 포함되어 있습니다.
간단한 형식으로 표시된 모든 애플리케이션 셀과 복제 메커니즘
셀 사이.그런 다음 컨트롤 플레인
배치 정보를 보유하고 있으며 통합되어 있습니다.
모니터링 플랫폼은 셀을 배포하고 업데이트합니다.
마이그레이션을 제어합니다.Example Corp에는 파트너가 있습니다.
많은 고객과 해당 파트너에게 시설 서비스를 제공합니다.
중앙 집중식 대시보드가 필요합니다.하지만 이러한 고객들로서는
다른 셀에서 호스팅되므로 파트너가 쿼리를 실행해야 합니다.
여러 셀에서셀 기반 아키텍처에서는
셀은 서비스와 마찬가지로 서로 격리되어 있습니다.
마이크로서비스 아키텍처에서 서로 격리되어 있습니다.따라서 쿼리를 실행하는 것도
여러 데이터베이스에서는 전혀 문제가 되지 않습니다.일반적인 패턴입니다.
MapReduce 프레임워크와 비슷한 스캐터 게더링 방식을 사용하는 것입니다.
하둡과 같은 것을 활용하세요.서비스가 셀에 접속합니다.
외부 API에서 계산을 수행하도록 함
로컬에서 병렬로 결과를 전송합니다.
최종 집계를 수행하는 서비스로 돌아가기
중앙에서 말이죠.여러 셀에서 작동하는 서비스
일반적으로 세포 외부에 살며 세포와 상호작용합니다.
다른 타사와 마찬가지로 API를 통해서요.AWS는 처음부터 다음과 같은 모델을 제공합니다.
적절한 배포 사례를 쉽게 선택할 수 있습니다.
셀의 경우 애플리케이션에 따라 다름
신뢰성 기준.예를 들어 AWS 지역 내에 셀을 배포할 수 있습니다.
각 가용 영역에서생각해 보면 AZ가 좋은 예입니다.
AWS에서 셀 기반 아키텍처가 어떻게 사용되는지 보여줍니다.안정성에 초점을 맞추는 경우
각 셀마다 셀을 각각 배치할 수 있습니다.
멀티 에이전트 플랫폼으로.세밀한 제어에 초점을 맞추는 경우
환경의 경우 여러 셀을 배치할 수 있습니다.
가용 영역별로 완벽한 제어가 가능합니다.하지만 공개적으로 사용 가능한 모든 셀에 셀을 내장할 수도 있습니다.
AWS 리전.AWS는 건물을 만드는 서비스를 제공합니다.
글로벌 규모의 아키텍처가 더 쉬워졌습니다.그 중 몇 가지를 예로 들어 보겠습니다.Route 53을 사용하면 100% 글로벌 SLA가 적용됩니다.
다음을 제공하는 도메인 이름 서비스
셀 배포 및 모니터링을 위한 모든 핵심 기능또는 아마존 클라우드프론트는
콘텐츠를 제공할 수 있는 콘텐츠 전송 네트워크
사용자가 어디에 있든 최대한 가까이 다가가세요.Aurora 관계형 데이터베이스 및 NoSQL용 DynamoDB를 사용하여 안전하고 안정적이며 빠르고 비용 효율적인 데이터베이스를 제공합니다.
판매 예정인 데이터 플랫폼
비즈니스 요구 사항에 따라일단 핵심 기능이 작동하면
셀 기반 아키텍처를 구현하면 플랫폼을 최적화할 수 있습니다.
특정 제약 조건 및 비즈니스 목표를 기반으로 합니다.셀 크기가 작음
고객당 샤드 수가 많을수록 복원력이 향상됩니다.
사용자 및 소규모 환경에 적합
운영 부담이 적다는 의미입니다.하지만 고객은 그럴 필요가 없을 수도 있습니다.
세포의 단위가 되는 거죠.일부 고객은 규모가 너무 클 수 있습니다.
단일 셀에 저장해야 하거나 Example Corp의 경우 별도의 요구 사항이 있어야 합니다.
캠퍼스에 따라 다릅니다.세포에는 적응된 알갱이가 있을 수 있습니다.
특정 상황에 맞게보안이 핵심 우선 순위입니다.그리고 셀을 배치할 수 있습니다.
여러 계정에서 추가 제공
환경 주변의 보안 경계.보안 롤아웃을 위한 전략
세분화된 기능을 활용하여 환경 전반에 걸쳐 새로운 기능을 사용할 수 있습니다.
지속적으로 혁신할 수 있는 세포의 수
고객을 위해.셀 기반 아키텍처
여러 가지 추가 이점을 제공합니다.이 두 가지를 모두 해결할 수 있는 기회를 제공합니다.
플랫폼의 안정성, 장애 방지 능력,
동시에 레질리언스 문제도 해결해야 합니다.
플랫폼의 장애 지속 능력
문제가 발생할 때플랫폼 확장
그 결과 새 셀을 만들거나 삭제하기만 하면 됩니다. 이 활동은 완전히 자동화되고 대규모로 진행됩니다.
이는 완전히 통제됩니다.셀이 작을수록 관리가 쉬워집니다.
개별 세포의그리고 각각의 특이한 행동
훨씬 더 빠르게 서비스가 제공될 것입니다.그리고 다른 세포들도
베이스라인으로 사용할 수 있습니다.실패는 언제 일어날지
영향은 훨씬 적을 것입니다.세포는 최소한의 기본 종속성을 공유해야 합니다.
따라서 실패로 인한 영향은 가능하죠.
격리될 것입니다.그리고 마지막으로,
지능적인 배치 알고리즘과 충분한 셀이 있으면
애플리케이션 코드가 단순화되었습니다.셀을 구성하면 복잡성을 없앨 수 있습니다.
런타임 코드가 모든 것을 처리하도록 하는 것
컨트롤 플레인은 여러분의 가장 좋은 친구가 될 것입니다.
어플리케이션을 단순화하기 위해서죠.이제 문제를 해결할 수 있습니다.
고객의 위치 제약이나 암호화 요구 사항
간편합니다.최첨단 기술을 발전시키다
셀 기반 아키텍처, Amazon EBS, 스토리지 엔진
모든 볼륨의 Amazon EC2 인스턴스에서 제대로 작동하고 있습니다.
Amazon EBS 볼륨을 저장하기 위한 새로운 데이터베이스 모델을 개발 중입니다.아키텍처는 다음과 같습니다.
공개적으로 문서화되었으며 피살리아 (Physalia) 라고 불립니다.이 모델은
수백만 개의 셀이 있는 셀 기반 아키텍처 패턴입니다.
그리고 각 셀은 단 하나의 볼륨에 대한 정보를 저장합니다.피살리아는 플랫폼입니다.
문제 해결 및 확장을 위해 구축되었습니다.
CAP 정리가 일관성, 가용성에 대해 부과하는 몇 가지 제한 사항은
그리고 파티션 허용오차.더 자세히 알아보려면
아마존 빌더 라이브러리, AWS 엔지니어들이 모이는 사이트
모범 사례를 직접 공유해 주세요. 셔플 샤딩에 관한 기사가 있습니다.
그리고 아마존 루트 53에서의 사용법도 살펴보겠습니다.피살리아에 대해 자세히 설명합니다.
아마존 연구팀이 모인 사이트인 아마존 사이언스에서
조직에서 수행한 연구의 현황을 설명해 주세요.빌더 라이브러리
애플리케이션 설계 방법에 대한 기사도 포함되어 있습니다.
및 장애를 처리하는 클라이언트
효과적인 방법으로 말이죠.AWS Well-Architected 프레임워크는 안전한 아키텍처를 설계하기 위한 가이드입니다.
안정적이고 성능이 뛰어나며 비용에 최적화되어 있으며 운영적으로도 우수합니다.
플랫폼.실습을 이용할 수 있습니다.
이러한 사례를 살펴보기 위해서입니다.AWS 아키텍처 센터
클라우드 애플리케이션을 설계하는 데 도움이 되는 많은 리소스를 제공합니다.또한 AWS 솔루션 라이브러리는 광범위한 컬렉션을 제공합니다.
AWS의 다양한 사용 사례에 대한 참조 구현
그리고 문서화되어 있고 직접 실행 가능한 AWS 소유자.이 세션을 듣고 발견해 주셔서 감사합니다.
셀 기반 아키텍처의 일부 기능.자세한 내용은 당사에 문의하시기 바랍니다.
AWS가 아키텍처 설계를 어떻게 지원할 수 있는지
차세대 애플리케이션.언제나처럼, 꼭 확인하세요
설문조사를 작성하기 위해서요.여러분의 피드백을 정말 소중하게 생각합니다
그리고 인사이트.