- 알겠어안녕하세요 여러분.좋아요
오후, 오늘은 어때요?오, 좋아요.알아요, 알겠어요
점심식사 후에 몰려든 사람들.여러분 곁에 있어줘서 고마워요좀 구하셨으면 좋겠어요
점심식사 후에 커피를 마시자.와줘서 정말 고마워요선택해 주셔서 정말 기뻐요
오늘 저희와 함께 제가 가장 좋아하는 주제 중 하나인 AWS Fargate에 대해 이야기해 보세요.구체적으로 말하자면, 어떻게 하면 워크로드를 어떻게 구축, 배포 및 관리할 수 있는지 살펴보겠습니다.
AWS Fargate를 사용하면 매우 비용 효율적인 방식으로 사용할 수 있습니다.제 이름은 스티븐 폴리스입니다.
그리고 오늘은 스카일러입니다.그는 곧 여기서 자신을 좀 더 자세히 소개할 예정인데요, 오늘은 정말 집중적으로 다루겠습니다.
Skylar와 Smartsheet의 팀이 어땠는지에 대해 알아보겠습니다.
AWS 파게이트를 활용할 수 있었습니다.그럼 계속 진행해 보겠습니다.
그들과 함께 하는 여정, 그리고 얘기 다 할 거예요
그들이 어떻게 Fargate를 채택할 수 있었는지, 그리고 어떻게 Fargate를 통해 비용을 절감할 수 있었을 뿐만 아니라 그들의 가치도 향상시킬 수 있었는지에 대해
운영 공간, 그리고 궁극적으로 이러한 교훈을 어떻게 활용할 수 있을까요?
조직에도 적용됩니다.그럼 아젠다에 대해 간단히 설명해 볼게요.
Fargate가 무엇인지, 어떻게 작동하는지, 어떤 역할을 하는지에 대한 수준을 설정하세요.
모두가 같은 생각을 하고 있고, 대부분의 시간은 Skylar가 그들의 이야기를 공유하는 시간이 될 것입니다.오늘 Skylar와 Smartsheet 팀이 함께하게 되어 매우 기쁩니다.그들이 해낸 것이 정말 놀랍습니다.
해낼 수 있었으며, 어떻게 해낼 수 있었는지 더 듣게 되어 매우 기쁩니다.
이 기술을 활용하세요.처음에 여기서 레벨을 설정하려면 Fargate가 전부입니다.
서버리스 컨테이너.따라서 역사적으로 컨테이너는
호스트 운영 체제와 호스트 노드 및 가상 시스템에 대한 관리가 필요했습니다.걱정이 되겠네요
사용자 지정 AMI, 패치 적용, 강화된 환경을 매달, 한 달에 걸쳐 유지 관리하는 것에 대해 말이죠.항상 그렇지는 않지만 많은 시간과 에너지가 필요합니다.
가성비가 아주 좋습니다.서버리스 관점에서 볼 때 Fargate는 이를 공유한 시프트를 제공합니다.
책임 모델.따라서 컨테이너 아래에 있는 모든 것이 AWS의 문제가 되고
기본 사항을 확인하는 것은 AWS입니다.
인프라는 견고하고 안전하며 최신 상태입니다.저희가 책임지겠습니다
용량 계획이 필요한데, 더 필요한 경우
Fargate를 사용하면 간단히 복제본 계정을 변경할 수 있습니다.더 많은 컨테이너를 제공합니다.정말 멋져요.그래서 정말 단순해집니다.
채택 및 활용에 따른 운영 오버헤드
컨테이너 기술.그래서 서버리스 방식은
자체 가상 시스템 노드를 롤링하는 것에 비해 운영상 많은 이점이 있습니다.보안은 정말 핵심입니다.
Fargate의 기본 요소는 아주 초창기부터 다음과 같은 방식으로 구축해 왔습니다.
이러한 컨테이너의 경우 매우 독단적이고 견고한 환경에서 제공됩니다.이게 무슨 말이냐면, 전형적인 컨테이너 세계에서는
우리에겐 가상 머신이 있죠.여러 컨테이너, 즉 5, 10, 20개의 컨테이너를 빈 패킹하고 있습니다.
모두 단일 노드에 담았습니다.cgroup도 있고
격리 경계를 제공하는 네임스페이스
컨테이너 간Fargate는 이를 한 단계 더 발전시켰습니다.그래서 배포할 때마다
Fargate를 사용하는 ECS에서는 전체 작업이 마이크로 VM에 래핑됩니다.그래서 저는 이것만 가지고 있는 게 아닙니다.
cgroups 네임스페이스 격리와 하이퍼바이저도 있어요.
이 작업을 위한 일종의 하드 쉘로, 다음과 같은 기능을 제공합니다.
다른 방식에 비해 격리가 한층 더 강화되었습니다.
운영 컨테이너의 수.기타 보안 기능으로는 권한 있는 컨테이너 허용 불가, 관련 없는 Linux 기능 등이 있습니다.Fargate 세계에서는 할 수 없는 몇 가지 기능을 제공합니다.저희는 보안을 위해 그렇게 합니다.따라서 Fargate 태스크에서 들어오고 나가는 모든 트래픽이
ENI를 통과하고 보안 그룹을 통과하는 거죠.인그레스, 이그레스 트래픽을 효과적으로 강화할 수 있습니다.
그런 환경에서 벗어나세요.그 이유 중 하나는
보안팀이 Fargate를 정말 좋아하는 이유는 다음과 같은 방법이기 때문입니다.
매우 체계적이고 안전한 방식으로 컨테이너 기술을 채택하세요.따라서 보안은 항상 최우선입니다.
Fargate에 관해서라면 염두에 두세요.그리고 마지막으로,
오늘날의 주요 논점과 이야기, 그리고 이야기는 모두 비용 효율성에 관한 것입니다.이점 중 하나는
서버리스의 장점은 Fargate를 통해 가능하다는 것입니다.
매우 탄력적인 가격 책정 모델을 갖추기 위해서죠.이게 무슨 말이냐면
Fargate 태스크를 시작할 때는 비용을 지불하고, 태스크가 종료되고 컨테이너가 작동하지 않을 때
더 이상 실행하면 결제가 중단됩니다.걱정할 필요 없어요
용량 관리 및 가상 머신에 충분한 컨테이너를 빈 패킹하는 것에 대해
활용도를 높이세요. 크기 조정도 하고 있기 때문이죠.
그 작업들은 독립적으로 말이죠.따라서 워크로드 A가 캐시를 읽는 작은 웹 앱인 경우 VCPU가 하나면 모두 필요할 수 있습니다.
vCPU를 0.25개까지 줄일 수 있습니다.바로 만들 수 있어요.
작고 매우 저렴합니다.반면 제 작업량은 B
몬테카를로 시뮬레이션을 하려면 상당한 마력이 필요합니다. vCPU 16개, 정말 좋아요.나는
개별적으로 크기를 조정할 수 있습니다.리소스 경합이 없기 때문에 별도로 비용을 지불하고 비용과 같은 작업도 처리할 수 있습니다.
태그 지정을 통해 할당, 차지백, 다시 보여주기 등도 모두 가능합니다.따라서 비용 효율성이 높아집니다.
앞서 말씀드릴 내용은 AMI를 다루지 않고도 한 달 동안 얻을 수 있는 휴먼 아워에 대해 말씀드리기도 했습니다.
관리, 용량 계획, 기타 등등
운영 팀으로서 해야 했던 기존 인프라 작업들.그 중 일부는 다음과 같습니다.
Fargate의 핵심 이점 및 많은 고객이 ECS와 함께 실행할 때 서버리스 컨테이너를 선택하는 이유.Fargate는 ECS와 EKS 모두에서 사용할 수 있습니다.저희는 ECS에 초점을 맞추고 있습니다.Fargate는 IT 부서에서 성장했습니다.
ECS 팀은 오래 전입니다.따라서 엘라스틱 컨테이너 서비스인 ECS는 당사의 퍼스트 파티 컨테이너 오케스트레이터입니다.우리는 ECS를 좋아합니다.이 분야는 어마어마한 영역입니다.
AWS에 대한 투자.당사는 두 곳을 별도로 운영하는 몇 안 되는 클라우드 제공업체 중 하나입니다.
오케스트레이션 옵션.그래서 우리는 다음과 같은 분야에 막대한 투자를 합니다.
ECS와 EKS를 모두 사용합니다.둘 다 우리 비즈니스의 강점입니다.ECS는 어디에도 가지 않고 계속 발전하고 있습니다.
많은 훌륭한 기능 및 기능, 그 중 상당수는
이번 주에 대해 처음으로 말씀드리자면
정말 신나는 일이죠.따라서 ECS의 규모는 대단합니다.글로벌 규모 임무를 위해 ECS를 선택하는 고객이 있습니다.
중요 애플리케이션.당사는 전체 솔루션을 구축하는 ISV 파트너를 보유하고 있습니다.
기업은 ECS를 기반으로 합니다.ECS는 매우 매력적인 옵션입니다. 특히 여행 중이라면 더욱 그렇습니다.
AWS 에코시스템에 참여하세요.AWS의 API 계층, CLI를 알면 AWS의 작업 방식을 알면 ECS가 매우 자연스럽게 느껴질 것입니다.그래서 우리는 ECS를 좋아합니다.워크로드에 관한 한 말씀드리자면, 안녕하세요, Steven 씨, 무엇이 실행되는지요?
파게이트, 안 되는 게 뭐야?그래서 파게이트는 정말
의도적으로 매우 훌륭한 장군으로 자리매김했습니다.
컨테이너 플랫폼을 사용하세요.OCI 준수 컨테이너를 실행합니다.따라서 컨테이너에 넣을 수 있다면 Fargate에서 실행할 수 있습니다. 즉, 똑같은 컨테이너입니다.
노트북에서 실행 가능.옮겨 안으로 밀어 넣을 수 있어요.
ECR, Fargate를 사용하여 ECS에서 실행하면 동일한 애플리케이션이 작동합니다.몇 가지 공통점은 웹 애플리케이션, HTTP 호출 같은 것들이죠.
웹 앱, API 등에 응답하기도 하죠.그리고 두 번째는
데이터 처리 워크로드는 아마도 가장 흔히 언급되는 워크로드의 종류일 것입니다.대기열 처리, 비동기식 데이터 처리 등이 이러한 것일 수 있습니다.멋진 실행 태스크 API가 생겼습니다.그러니까 그냥 쏘면 돼요.
컨테이너로 몇 가지 작업을 수행한 다음, 뿌듯하게, 끝내버리죠.
자리를 비우면 돈도 그만두게 되죠.그런 종류의 처리
워크로드는 대부분 다음과 함께 사용하면 훌륭합니다.
수를 확장할 수 있는 오토 스케일링과 같은 것들
대기열 길이에 따른 작업 수: 데이터 처리를 할 때는 수를 기준으로 처리합니다.
방문한 사람 수, 요청 수
로드 밸런서를 통한 모든 사용자 지정 지표, 부하
밸런싱을 통해 조정이 매우 쉽고 탄력적입니다.
수요에 맞는 용량.CI/CD 파이프라인, 레거시 앱 마이그레이션과 같이 자주 볼 수 있는 다른 워크로드도 훌륭합니다.컨테이너에 던져 넣으세요.
파게이트에 가져다 주세요.많은 혜택을 받을 수 있습니다.
최신 컨테이너 스택을 사용하면 전체 애플리케이션을 폐기하고 다시 실행할 필요가 없습니다.Java 앱과 같은 멋진 기능들
Windows에서도 오늘날 Fargate에서는 구형.NET 프레임워크 앱을 위한 컨테이너를 사용할 수 있습니다.AI와 Ml의 인기가 높아지고 있습니다.이미 보셨겠지만
이번 주 re:Invent에서는 매우 인기 있는 주제입니다.Fargate에서는 이런 모습을 많이 볼 수 있습니다.추론에 대해 더 알아보기
측면에서는 CPU 쪽에 더 가깝지만 매우 일반적인 사용 사례
컨테이너를 설치하고 실행하는 것이 얼마나 쉬운지 말이죠.그리고 IOT용 백엔드
시스템, 게임 환경, 개발 환경 등.또한 큰 폭으로 발전하고 있습니다.
디지털 미디어 자산 처리와 같은 분야의 증가.그래서 FFMPEG를 컨테이너 안에 넣으면
Fargate는 그 기능을 점점 더 잘 볼 수 있게 되어 훌륭하게 작동합니다.다시 말씀드리지만, 컨테이너에서 실행할 수 있다면 아마도 다음을 실행할 수 있을 것입니다.
Fargate에서는 매우 광범위합니다.전 더 이상 살 수 없게 됐어요
이제 무슨 재미있는 이야기를 듣고 깜짝 놀랐어요.
고객들이 Fargate에서 쇼핑을 하고 있는 이유는 마치, 오,
네, 물론이죠. 정말 대단해요. 고객들이 무엇을 활용하는지 볼 수 있어서 좋네요
이 기술의 용도는 정말 재미있습니다.그러니까, 그건 괜찮은 일이죠.
이 부분에 대해서는 우리가 같은 생각을 하고 있는지 확인하고 싶었어요.Fargate는 뭐고, 어디에 쓰이는 거죠?거기 있는 가치 있는 소품에는 어떤 것들이 있을까요?이제 좀 더 직접적으로 이야기를 들어보려고 넘어가고 싶어요.
Smartsheet의 스카일러.그럼, 스카일러, 만약
저랑 같이 여기 오시면 돼요. 남은 시간은
지난 몇 년 동안 여러분과 팀이 어떻게 정말 훌륭한 일을 해냈는지 말씀해 주실 수 있습니다.정말 고마워요.
- 고마워요.운동부터 시작할게요그래서 제가 물어볼게요.
여러분 모두 의자에 똑바로 앉으세요.잠시만 기다려주세요. 금방 해결될 거예요.걱정 마세요.이제 허리를 곧게 펴고 눈을 감으라고 할게요걱정 마세요, 안 할게요
얼굴을 마주칠지도 몰라요좋아요, 눈을 감고 한 손을 배에 대면 시리즈를 할게요
세 번의 심호흡으로 말이죠.준비 됐어요?숨을 들이쉬고 내쉬세요.숨을 들이쉬고 내쉬세요.한 번 더, 숨을 들이쉬고 내쉬세요.어서 가슴을 열어보세요
눈.기분이 어때요?손을 흔들어 봤을 때, 누가 당신처럼 느껴질지 몰라요
좀 더 명확하게 설명해 주실 수 있으세요?뭔가 찾았어요.하나 있어요
돌아왔어요, 좋아요, 이제 몇 개 있어요.좋아요, 여러분 몇 명 있네요.더 가볍고 가벼운 건 어때요?손을 흔들어 봤을 때 조금 더 가벼워졌다고 느끼는 사람이 있을까요?좋아요, 몇 개 있어요. 네, 좋아요, 양이 많아요.좋아, 그것도 마찬가지야
가벼운 느낌.이런, 했어야 했는데
그나저나 이건 위로 미끄러져 올라갔어요.어쨌든 같은 가벼움을 느껴보세요.
명확성과 집중력, 그리고 이 강연이 끝날 무렵에는 Smartsheet가 어떻게 할 수 있었는지 보여드리겠습니다.
이러한 감정을 깨우쳐도 우리는 여전히 그 감정과 함께 매일 번창하고 있습니다.더 가벼워질 수 있는 이 능력은
더 민첩하고 집중력이 더 뛰어나죠.우리는 매일 모습을 드러내는데, 제 목표는, 만약 제가 이곳을 떠난다면 딱 한 가지가 있습니다.
그냥 지나칠 수 있어요. 그걸 우리의 프레임워크 OPS로 두세요.OPS는 그 중 일부에 불과합니다.
두문자어를 조합했습니다.하지만 이 프레임워크는 매우 합법적이고 이 프레임워크는 다음의 약자입니다.
최적화, 추진, 규모 조정.각각의 과정을 안내해 드리겠습니다. Smartsheet가 어떻게 최적화할 수 있었는지, 어떻게 우리가 어떻게 최적화할 수 있었는지 보실 수 있을 것입니다.
우리는 번창하고 추진력을 발휘하며 더 많은 일을 할 수 있었습니다.
매일 배포하고 마침내 규모를 확장합니다.문제를 살펴보면, 어떻게 하면 50배에 도달할 수 있을까요?
게다가 100배 스케일이 있다고요?그러면 정확히 볼 수 있을 거예요.
우리가 어떻게 그 모든 걸 해냈어요.그러니까 예쁠 거예요
신나게 타세요.그래도 난 누구야?여기 무대에서 얘기하는 이 사람 누구야?글쎄요, 5년 전만 해도 저는 지금 당신이 있는 곳에 앉아 있었을 거예요.
다른 카지노에 갔는데 고객 상담이 있었죠.그리고 그들은 다음에 대해 이야기하고 있었습니다.
그들이 어떻게 Fargate를 막 채택했는지, 그리고 그것은 판도를 바꿔놓았을 뿐이었습니다.
ECS 배포를 위해서요.왜 그랬을까요?글쎄요, 그들은 할 수 있어요
훨씬 더 많은 자동화를 통해 일상적인 작업을 많이 줄일 수 있습니다.
수동 작업도 마찬가지였죠. 정말 좋은 결과를 가져왔죠.
통제력을 손상시키지 않으면서 추상화 수준을 유지했습니다.그럼 제가 뭘 했냐고요?그 정보를 가져와서 다시 가져왔어요
제가 함께 일하고 있던 회사인데 그 회사가 채택이 됐어요.
아마 석 달 뒤면 될 것 같아요.저는 경영진의 동의를 얻어야 했어요.하지만 일단 성공하고 나니 그냥
아주 멋지게 표현됐죠.정말 잘 착륙했어요.그리고 거기에서 아마 6개월이 지난 후, 우리는 인수되었고 저는
스마트시트에 인수되었고, 저희 회사인 10,000피트가 인수했습니다.
제가 지금 있는 곳이 바로 그곳입니다.거기서부터는 플랫폼 팀에서 일하며 데이터 집약적인 모든 작업을 처리해 드립니다.
우리 앱과 모든 앱의 컴퓨팅 집약적인 워크로드
둘 사이의 인터페이스, 몇 가지를 만들어 보려고 합니다.
그 위에 단순함이 있죠.그래서 저는 한 명에서 왔어요.
제가 가장 데이터 집약도가 높은 곳들을 볼 수 있는 곳인데, 제가 여러분께 보여드릴 수 있는 것은
여기서 잠시 후에 볼 수 있는 규모가 어느 정도인지 알아보겠습니다.그리고 저에 대해 조금 알려드리면 좋을 것 같았어요. 창작을 할 생각이거든요.
공감대를 형성할 수 있으면 도움이 될 것 같아요.그리고 저는 요가를 해왔습니다.
지난 2년 동안 말이에요.정말 좋아요.안 오신 거 알아요
제 얘기 들으러 왔는데 도움이 돼요그러니 참아주세요.그리고 연기 좀 해봤는데 이걸 올릴 생각은 없었는데 스티븐이 “오, 해봐, 괜찮아.”진짜는 아니에요. 하지만 노력 중이에요.하지만 저는 물건을 만드는 걸 좋아해요. 아마 그게 이유일 거예요.
자연스럽게 3D 프린팅, 어떤 3D 프린터든 하기 시작했어요.
집에서 프린트하는 사람이 있나요?와, 더 많은 분들이 키웠어요.
선명도보다 더 중요하죠.좋아요, 멋지네요.좋아, 귀엽다.그리고 명상도 하고제 자푸 (Zafu) 에서 저를 찾을 수 있을 거예요
거의 매일 명상을 하고 있어요.그리고 가르침.정말 좋아요
가르치는 것, 그게 내가 여기 있는 이유야.저는 이 대학교를 처음 접했어요.
대중 연설 내내, 기운이 떨어지면 응원해 주세요.하지만 네, 트위터에 저를 추가하고 싶으시면 할 수 있습니다. 아니면 X로 지금 전화해 주세요.자, 좋아요, 저에 대해 잘 아시잖아요.너에게 조금 주고 싶어
스마트시트에 대한 컨텍스트입니다.그나저나 이게 제 플러그예요.제가 스마트시트를 사용할 수 있는 기회죠.스마트시트는 기업입니다.
작업을 계획하고, 작업을 수행하고, 작업을 확장하는 데 도움이 되는 관리 플랫폼.그리고 Smartsheet는 일종의 기능입니다.
오래된 스프레드시트 문제에 대한 해결책을 생각해 볼 수 있습니다.인터넷이 탄생하면서부터 스프레드시트가 등장하면서부터
처음 도입되면서 이메일이나 zip 드라이브로 전송하는 것보다 더 효과적으로 만들 수 있는 방법이 필요했습니다.
여러분이 무엇을 하시든, 저희는 플랫폼을 만들었습니다.
그뿐만 아니라 협업도 가능하지만
이를 기반으로 자동화한 다음 서로 다른 모든 것에 대해 보고할 수 있습니다.
회사의 수준.따라서 아직 사용하지 않으셨다면
스마트시트, 확인해 보세요.하지만 더 중요한 건
우리가 어떤 규모로 사업을 운영하고 있는지 알려드리기 위해서죠.왜냐하면 제가 하는 어떤 것이든
오늘 말씀드리자면, 여러분이 인프라 내의 다양한 서비스에 이러한 것들을 적용할 수 있다는 느낌을 받으셨으면 합니다.그러니까 10만 개가 넘는 사람들이 있습니다.
우리 플랫폼 내의 다양한 조직과 그
1,340만 명의 협력자그리고 그 중에서 60억 개의 활성 작업을 고려해볼 수 있습니다.
우리 시트에 한 줄씩.마지막으로 2.4페타바이트의 자산입니다.그리고 이것들은 단지 그리드 또는 시트에 있는 자산일 뿐입니다.다음과 같은 경우 훨씬 더 많은 데이터가 있습니다.
모든 것을 고려하면 전체적으로 들을 수 있을 것입니다.
이 강연, 그리드, 시트, 그리고 그들이 할 수 있다는 것만 알아두세요
서로 바꿔서 사용할 수 있습니다.내부적으로는 둘 다 부릅니다.그리드가 들리면
스프레드시트를 생각해 보세요.몇 가지 해결책을 살펴보기 전에 먼저 한 가지 더 알려드리고자 하는 것이 있습니다.
와의 파트너십에 관한 약간의 배경
Smartsheet가 지난 15년 동안 유지할 수 있었던 AWS입니다.이걸 대충 훑어보도록 할게요.그래서 Smartsheet가 출시된 2006년부터 우리는 AWS S3를 사용해 왔습니다. 여기서부터 시작했습니다.거기서부터 2009년에 메카니컬 터크 (Mechanical Turk) 라는 서비스를 통해 공동 혁신을 이루었는데 정말 멋진 일이었죠.글쎄요, 아무거나 해 보세요.
메카니컬 터크를 아세요?사실 제가 생각했던 것 이상이었어요.그렇지 않은 분들을 위해 말씀드리자면, 규모를 확장할 수 있습니다.
마치 컴퓨팅 파워를 확장하는 것처럼 인력도 마찬가지입니다.그래서 우리는 이를 제품에 적용했습니다.더 이상 존재하지 않지만 여전히 훌륭합니다.
공동 혁신과 개척의 예, 그리고
파트너십은 할 수 있습니다.거기서부터 시작했죠
모놀리스 문제를 해결하기 위해서죠. 2015년은 매우 중요한 해였고, 이때부터 마이크로서비스로 사업을 확장하기 시작했습니다.거기서부터 우리도
우리의 대규모 코어 DB인 모놀리식 데이터베이스를 교살하고 그 데이터를 무엇으로 쪼개버렸죠.
지금은 그리드 샤드 (grid shard) 라고 부릅니다.그래서 어제 Peter DeSanto의 기조 연설에서 그가 그 방법에 대해 이야기했을 때 정말 기뻤습니다.
이제 데이터베이스를 위한 관리형 샤딩 레이어가 생겼습니다.정말 기대가 됩니다. 2017년은 매우 중요한 해이기도 했습니다.이것이 바로 우리가 진출하기 시작한 곳입니다.
연방 정부와 우리는 AWS Govcloud 지역에 도착했습니다.스마트시트가 AWS 내에 100% 배포된 것은 이번이 처음입니다.그때까지는 실행 중이었습니다.
자체 데이터 센터에서 말이죠.그리고 2019년에는 그게 해결되었습니다.
AWS로 완전히 마이그레이션할 수 있는 토대입니다.그래서 2019년에 마이그레이션을 완료했고 우리가 가진 모든 것을 데이터에서 옮겼습니다.
센터에 도착했을 때 우리는 AWS에 있었습니다.물론이죠. 꽤 흔한 이야기죠.이미 많은 분들이 직접 마이그레이션을 해봤을 것입니다.그리고 거기에서 우리는 예전보다 훨씬 빠르게 성장할 수 있었습니다.
우리는 데이터 센터에 있었어요.마이그레이션한 지 2년이 지났을 때 여러 지역으로 이전하게 될 거라는 건 상상도 할 수 없는 일이었습니다.우리는 그 상황을 이해할 수 없었습니다.
잠금 해제된 속도였죠.그리고 그 이후로는
상당한 성장세를 보였습니다.최적화 섹션으로 들어가기 전에 먼저 견적부터 말씀드리겠습니다.
이 글은 당사의 CPO이자 EVP인 Praerit Garg가 작성한 내용입니다.
스마트시트의 엔지니어링.“비용 절감 덕분에 엔지니어링이 가능했어요.
팀은 ECS를 통해 Fargate 및 Graviton이 매우 중요하다는 것을 깨달았습니다. 특히 우리가 모든 것을 만들어야 하는 현재의 경제 상황에서 더욱 그렇습니다.
달러는 더 늘어날 것입니다.”아마 여러분 대부분이 이 인용문과 그 내용에 공감하실 것입니다.
현재의 경제 상황은 이렇습니다.아마 그럴 거라고 확신해요.
또 당신을 여기로 오게 된 계기도 있고요.어떻게 하면 친절하게 행동할 수 있을까요?
숨을 쉴 수 있는 공간을 추가해 볼까요?어떻게 면도를 할 수 있죠?
그 비용 중 일부요?그럼 파헤쳐 보죠.다시 한 번 말씀드리지만, 이것이 OPS의 OP입니다. 각 OPS에 대해 살펴보도록 하겠습니다.최적화, 이게 뭐죠?글쎄요
비용 절감에 관한 거죠.하지만 많은 것들이 있습니다.
비용을 절감할 수 있는 방법.물론 AWS 청구서가 있습니다. 청구서를 줄일 수 있는 다양한 조치를 취할 수 있습니다.하지만 좀 더 효율적이면 어떨까요?그게 비용을 절감할 수 있는 방법이죠, 그렇죠?그러니까 좀 더 효율적이게 되죠.
더 적은 리소스로 현재 하고 있는 것과 동일한 작업을 더 많이 수행한다는 의미입니다. 즉, 낭비를 줄일 수 있습니다.그래비톤과 같은 것들을 어떻게 사용하기 시작하고 더 나은 성과를 낼 수 있는지도 알아보도록 하겠습니다.
환경을 위해 지속 가능하죠.그래비톤이 어떻게 되는지 볼게요
한 달 안에 도입함으로써 전력 사용량을 60% 줄일 수 있었고 그 과정에서 더 적은 비용을 지불할 수 있었습니다.이는 매우 중요한 일이죠.일 년 정도면 70% 를 달성할 수 있습니다.
비용 절감.여기에는 AWS 청구서와 플랫폼 유지 관리에 드는 운영 시간도 포함됩니다.다른 좋은 이야기들처럼, 저희는
최적화 여정이 필요합니다.이 모든 걸 다 다루지는 않을게요. 그냥 대충 훑어볼게요. 만약 당신이 원하신다면
스크린샷이나 사진, 때가 되면 말해줄게
마지막으로 잠깐 클릭해서 살펴볼게요.하지만 처음에는 데이터 센터에서 시작했는데, 그 다음엔 리프트 앤 시프트를 했습니다.우리는 클라우드로 들어갔고
일단 들어가서 알아내기 시작했죠.
워크로드에 따른 적절한 인스턴스, 인스턴스 유형.처음 시작할 때는 주로 EC2를 사용했습니다.그 다음엔 알아내는 게 관건이었어요.
어떻게 하면 컨테이너에서, 그리고 컨테이너로부터 서버리스로 갈 수 있을까요? 비록 많은 것들이 있긴 하지만
엔지니어들은 여전히 어딘가에 서버가 있다고 생각합니다.그렇다면 정말 서버리스일까요?잘 모르겠어요.그건 아직 제가 알아낸 게 아니에요.거기서부터 그래비톤,
당시엔 꽤 겁이 났던 일이었어요.
처음에는 반대했죠.큰 변화가 될 거라고 생각했었죠.결국 30일이 걸렸어요.제 생각엔 이게 뭔가요?
Docker 버전 3이 나오지 않았더라면 훨씬 더 힘들었을 텐데요.이제 인수 하나만으로 ARM 64와 X86에서 이미지를 만들 수 있습니다.
커맨드 라인 인수를 사용하면 이 작업을 수행할 수 있습니다. ECR은 다음과 같은 기능을 지원합니다.
두 아키텍처 유형이 모두 포함된 이미지를 업로드하지 않고도
별도의 태그를 사용해야 합니다.그리고 그건 꽤 강력하죠.따라서 엄청난 비용 절감을 이끌어내는 것이 훨씬 더 간단한 여정입니다.
탄소 발자국을 줄일 수 있으면서도 > 거기서부터는 진정한 AWS에 최적화되어 있을 수 있지만 실제로는 불가능할 것입니다.최적화할 수 있는 방법에 항상 집중해야 합니다.하지만 시작하기에 정말 좋은 방법이고 어느 정도 설정해 볼 수도 있습니다.
모든 팀과 앞으로 출시될 새로운 서비스를 위한 문화적 기반이죠.물 좀 가져올게, 그거
예쁜 미끄럼틀, 들어보세요.따라서 슬라이드에서는 이러한 다양한 서비스를 하나하나 살펴보지는 않겠습니다.이 시점에서 중요한 것은 서비스를 전문화한다는 아이디어일 뿐입니다.이제 컨테이너 분야로 진출했으니 이제 원하는 방식을 파악하는 것이 전부입니다.
서비스를 자세히 살펴보고, 이러한 논리적 그룹화를 파악한 다음, 각 그룹을 별도로 나누세요.생각해 볼 수도 있겠죠.
집을 비유하는 것 처럼요.그 집의 청사진을 가지고 그 청사진을 가져와서 다른 장소, 다른 위치에 지을 수 있습니다.
이로 인해 비용이 달라질 수 있습니다.학교 옆에 두는 것보다 도로, 고속도로 옆에 놓는 거죠.마찬가지로, 우리가 만든 앱과 이미지를 가져와서 다양한 형태로 실행하고 다양한 상황에 따라 트래픽을 분산할 수 있습니다.그래서 저는 여기서 중요한 것이 무엇인지 생각합니다.
배치 (batch) 와 API (API) 의 차이점이죠. 배치 프로세싱은 동일한 API 이미지를 사용할 수 있는 방법입니다.하지만 이는 순전히 일부 무거운 워크로드를 처리하는 데만 사용됩니다.우리는 그저 다음과 같이 실행하고 있을 뿐입니다.
다양한 작업 리소스와 다양한 작업 크기.하지만 같은 이미지입니다.이게 무슨 역할을 하는지, 그렇지 않다고 생각하실 수도 있겠죠.
직관적으로 보이는데, 여러 서비스로 나누면
비용을 절약할 수 있을 거예요.하지만 혜택은 다음과 같은 경우에 옵니다.
자동 크기 조정을 먼저 살펴보세요. 이제 제한적으로 특수 자동 크기 조정을 시작할 수 있습니다. 기본적으로 시도해 보시는 겁니다.
CPU와 메모리를 최대한 활용하고 더 많은 것을 얻으려는 것이죠.
자동 크기 조정을 설정할 수 있는 시기를 제어하세요.
특정 워크로드.그래서 우리의 배치 프로세싱에서는
아니면 배치 엑셀의 경우 슈퍼가 필요하죠.
얻을 수 있는 가장 큰 인스턴스.사실, 일부는 저희가 처리합니다.
수식이 있는 요청에는 1.2테라바이트의 할당된 메모리가 필요합니다.
5분의 처리 수명 주기 내내정말 많은 기억이죠.메모리 제한이 120GB인 작업을 어떻게 처리할 수 있을까요?음, 아주 필요하겠네요.
적극적인 쓰레기 수거, 하지만 할 수 있어요
해냈고, 해냈어요. 하지만 모든 걸 다 해보자면
하나의 ECS 서비스로는 이 목표를 달성하기가 매우 어려울 것입니다.따라서 전문화를 할 수 있게 되면 다음을 수행할 수 있습니다.
오토스케일링을 각각에 맞게 구성하세요.
다양한 사용 사례.정말 중요하죠.모두
이들 역시 그래비톤에서 실행됩니다.이 서비스들 중 어떤 것들이 어떤 역할을 하는지에 대해서는 조금 후에 다루도록 하겠습니다.
추진제 스케일 섹션.하지만 지금은 아이디어일 뿐입니다.
서비스의 전문화에 대해
거기에 깃든 힘.좋아, 뭘 빼앗을 수 있니?세 가지가 뭐예요?
최적화에 관한 이 섹션에서 교훈을 얻을 수 있을까요?자, 오토스케일링을 도입해 보세요.꽤 간단하게 들리지만 자동 크기 조정, 알아내면
그걸 어떻게 조정하고 어떻게 해야 할지 알아내세요
다음과 같은 방법으로 서비스를 논리적으로 그룹화할 수 있습니다.
실제로 오토스케일링과 관련된 제어 기능과 사용자 지정 수준은 매우 강력합니다.다음으로, 아주 기본적인 것 같네요.
AWS 빌링에 대해 이해하세요.하지만 어떤 것이 주요 내용인지 살펴보는 것이 매우 적절합니다.
예를 들어 파게이트, CPU 유닛, 메모리 시간,
CPU 시간과 메모리 시간, 요금은 어떻게 청구되나요?이 정보만 알아도 이 시간을 활용하고 더 효율적으로 사용할 수 있습니다.
이 기술을 사용한 클라우드.그러니 조금만 이해해 주세요.
AWS 청구서의 작은 세부 사항 및
설계 검토 단계든, 새로운 POC 또는 개념 증명을 통해 도입을 검토하든 관계없이 큰 도움이 될 것입니다.마지막으로, 일부는 삭제하세요.
이러한 레거시 오버헤드.모노리스에서 시작했다고 해서 그곳에 머물 필요는 없습니다.도커화 과정을 거치면 컨테이너화가 좋습니다.
시작하되 거기서 멈추지 마세요.이를 전문화된 마이크로서비스로 더 세분화하여 실제로 시작할 수 있는 방법을 살펴보세요.
워크로드와 이를 성공적으로 수행하는 방법을 이해하세요.좋아요, P. Propel로 가죠.프로펠은 존재가 전부입니다
클라우드에서 더 민첩해지세요.우리가 이야기했던 초점이 바로 여기에 있습니다.
앞서 말씀드렸듯이, 좀 더 명확하게 말씀드리자면, 제약이 전혀 없는 상태에서 좀 더 민첩해졌으면 좋겠습니다.
그러셨을 것 같은데요.훨씬 더 뛰어난 운영력을 갖추면서도 이 작업을 수행할 수 있습니다.따라서 안정성, 가용성, 보안 상태, 시간을 개선할 수 있습니다.
규정 준수에 반영됩니다.그러니까 제거하려고 하는 거잖아
이런 오버헤드는 대부분 다음과 같은 경우에 발생합니다.
좀 더 수동으로 작업하거나 덜 관리되는 서비스를 사용하세요.그리고 그걸로 말하자면
훨씬 더 많은 자동화가 가능하죠.할 수 있다면 어떨까요?
보안이 자동화되었나요?그냥 안 했으면 어떡하지?
모든 작은 일을 다 하는 것에 대해 걱정해야 할 것 같아요.
SOC 규정 준수에 체크박스를 둘 필요가 있나요? SOC 규정 준수가 자동으로 처리되고 AWS의 규정 준수 자격증을 최상으로 받을 수 있기 때문인가요?이는 매우 중요한 일입니다.대체로 이 덕분에 Smartsheet는 매주 배포하지 않아도 되었습니다.
매일 진행되는 배포 작업에는 엔지니어의 시간이 수십 시간에서 몇 분까지 걸립니다.CodePipeline과 Fargate 인프라를 처음 도입했을 때 한 엔지니어가 말 그대로 말한 것처럼, 믿을 수 없을 정도입니다.
겨우 2분만에 배포를 마쳤고, 이제 할 수 있는 시간이었어요.
병합 요청을 검토하고 승인하세요.나머지는 자동화되었습니다.그리고 많은 분들이 계실 거라고 확신합니다.
비슷한 자동화 파이프라인이 있긴 하지만, 그때까지는 사용자 지정 파이썬 코드가 너무 많고 매우 복잡한 파이프라인이 있었습니다.
그리고 유지 관리하기도 힘들었죠.몇몇 엔지니어들이 유지보수했습니다.
다른 누구도 할 수 없었죠.이젠 그런 거 없어요.CodePipeline과 Fargate에서 실제로 얻을 수 있는 이점 중 몇 가지는 바로 이것입니다.결합 배포를 통해 얻을 수 있는 것은
결합 배포를 없애고 더 많은 배포로 옮겼습니다.
독립 배포.따라서 상황에 따라 독립적으로 배포할 수 있습니다.
마이크로서비스 아키텍처에서는 구축한 배포를 결합할 수 없습니다.
코드베이스가 바뀌면 바로 나가야 합니다.
모든 것을 배포할 수는 없죠.이제 이건 그냥 오는 게 아니에요
CodePipeline을 채택한다면 분명 도움이 될 것입니다.
시작하기에 아주 좋은 방법이죠. 왜냐하면 여러분이 짐의 일부를 없애기 시작했기 때문이죠.
그것 없이는 할 수 있었을 거예요.이건 아마 제 것 같아요
제일 좋아요. 더 이상 AMI는 없어요.여기 계신 분 중에 AMI와 어떤 구성으로 베이킹하는 사람에 대한 전쟁 이야기를 가지고 계신지 아무도 몰랐던 분이 계신가요?
뭔가 잘못돼서 알아내는 데 며칠이 걸렸나요?손 보여줘.스토리가 있는 사람 있나요?네, 많은 분들, 네, 끝났어요.AMI가 있는 곳이 한 군데 있습니다. 잠시 후에 이야기하겠습니다.그다지 만족스럽지는 않지만 사라질 것입니다.유지 관리, 그 중 많은 부분이
일상적인 유지 관리, 보안 패치 등
자동화를 통해 변모한 귀사와 우리는
더 이상 그런 게 없을 뿐이죠.이제 보이기 시작하셨군요.
우리가 얼마나 많은 것을 없애고 충분히 추상화하고 있는지
구성이나 사용자 지정 기능을 손상시키지 않으면서 말이죠.다음으로 복잡성이 단순성으로 바뀌는데 저는 그렇게 생각하지 않습니다.
충분히 관심을 끌게 되죠. 왜냐하면 제가 디자인 일을 할 때
엔지니어들의 리뷰는 누구나 참여하고 싶어하죠.
매우 정교한 알람, 매우 정교한 솔루션.괜찮아요.거기 들어오셔도 돼요네, 할 수 있어요
자랑하고 자랑하고 자랑하세요.하지만 결국에는 팀이 가서 이걸 유지해야 합니다.그리고 만약 당신이 유일한 사람이라면
이게 어떻게 돌아가는지 알잖아요. 아무 소용이 없을거에요.그래서 단순함을 장려하는 건데요, 이에 대해서는 잠시 후에 더 이야기해 보죠.마지막으로, 우리에겐 문화가 있었습니다.
중앙 집중식 DevOps 및 SER의 개념에서 탈피하여 하나의 모델로 전환했습니다.
T자형 엔지니어들이죠.다들 뭔지 아세요?
T자형 엔지니어는?손 보여주기 위해, 누가 알겠어요?
무슨 T자형 엔지니어야?와우.그럼 제가 교육을 좀 할 수 있겠네요.그러니까 T자형 엔지니어는
테스트, 풀스택 배포를 담당하는 엔지니어
부하 테스트, 작전.그래서 데브옵스, 데이터베이스,
여러분은 스택 전반에서, 심지어 운영에서도 성공을 거둘 수 있어야 하는 엔지니어입니다.그리고 T자형 엔지니어를 포용하고 있기 때문에 더 이상 그럴 필요가 없습니다.
전용 SRE 및 DevOps, 즉 모든 엔지니어를 의미합니다.
성공해야 합니다.그러기 위해서는 추상화가 충분히 이루어져야 합니다.넌 할 수 없을 거야
ECS Fargate가 없어도 다음 중 일부만 있으면 이 목표를 달성할 수 있습니다.
추가 관리 서비스를 통해 최적의 지점을 찾을 수 있었으며, 여기서 자세히 살펴보겠습니다.
다음 예시에서는그럼 한 번 살펴보죠.
Smartsheet가 어떻게 자동적으로 적용될 수 있었는지
CodePipeline에서 Fargate를 사용하여 당사에 배포
셀 기반 아키텍처.이제 이 내용을 매우 일반적으로 설명하겠습니다. 이 글을 지원하는 모든 응용 프로그램에 적용할 수 있기 때문입니다.마찬가지로 그래야 합니다.
어떻게 하면 똑같이 지원할 수 있는지 알 수 있게 도와주죠.
이 예제를 바탕으로 인프라에 적용해 보세요.좋아요, 그럼 시작하겠습니다
엔지니어와 함께 하면, 우리, 여러분 중에 코드를 작성하지 않는 사람이 있을 수도 있습니다.
이젠 괜찮아요.하지만 코드를 바꿔야 합니다.그래서 우리는 그 커밋을 합니다.
GitLab에 푸시합니다.GitHub, CodeCommit을 사용할 수도 있지만 중요한 것은
다음 단계는 CI/CD입니다.여기서는 GitLab CI를 사용하는데, 이제 사용할 장소가 필요합니다.
빌드하고 배포하세요.그래서 제가 거짓말했던 부분이 바로 여기에 있습니다. 우리는 하나의 EC2를 사용하는데
GitLab 러너에게는 이런 것들이 필요하기 때문이죠.
러너는 AWS 내에서 실행되므로 IAM 역할을 연결할 수 있으며 CI를 사용하는 동안 서비스와 통신하는 모든 마법을 바로 수행할 수 있습니다.따라서 우리는 EC2를 사용하여 Docker 이미지의 빌드 및 업로드를 지원하고, 이 이미지는 엘라스틱 컨테이너 레지스트리인 ECR에 업로드됩니다.현재 이 분야에는 많은 것들이 있습니다.
마법이 일어납니다.하지만 잠시만요.따라서 ECR은 이미지를 푸시하는 곳입니다. 그러면 코드 파이프라인이 연결되고 CodePipeline에 방법이 있습니다.
이를 통해 ECR로 이미지가 푸시되는 것을 듣고 배포하거나 수신할 수 있습니다.따라서 새 이미지가 들어오면 필터를 적용할 수 있습니다.
태그든 아니든, 우리의 경우에는 모든 배포에 태그를 지정합니다.
SHA, 즉 Git SHA를 사용하죠.그래서 새로운 이미지가 떠오릅니다.
CodePipeline이 시작되고 가장 먼저 하는 일은
그것을 코드빌드에 전달하는 것입니다.이 모든 것이 의 일부입니다.
CodePipeline 제품군이긴 하지만 그냥 얘기할 수 있어요.
CodePipeline에서 이에 대해 알아보겠습니다.괜찮아요.그래서 코드 파이프라인
코드빌드에 전달합니다.코드빌드가 합쳐집니다.
배포 아티팩트.우리의 경우에는 매우 간단합니다. 단지 컨테이너 이름을 ECR의 이미지 URL에 매핑한 JSON 파일일 뿐입니다.그런 다음 이를 CodeDeploy에 전달하면 CodeDeploy가 최종 작업을 수행합니다.그리고 여기에는 많은 것들이 있습니다.
힘이 많이 들어오죠. 왜냐하면 우리가 하고 있는 이후로
셀 기반 배포에서는 서로 다른 셀 각각에 배포해야 합니다. 그러면 많은 이점이 있습니다.
하나가 실패할 가능성이 있습니다.또한 많은 것들이 있습니다.
어떻게 이런 것들에 대한 구성이 필요할까요?
배포 유형이 설정됩니다.우리가 할 건지 말지
블루-그린, 카나리, 롤링, 이런 것들은 CodeDeploy에 의해 촉진되고 이걸 가능하게 해주죠.
상자에서 꺼내자마자 바로 사용할 수 있습니다.CodeDeploy가 통합되기 때문에
ECS, 파게이트, 아마도 EKS, 파게이트 및 기타 여러 제품과 직접
다양한 컴퓨팅 서비스, 원한다면 우리가 해야 할 일만 남았죠.
Canary 배포를 활성화하지 않으면 파란색-녹색이 그냥 지나갈 수 있습니다.
몇 가지 추가 구성을 거치고 다이얼을 바꿔보세요.우리가 예전에 사용하던 것을 수백 줄의 파이썬 코드로 실행해서 모든 사람들이 손대기를 하거나 수동 대기를 하는 것을 너무 두려워했다고 생각하면
GitLab 파이프라인 안에서는 그냥 기다렸다가 폴링을 해서 어떤 것이 있는지 확인하기만 하면 됩니다.
완료되었다는 신호를 보내면 끝났어요.자, 이제 이걸 얻게 됐어요
해결책은 우리가 방법을 통제하거나 바꾸고 싶다면
배포 중에 셀 중 하나에 장애가 발생하는 경우
모든 것을 롤백하거나 그냥 다시 시도하고 싶을 수도 있습니다.
이 특정 셀은 설정만으로 모든 작업을 수행할 수 있습니다.Terraform을 사용하여 관리합니다.
이 모든 것을 배포했습니다.우리의 테라폼도 마찬가지입니다. 만약 우리가
배포 방식을 바꾸고 싶으면 몇 가지만 넣으면 됩니다.
구성 라인이 다르면 누구나 사용할 수 있습니다.
서로 다른 세포들이죠.복잡성에서 단순함까지
꽤 중요하죠.그럼 추진력에서 얻을 수 있는 것은 무엇일까요? OPS의 P인 거죠?글쎄요, 단순할 수도 있겠네요.
지금은 앵무새처럼 들리지만 단순함은 매우 중요합니다. 그래서 여러분께 도전해 보겠습니다.
다음에 디자인 리뷰에 참여하게 될 거고
여러분이 어떤 해결책을 제시하는 게 보이시죠?
엄청 복잡하게 들리네요. 도전해볼 수 있는지 보세요.
어쩌면 조금이라도 이걸 어떻게 만들 수 있을까요?
좀 더 간단하지 않을까요?그리고 오래 갈 수 있을 거예요.다음은 매우 중요합니다.AWS 공동 책임 모델.들어보신 분 계신가요?손을 들어본 결과 셰어드에 대해 들어본 사람이 있을까요?
책임 모델?와, 방 전체가 다 있는 것 같아요.좋아요, 멋지네요.그러니 너무 깊이 들어갈 필요는 없어요.아직 검색하지 않으셨다면 구글에서 검색해 보세요.
그 다음엔 ChatGPT나 클로드, 그 중 하나
뭘 찾을 수 있는지 확인해 보세요.하지만 다음 부분인 매니지드 서비스에도 도움이 되죠.매니지드 서비스를 사용함으로써
Fargate, ECS 또는 EKS처럼 이제 다음과 연계할 수 있습니다.
기타 관리형 서비스 (귀사를 위한 서비스 포함)
로그인 또는 배포매끄럽고 바로 사용할 수 있기 때문에 매우 간단합니다.CodePipeline에서 살펴본 것처럼 ECS를 사용할 때
파게이트 또는 EKS 파게이트 (블루-그린을 원한다면)
배포 또는 Canary의 경우 구성만 변경하면 됩니다. 그러면 고객이 함께 작업하는 방법을 알 수 있습니다.SSM Param Store를 통해 공유 구성을 사용하고 계실 수도 있습니다.
비밀을 저장할 수도 있죠.그것도 자동으로 작동합니다.
ECS를 바로 꺼내거나 EKS를 바로 사용할 수 있습니다.그래서 정말 강력합니다.
매니지드 서비스에 연결하기 시작하면
이를 통해 제거할 수 있는 것은 무엇일까요?좋아요, 이게 재밌네요.스케일.규모가 크면 더 많은 것을 보고 당사에 대해 자세히 알아볼 수 있습니다.
셀 기반 아키텍처.이 모든 것은 우리가 적용하는 디자인 패턴에 달려 있습니다.그래서 셀 기반 아키텍처를 우리가 만든 것입니다.
3년, 4년 전이죠.그리고 이제 막 그 사실이 증명됐어요
정말 유용하고, 효과적이죠.이제 좀 더 자세히 알아보도록 하죠.
그 해결책에 대해 좀 알아보고 그 중 일부를 받아들이세요.
본질은 여러분의 회사로 돌아가세요.이제 직접 가서 만들 수 있습니다.
귀사의 서비스는 50배, 100배의 규모와 지원을 제공합니다. 하지만 종속성을 해결하지 못하면 다운스트림 또는 업스트림 서비스가 이를 지원할 수 없다면
규모를 확장하면 원점으로 돌아올 수 있습니다.그래서 여러분도 아주 잘해야 합니다.
종속성에 대해 알아두세요.인증 서비스일 수도 있습니다.
대화 중인 내용 또는 할 수 있어야 하는 대상
확장에 따라 확장해야 합니다. 그렇지 않으면 병목 현상이 발생합니다.다음으로 유효 하중을 사용하는 방법을 살펴보겠습니다.
트래픽을 밸런싱 및 파티셔닝하거나 분산하여 다음을 수행할 수 있습니다.
트래픽을 효과적으로 분배하는 것도 매우 중요합니다.성능을 살펴보도록 하겠습니다.
도구를 사용한 모니터링, 예를 들어 DataDog를 사용하거나 직접 수행할 수도 있습니다.
오픈 소스 앱의 APN이지만 좋은 성과를 내고 있습니다.
애플리케이션 현황에 대한 이해 및 기준
시작하고 싶을 때 성능을 발휘하는 것이 매우 중요할 것입니다.
필요한 규모로 구성하고 구성할 수 있어야 합니다.마지막으로, 우리가 할 일은
어떻게 하면 단순한 것부터 깨뜨릴 수 있는지 살펴볼까요?
포그라운드 프로세싱으로 비동기 처리도 포함시키죠.유연성이 크게 향상됩니다.
처리 과정에서 요청의 일부를 분리하기 시작할 수 있을 때
백그라운드에서 수행할 수 있습니다.그럼 알아낼 수 있겠죠
한꺼번에 여러 개를 묶어서 다시 만들 수 있을지도 몰라요
통합을 시작하고 수행할 수 있는 방법
한 번만 처리할 수 있습니다.아, 그리고 이걸로 다시 돌아가 볼게요.이를 통해 아주 짧은 시간 내에 50배 규모를 달성할 수 있었습니다.약 6~12개월이 걸렸고 우리는 할 수 있었습니다.
트래픽의 50배에 달하죠. 초당 요청 건수는
당사의 그리드 플랫폼 서비스.좋아요, 이건 정말 훌륭한 명언이에요. 그리고 레이 콜은 저명한 사람이에요.
Smartsheet의 엔지니어인데 그는 제 멘토였어요.
제가 Smartsheet에 합류한 지 3년이 지난 지금 마지막으로 잘 모르겠습니다.그리고 저는 그에게서 정말 많은 것을 배웠습니다.그래서 오늘 밤 여기서 그의 정수를 좀 퍼뜨리고 싶었어요.“셀 기반 아키텍처
테스트 가능성을 높여줍니다.계속 확장되는 모노리스와는 달리, 셀 한계를 설정하고 테스트할 수 있어 예측 가능한 성능을 보장합니다.용량을 늘리려면
셀을 하나 더 추가하기만 하면 됩니다.”강력하죠?그럼 한 번 살펴보죠.이러한 솔루션 중 일부를 자세히 살펴보고 우리의 문제를 이해해 보겠습니다.
셀 기반 아키텍처.하지만 플릿 파티셔닝부터 시작하죠.플릿 파티셔닝은
타입의 라우팅을 어떻게 시작할 수 있는지 알아내는 것이 관건이고, 어떻게 할 것인가가 관건입니다.
먼저 트래픽 유형과 유형을 이해해야 합니다.
요청 사이에 발생하는 처리의 규모.우리의 경우에는 1.2테라바이트의 메모리를 사용할 수 있는 단일 요청이 있었습니다.처음에는 아주 터무니없는 일이었죠.하지만 그러기 시작하기도 하죠.
평균적으로 볼 때 들어오는 요청의 대다수는 이것과 경쟁하고 있습니다.
이로 인해 나머지 트래픽이 크게 느려집니다.그래서 그 방법을 알아내기 시작했어요.
이 둘을 분리해서 아주 큰 트래픽의 0.1% 를 다른 대기열로 보낼 수 있습니다.그리고 우리의 경우에는
XL 대기열이라는 새로운 아이디어였죠.이 용량보다 큰 메모리가 있으면 알아내면 다른 대기열로 보내서 별도의 전용 프로세스를 만들 수 있습니다.바로 이 부분에서 XL 배치가 필요하죠.이 XL 배치에서는 최대 리소스로 실행됩니다.따라서 최대 메모리, 최대 CPU, 오토는 완전히 다릅니다.
스케일링 설정은 일반 그리드 배치와 같은 것과는 다릅니다.처리 속도는 매우 적지만 리소스가 많이 필요하기 때문에 바로 확장할 수 있습니다.
천 배의 트래픽을 처리하는 것과는 다릅니다.하지만 그들은 정말 빠르게 해내고 있어요.우리에겐 그런 능력이 없었어요. 그런 통제력도 없었어요.
한 번의 일괄 처리로 이 모든 작업을 수행할 때 말이죠.그래서 우리가 한 일은 단순한 것뿐이었습니다.
과거 데이터를 보세요. 지난번에 이런 시트 중 하나를 봤을 때 메모리가 얼마나 필요했을까요?그런 다음 마지막으로 봤을 때 결정을 내리고 적절한 대기열에 배포하기만 하면 됩니다.문제가 해결되었습니다.이것만으로도 많은 돈을 절약했습니다.기다리고 계신 분들도 계실 거예요. 언제 얘기할 건지
셀 기반 아키텍처에 대해서요?자, 이제 시작하겠습니다.세포를 만들어 봅시다.그럼 세포는 무엇일까요?
자, 한 번 살펴보죠.트래픽을 라우팅할 방법이 필요하기 때문에 ALB를 추가할 거예요. 거기에서 처리할 방법이 필요하죠.그래서 ECS Fargate를 추가할 예정입니다. 쿠버네티스 팬 여러분 모두에게 미안합니다. 그는 쿠버네티스 팬이었음에 틀림없습니다.거기서부터는 처리할 방법이 필요합니다.이제 우리가 있을 곳이 필요해요.
이 데이터를 저장할게요.DynamoDB를 추가할 예정입니다.
오로라 MySQL에서 말이죠.좋아요.이제 무언가를 추가해 보죠.
트래픽을 오프로드하여 오프라인 또는 백그라운드에서 처리하는 데 사용할 수 있습니다.그래서 대기열을 추가하고
그런 다음 ECS Fargate를 대기열에서 처리하도록 하겠습니다.아마 이렇게 생각하고 계실 겁니다.
Lambda를 사용하지 않는 이유는 무엇인가요?이건 다른 날을 위한 이야기예요.하지만 우리는 또한 많은 돈을 절약했습니다.
Lambda를 제거하고 대기열에서 처리할 수 있는 사이드카를 ECS Fargate에 추가하기만 하면 되므로 비용이 절감됩니다.비용을 크게 절감할 수 있었습니다.자, 그럼 휴대폰이 하나 있는데
이제 세포가 세 개라면 이걸 살펴보죠.
또는 N개의 세포.이제 셀이 생겼습니다. 좋아요. 하지만 이제 트래픽을 올바른 셀로 라우팅할 방법이 필요하죠.그리고 여기가 바로 여러분이
라우팅 레이어가 필요해요.여기서 우리의 그리드를 볼 수 있습니다.
라우터와 NLB도 있긴 하지만 방법이 필요해요
이 그리드를 찾아보세요. 어느 셀에 있나요?그리고 람다가 좀 있어요.
우리가 사용하고 있는 DynamoDB를 사용하면 다음을 유지 관리할 수 있습니다.
딕셔너리 샤드 조회.샤드가 무엇인지, 어떤 셀인지 알게 되면 사용자를 라우팅합니다.
알맞은 셀로거기서부터 통과하게 되죠.
ALB랑 대화하는 거 말이야이 섹션에서 무엇을 배울 수 있나요?규모에서 무엇을 빼앗을 수 있을까요?제가 드릴 게 세 가지 있어요.먼저, 미래의 수요를 예측하세요.다음에 디자인 리뷰를 할 때는 50X 렌즈를 착용하세요.
100X 렌즈일 수도 있습니다.그리고 미래에 어느 정도 규모를 확장하는 데 꼭 필요한 이러한 솔루션을 보면 어떤 일이 일어날지 조사해 보세요.
이 부하를 50배 또는 100배 증가시키면 어떨까요?이렇게 하면 실제로 유지될 수 있을까요?유연해질 수 있을까요?
그걸 지원할 수 있을 만큼 충분한가요?비용면에서도 효과적일 수 있을까요?이제 본격적으로 시작하게 되었죠.
문제를 해결하고, 모자를 쓰고, 안경을 쓰고, 새로운 렌즈를 통해 해결책을 찾기 위해 필요한 모든 것을 할 수 있는 방법이죠.다음은 우리처럼 부하 테스트입니다.
Ray의 말을 인용해 봤는데, 할 수 있는 방법이 필요해요
앱을 효과적으로 로드 테스트하세요.그리고 이상적으로는 그게 문제죠.
항상 하고 있지만, 그냥 전체 플랫폼에서 100% 용량으로 부하 테스트를 시도할 수는 없습니다.따라서 단일 셀에서 이 작업을 수행할 수 있는 경우에도 마찬가지로 좋습니다. 왜냐하면 단일 셀의 균형을 알면 셀 수를 알 수 있기 때문입니다.
언제든지 필요하고 실행할 수 있는 최대 용량을 항상 테스트해야 합니다.그리고 마지막으로, 정말
모범 사례를 받아들이세요.따라서 셀 기반 아키텍처가 그 중 하나입니다.AWS에는 빌더 라이브러리 전체가 있고 Claude, ChatGPT를 통해 엄청난 양의 정보가 있습니다.하지만 정말 많은 것들이 있습니다.
개선을 시작하고 규모를 확장할 수 있는 방법들이죠.그러니 좋은 아이디어가 떠올랐고
회사의 모범 사례에 맞춰 적용할 일반적인 패턴을 마련하세요.그럼 요약해 보죠.
여기서 나가면 그냥 가버릴 거야, 도대체 왜
심호흡을 했나요?저는 명상 코스를 안 했어요.그 외에는 OPS로 해두세요.
최적화, 추진 및 확장.이 내용을 보고 Smartsheet가 이 기술을 어떻게 적용했는지 살펴보셨으면 좋겠습니다. 이제 여기를 떠나시길 바랍니다.
열정이 넘치고 여러분의 조직에 씨앗을 심어 이 일을 해내고 싶습니다.아직 안 해봤거나 이후에도 안 해봤다면
이거, 리뷰를 남겨주세요.다시 한 번 말씀드리지만, 저는 이제 막 여정을 시작했을 뿐입니다.
대중 연설을 시작해보죠.그래서 좋은 성적을 받고 싶어요. CSAT 점수라고 하는 것 같아요.저는 아마존 전문가가 아니지만
네, 좋은 평점을 주세요.아마 내년에 돌아올 수 있게 도와줄 거예요.그게 내가 가진 전부야.스티븐이 다가올 것 같아정말 고마워요.(박수) - [스티븐] 정말 고마워요, 스카일러, 공유해 주셔서 감사합니다.여기 계시면 저희 생각엔
잠시만 시간을 내세요...