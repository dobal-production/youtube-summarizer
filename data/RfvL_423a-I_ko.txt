[천둥 박수 소리] 생각해 본 적 있어요?
세상에 대해?이 모든 일이 벌어지고 있나요?얼마나 혼란스러울까요?도착하면 아마 보셨을 겁니다.
커피를 마실 때, 노트북을 켤 때, 또는 엉킨 커피를 모두 풀 때
책상 밑의 전선.물론 제가 자주 하는 말이지요.
세상은 비동시적입니다.이제 질서 있는 세상을 상상해 보세요.
하나씩 동기화됩니다.그런 세상을 보고 싶으세요?아니요.모험심은 어디에 있나요?이봐요, 파란 알약을 먹으면
우리의 이야기는 여기서 끝나고 이 대화는
그런 일은 없었어요.빨간 약을 먹으면 좀 더 질서 있는 세상을 보여줄게
동기적인 것이죠.노란색은 어때요?오, 저건 그냥 젤리빈이에요, 바나나내가 하는 건 그저 제공하는 것뿐이야
시뮬레이션 말이에요.[전자 음악 재생] 이제 시작입니다.고마워요.[음악 재생] - 잠시만 기다려요.
- 오, 잠깐만요. - 버거와 감자튀김.
- 한 번에 하나씩만 주세요, 선생님.버거.[음악 재생] 다른 건 없나요?감자튀김.[음악 재생] 훌륭합니다.[엘리베이터 음악 재생] 여긴 미쳤어.아니요, 여긴 동기식이에요.음, 여긴 엉망이야.어떻게 그렇게 빨리 해냈어요?방법이 아니라 어디가 문제죠?볼까요?[전화벨 소리] 당신을 위한 거예요.부통령 겸 수석 부사장을 환영해 주세요
Amazon.com의 기술 책임자.베르너 보겔스 박사[전자 음악 재생] 안녕하세요, 베가스.진짜로 가져갔어야 했는데
솔직히 파란 알약!아무 것도 없어요
이 세상에서는 동시적이죠.만약 있었다면, 우리는 정말로
맘에 안 들었을 거예요그런 것들을 생각해 보세요.
컴퓨터 시스템을 만들고 있는 거죠.사실 제 생각엔 예시가
사실 정말 좋은 것도 있어요.제가 정말 배운 건
좋은 컴퓨터 시스템을 만들고 싶어도
현실 세계를 봐야 합니다.제가 관찰한 것은
현실 세계는 비동기식이에요. 결정론적이진 않아요.이벤트가 너무 많아요.
여러분 주위에서는 항상 수조 개의 사건들이 일어나고 있습니다.하지만 우리는 제 기능을 하는 것 같습니다.
그렇지 않은 환경에서는 꽤 괜찮은 편이죠.
너무 끔찍하게 통제됐어요.그래서 제가 비동기에 대해 생각할 때, 제 생각은 비동기와 비슷하다는 것입니다.
세상은 항상 돌아간다는 거죠.그건 상관없어요
세상에서 무슨 일이 일어나든, 지구는 계속 돌고 있어요.그래서 제가 비동기성에 대해 생각해보면, 우리가 발전해야 한다는 것입니다.
어떤 상황에서든 무슨 일이 일어나든
우리 세상에서요.디지털 세상에서는
우리는 여전히 진전을 이룰 수 있어야 합니다.
어떤 상황에서든사실 돌이켜보면
S3를 출시한 지 약 16년 만에 전체 시리즈가 있었습니다.
S3를 구축할 때 사용한 분산 시스템 원칙
그 중 하나가 비동기성입니다.우리는 그것을 확실히 하고 싶었습니다.
시스템은 어떤 상황에서도 발전할 수 있을 거예요. 부하가 어떻게 되든
어떤 문제가 발생하든, 새로운 기능이 무엇이든 상관 없습니다.
시스템에 도입하고 있으니 항상 발전할 수 있어야 합니다.자, 물론 아시다시피
그 중 많은 부분이 동시적입니다. 왜냐하면 우리는 동시성을 즐기기 때문이죠.
훨씬 쉬워 보이기 때문이죠.자, 우리가 정말 신경 쓰는 것들은
레이턴시와 처리량이 중요하죠.그리고 이 특별한 경우에는
클래식 싱크로니에서 말이죠.자, 보시다시피
처리량은 1이고, 작업자 한 명이 처리해야 하는 경우 지연 시간은
해야 할 모든 작업의 전체 체인
그리고 튀김을 하나씩 튀기세요. 정말 놀라웠어요. 그러면 그 대기 시간을 알 수 있죠.
처리량도 떨어지죠.물론 이제 다음을 추가할 수 있습니다.
여기에 더 많은 병렬 처리가 가능하죠.작업자가 여러 명입니다.하지만 여전히 그래야 합니다. 아마도 작업장에서 차단되어 있을 겁니다.
공유 리소스죠. 프라이어죠.아마도 다음과 같을 수도 있습니다.
처리량은 향상되겠지만 지연 시간은 확실히 줄어들 것입니다.따라서 현실 세계에 더 가까워질 수 있게 되었습니다.
서버가 하나 이상 있다는 것은 비동기식입니다.
이들이 하는 일은 주문을 받은 다음 주문을 작성하는 것뿐입니다.
전표에 레일에 집어넣으세요
셰프들이 픽업할 수 있는 곳.셰프가 여러 명인데
각자 스테이션에 있어요.그래서 그들은 모두 주문을 보게 되죠.
도착해서 작업이 필요하면
집어 올립니다.이런 걸 가질 수 있잖아요
여러분을 위해 무대 뒤에서 동시에 일어나는 일들이죠.병렬 처리이지만 블로킹은 없습니다.
모든 공유 리소스에서자, 정말로 발전하고 싶으시다면
지연 시간과 처리량, 이런 방송국 중 일부가 실제로 도입되는 것을 볼 수 있습니다.
추가 작업자.그래서 실제로 그 안에 시스템이 있었습니다.
90년대에 맷 웰쉬가 개발했는데, 스테이지드 (staged) 라고 불렸죠.
이벤트 기반 아키텍처는 기본적으로
이벤트 기반 아키텍처의 모든 이점
아키텍처이긴 하지만 병렬 처리를 제어할 수 있습니다.
각각의 개별 단위에서 다음 사항을 확인하기 위해
어떤 리소스에서도 차단되지 않았죠.다시 말씀드리지만, 다시 말씀드리자면
S3의 설계 원칙, 우리는 이 점을 고려했습니다.우리는 그 점을 확실히 하고 싶었습니다.
제어된 동시성과 통제된 병렬 처리가 가능했죠.이는 동시성을 제어합니다.
즉, 차단이 어디에 있는지 생각해 봐야 한다는 뜻입니다.
염두에 두고 계신 자료들이죠.자, 가끔은 전 세계가
동기화되는 것 같네요.그 예시 중 하나가
새들의 중얼거림이죠.정말 아름다워요.정말 대단해요
그리고 매혹적이죠.그리고 있는 것 같네요
이 모든 찌르레기들을 알려주는 중앙 집중식 컨트롤러
어디를 가야 하고 무엇을 해야 하는지우리 선조들은 사실 그렇게 생각했어요.
새들에겐 텔레파시가 있었다고
그게 애들을 버티게 해줬어요.하지만 이보다 더 진실하지 않은 건 없죠.이것은 단일 시스템이 아닙니다.
그 본성과 성격은 비동시적이기 때문이죠.그래서 새들이 하는 모든 행동은
현지 관찰을 기반으로 한 거죠.자, 이게 하는 일은 세 가지인데
네 가지 목표가 있을 수 있습니다.그 중 하나는 계속 머물고 싶어한다는 거예요.
짝과 가까이 있지만, 그 새끼들 사이로 날아가고 싶어하지 않아요. 그리고 그 애는
포식자를 피하려고..자, 보시는 건
다른 새들이 멀어지면 속도가 빨라집니다.다른 새와 너무 가까워지면
새들은 방향을 바꿉니다.그리고 만약 당신이 괜찮은 곳에 있다면
정확히 말하자면, 자신의 속도가 속도와 일치하는지 확인하세요.
주변에 있는 다른 새들에 대해서요.그리고 이 실제 행동은
끌림과 반발 작용이 샘물 같이 생겼죠.이제 60년대/70년대에는
체계적 사고라고 하는 몇 가지 근본적인 사고가 있었습니다.도넬라 메도우는 가장 유명한 사람 중 한 명입니다.
시스템적 사고에 관한 이 책들의 유명한 작가들인데, 그녀는 이미 그 책을 썼어요.
긍정적이고 부정적인 피드백 루프라는 개념을 가지고 있죠.여기서 보시는 것은 다음과 같습니다.
새는 긍정적인 피드백과 부정적인 피드백 루프를 가지고 있습니다.새끼들은 계속 뒤로 움직입니다.
앞뒤로.사실, 제 학창시절,
이걸 하기 위해 시뮬레이션을 만들었죠.X, Y, Z축이 있죠.
기본적으로 피치, 요우, 롤링이죠.자, 여기 보시는 것은
이는 순전히 현지의 의사 결정에 의해 주도됩니다.전체 시스템이 완전히 자율적이긴 하지만 새들은 완전히 자율적입니다.
동시에 작동하는 것 같네요하지만 그렇지 않아요.이건 순수한 비동기 시스템입니다.그래서 세상은 비동기적으로 작동합니다.그 S3를 돌이켜보면
설계 원칙, 비동기, 자율성, 로컬 결정,
로컬 데이터, 단순성, 통제된 비대칭성을 기반으로 의사 결정을 내립니다.
대칭성, 단순성.이 모든 것이
분산 시스템 원칙, 저희가 도출해낸 거죠.
현실 세계의 작동 방식에서 비롯된 거죠.동시성에 대해 생각해보면
동기화는 단순화입니다.그냥 뭔가가 그걸 만들어주는 거죠.
프로그램을 작성하기가 더 쉬워요.하지만 그거 알아?싱크로니는 환상이에요.우리가 만들어낸 것이죠.
비동기식 세상에서요.우리가 알고 있는 시스템들은
비동기식도 있습니다.이제 몇 가지 예를 살펴보죠.
디지털 세계의 기반인 우리의 디지털 세계는 무엇일까요?
우리의 운영 체제.운영 체제란 무엇인가?
정말 그래요?간단히 말해서, 그냥 관리할 수 있을 뿐이죠.
이 모든 장치들과 숫자를 더합니다.
그 위에 추상화가 많이 있죠.그럼 이 장치들은 어떻게 작동할까요?기본적으로 모든 디스크가 그런 종류인지 확인할 수 있는 장치 드라이버가 있습니다.
생김새도 비슷하죠.하지만 무슨 일이 일어날지는
장치와 운영 체제 간의 상호 작용은 다음과 같습니다.
인터럽트 기반, 이벤트 기반 시스템무언가를 쓰고 싶다면
디스크에 저장하면 공유 메모리 버퍼에 넣으면
레지스터에 무언가를 쓰면 다시 입력할 수 있을지도 모릅니다.
쓰기가 완료되었을 때그리고 기본 프로세스도
운영 체제에서는 순전히 비동기식입니다.그리고 아주 오랫동안
그건 그렇고, 시계는 아마
인터럽트를 발생시키는 가장 중요한 장치
이는 스케줄러를 구동하고 어떤 프로세스를 구동하기 때문입니다.
실제로 실행됩니다.하지만, 알다시피, 오랫동안
모두가 비동기 프로그래밍을 생각했으니까요.
운영체제는 정말 하기 어려웠어요.
비동기 인터페이스가 있었죠.디스크에 쓰고 싶으면
블록이 실제로 작성되기 전까지는 차단된 것입니다.글쎄요, 처리량은 정말 떨어집니다.
그거랑 다른 액션들의 지연 시간 때문이죠.
당신도 그렇게 하고 싶은 거죠.이제 여러 운영 체제가 있습니다.
90년대에는 실제로 설계가 되었죠.
처음부터 세상에 비동기성을 노출하기 위해서였죠.Windows NT는 아마도 비동기 통신을 사용한 최초의 제품이었을 것입니다.
또는 장치와의 상호 작용을 첫 번째 원칙으로 삼았습니다.
커널에서 말이죠.리눅스에는 비동기 기능이 전혀 없었습니다.
하지만 2000년대 초반까지만 해도 말이죠.그리고 사실 주문 AIO 메커니즘은
그렇게 잘 작동하진 않았어요.제 생각엔 2019년이 되어서야 비로소 그랬던 것 같아요.
io_uring을 리눅스에 넣었다니 정말 진정한 결과를 얻을 수 있었다는 거죠.
비동기 상호작용.왜 우리가 이걸 원하죠?
비동기식 인터랙션?자연스럽기 때문이죠.싱크로니는 환상에 불과합니다.그래서 여러분이 보시면
분산 시스템과 우리가 구축하는 방식
우리의 시스템, 싱크로니 리드
긴밀하게 연결된 시스템으로이제는 어떤 변경도 할 수 없습니다.
이 환경에 장바구니가
실제로 변경하지 않고 바로 발행합니다.
장바구니 그 자체.무언가 실패한다면, 아마도
전체 시스템이 고장날 것입니다.자, 보시면
실제로 구동되는 비동기 시스템
이벤트 브로커에 의해모든 것이 분리되어 있는 것을 볼 수 있습니다.타이트한 커플링은 없습니다.
모든 구성 요소 사이.장바구니도 마찬가지입니다.
이벤트를 게시하면 주문 시스템에서 이벤트를 픽업하고 결제 시스템에서
실제로 작품을 수령하는 건 그 이후입니다.가장 중요한 것은 이것이 아키텍처라는 것입니다.
변경할 필요 없이 아주 쉽게 발전할 수 있는 거죠.
다른 모든 구성 요소.자, 이제 뭔가를 추가하고 싶으시다면
신고 서비스나 청구서 발행 서비스 같은 것도 할 수 있습니다.
전체 시스템을 바꾸지 않고도 말이죠.그럼 왜 우리가 원하는 걸까요?
이렇게 느슨하게 연결된 시스템들일까요?우선,
자연스럽기 때문이죠.하지만 여러 가지 장점이 있습니다.종속성이 적을수록 가능하죠.
실제로 시스템을 변경하고, 종속 구성 요소를 변경하십시오.
다른 것들을 바꿀 필요 없이 말이죠.자연스러운 방식이죠.
실패를 찾아내는 거죠.이러한 구성 요소 중 하나라도 고장날 경우
이전 사진에서 보신 것처럼, 사실 전체 시스템은
계속 작동합니다.그리고 만약 새 버전이 있다면,
리포팅 서비스가 다시 가동되면 그냥 이벤트를 대체할 뿐입니다.
누락되어 실행되고 있는 것이죠.그래서 이렇게 불립니다.
진화 가능한 아키텍처죠.제가 정말 원하는 게 그거예요.
같이 걸어가고 싶은데요?우리는 시스템을 만들지만 만들지는 않습니다.
최종 시스템을 한 번에처음에는 한 이야기로 시작하죠.
작업을 수행할 수 있는 더 작은 시스템.그리고 그것을 궁극적인 것으로 발전시켜 나가세요.
우리가 염두에 두었던 복잡한 시스템.루슬리의 좋은 점은
결합 시스템은 간단하다는 거죠.
아키텍처를 발전시키기 위해서요.2006년의 S3를 보세요.
출시 당시에는 8개로 구성되었습니다.
별도의 마이크로서비스.지금은 255개가 훨씬 넘습니다.
시스템에 추가할 수 있는 다양한 마이크로서비스
시스템을 다운시키지 않고, 아무런 영향도 주지 않고
다른 부분들에 대해서요새로운 스토리지 방법론이 생겼습니다.
새로운 정책 메커니즘을 추가하고, 다양한 스토리지 계층을 추가하는 등 이 모든 것이 시스템 전반에 걸쳐 이루어졌습니다.
운영 중이었고 발전할 수 있었습니다.따라서 진화 가능성은 극도로 높습니다.
생각할 때 중요하죠.
시스템 설계에 대해서요.다시 한 번 말씀드리지만, 우리는 우리가 어떤 회사인지 알고 있었습니다.
2006년에 했었죠.작게 분해하면
잘 이해된 구성 요소는 일종의 기본 요소입니다.
이런 것들을 대충 비동기적으로 만드는 것이죠.
연결된 이벤트 기반 시스템.그리고 실제로 아마존에서는
소매업체인 아마존은 우리가 살펴본 바 있습니다.
비슷한 종류의 역사지만 저희는 모노리스 (monolith) 로 시작해서 그 중심에 도달했습니다.
수명이 다한 이유는 더 이상 확장할 수 없었기 때문이죠.
시스템을 발전시킬 수 없었죠.왜냐하면 그는 늙은 사람들을 이끌게 될 테니까요.
간단히 말해서, 백엔드의 공유 리소스는 배터리 전부입니다.
직접 액세스할 수 있는 데이터베이스의 수그래서 우리가 실제로 원했을 때는
더 많은 혁신을 할 수 없었어요. 왜냐하면
시스템을 발전시킬 수 없었죠.그래서 우리는 서비스 중심으로 전환했습니다.
핵심 서비스가 포함된 아키텍처를 통해 배웠습니다.마이크로서비스를 사용해봤습니다.
현재 아마존 리테일은 아키텍처의 규모가 매우 큽니다.
공유 인프라에서 실행되는 마이크로서비스 컬렉션입니다.사실 한 두 주 정도
몇 주 전에 저는 이 문서를 출판했습니다.이 자료는 1998년에 나왔습니다.그 결과가 보여요.
분산 컴퓨팅 선언문.우리 엔지니어들이 실제로 그렇게 하죠.
90년대 말에 저희는 진화가 불가능하다는 사실에 어떻게 대처해야 할지 고민했습니다.
그들의 아키텍처요.그리고 우리가 어떻게 움직였는지
서비스 지향 아키텍처로이는 서비스 지향이라는 개념을 아무도 알기 훨씬 이전이었습니다.
아키텍처였죠.그 당시 아마존에서 일하던 엔지니어들,
그리고 지금도 그렇습니다. 정말 대단하죠.
엔지니어링의 최전선에 있고 기본적으로 발명합니다.
그들이 미래를 향해 나아가는 길.이 문서를 꼭 읽어 보시기 바랍니다.날짜가 지났어요.알아요.하지만 여러분 중 많은 분들께는
그 문서에 있는 것들을 알아차리세요. 왜냐하면 그것이 현실이기 때문이죠.
지금도 사용하고 계신 분들 중 많은 분들이
모노리스에서 작업하기 위해서요.그리고 서비스 오리엔테이션 다음으로
많은 부분이 이렇게 말하고 있는데, 우리의 작업 중 일부는
워크플로우 지향적입니다.이러한 워크플로를 어떻게 구축할 수 있을까요?정말 놀라운 문서입니다.꼭 읽어 보시기 바랍니다.
재미삼아 25년 전 엔지니어들이 어땠는지 살펴보려는 거죠.
이걸 생각하고 있었죠.이제 워크플로우가 중요하죠.이를 통해 빌드할 수 있습니다.
이러한 애플리케이션은 느슨하게 연결된 구성 요소로 이루어져 있습니다.어떻게 구성할 수 있을까요?어떻게 하면 이들을 하나로 모을 수 있을까요?어떻게 발전시킬 수 있을까요?그래서 워크플로를 구축할 수 있으려면
이러한 플랫폼이 있어야 합니다.필요 여부
순서대로 실행하세요.또는 재시도 처리 방법,
오류 처리, 데이터 기반 라우팅,
이런 모든 것들이요.그리고 AWS에는 기본적으로 제공하는 두 가지 서비스가 있습니다.
이러한 기본 개념은 이미 알고 있는 사용자를 위한 것입니다.한쪽에는 다양한 기능을 모두 처리하는 Step Functions가 있습니다.
실행 유형과 이벤트 브리지, 시스템,
웹의 스파이더는 이벤트 브로커입니다.여기 있는 패턴 중 하나가
정말 써야 하는 건지
결합하고, 연결하고, 얻을 수 있는 서버리스 컴포넌트
원하는 전체 시스템.자, 저희가 찾아봤는데
이러한 워크플로를 구축하고 있는 우리 고객들을 보세요.언제나처럼 고객이 먼저 시작합니다.
고객이 전혀 예상하지 못했던 일을 하는 거죠.그래서 저희한테는 항상 정말 그렇죠.
듣는 법을 배우고, 그로부터 배우는 것이 중요하죠.
그런 다음 시스템을 개선하려고 노력하세요.예를 들어, 다음과 같은 것이 있었습니다.
우리가 예상하지 못했던 특정한 패턴
우리가 Step Functions를 만들 때, 바로 그 고객이
사실 맵 리듀스를 스텝 함수와 함께 사용하고 싶습니다.자, 이랬어요, 뭐라고요?결국 우리에겐 카프카가 있잖아요
EMR도 있고요.고객이 말하길,
아뇨, 아뇨, 아뇨, 아뇨, 아뇨, 아뇨우리는 좀 더 간단한 걸 원해요.그냥 두 개만 쓰고 싶어요
Lambda 함수, 그게 전부입니다.그리고 이 예시 중 하나는
예를 들면,그래서 NOAA는 기상 데이터의 측정치를 발표합니다.
전 세계 관측소에서 매일 측정하고 있습니다.
공개 데이터세트에서데이터셋은 약 37기가바이트이고 분산될 수 있습니다.
500,000개 이상의 파일.하지만 여러분이 원한다고 상상해 보세요.
이 모든 파일 중에서 평균을 구하면 됩니다. 방송국의 평균 최고치는
그 특정 달의 기온아주 간단한 조작이죠.그래서 이 일을 하기 위해서 그들은 그저 원했을 뿐이었죠.
두 개의 간단한 함수, 두 개의 간단한 Lambda 함수를 가지려면
이렇게 하기 위해서요.오늘 저희가 펀더멘털을 기부한다는 소식을 발표하게 되어 기쁩니다.
이 패턴을 통한 지원: AWS Step Functions 분산 맵.기본적으로 [박수] 제가 만든 게 아니에요.가서 그 친구들한테 실제로 얘기해 보세요
이걸 만들고 박수를 쳐주세요.왜냐하면 고객의 의견을 경청하기 때문이죠.
정말 중요하죠.그럼 이것들로 무엇을 할 수 있을까요?
스텝 함수와 사실
분산 맵에서는 기본적으로 맵을 만들어 봅시다.
스텝을 아주 쉽게 줄일 수 있죠.그래서 먼저 사용하는 것부터 시작하죠.
Step 함수: 분산 맵, 그러면 실행될 수도 있겠죠.
수천 개의 Lambda 함수 인스턴스
데이터를 처리한 다음 요약하려면
마지막 Lambda 단계의 해당 데이터.이렇게 하면 매우 쉽게 할 수 있습니다.
매우 간단한 Lambda 함수를 사용하여 매우 많은 양의 데이터를 처리할 수 있습니다.자, 앞서 말씀드렸듯이
세상은 이벤트 중심입니다.세상은 비동시적입니다.
우리가 할 수 있는 건 아무것도 없어요.즉, 아무리 노력해도
그렇게 혼란스럽지 않았으면 좋겠어요. 그리고 여러분이 원하는 방식이었으면 좋겠어요.
전부 결정론적이에요. 그건 사실이 아니에요.그래서 이 문제를 해결하는 가장 좋은 방법은
불확실성을 극복하기 위해서는 이벤트 기반 시스템을 구축하는 것입니다.이벤트 기반 아키텍처
느슨하게 연결된 시스템으로 자동으로 연결됩니다.자, 어떤 종류가 있을까요?
구성 요소들, 그 안에 있는 패턴들
이벤트 기반 아키텍처에는 다음과 같은 이벤트가 있습니다.
이벤트 프로듀서, 배포되는 이벤트 레코드가 있습니다.
그리고 어디에 있는지를 결정하는 이벤트 브로커
이러한 이벤트는 어디로 가야 합니다.이것들은 기본 구성요소일 뿐입니다.
이벤트 기반 아키텍처.그리고 보시면
거기 있는 통신 패턴은 지점 간 통신 방식인데 중간에 대기열이 될 수 있습니다.
또는 EventBridge, 또는 게시/구독
EventBridge에서 지원하는 것과 스트리밍 패턴은
사실 정말 흥미로운데요, 왜냐하면 어떤 것이든
그 중 C, D, E 같은 소비자들은
실제로 실패하고 돌아와서 이벤트를 다시 플레이할 수 있습니다.
그들이 놓쳤던 것들이죠.이 모든 것이 매우 중요합니다.
패턴, 그리고 실제로 EventBridge는 지원합니다.
전부 다 그렇죠.이런 종류 중 하나를 보면
일종의 이벤트 기반 시스템 아키텍처인데요,
API 게이트웨이가 있잖아요.
거기에는 세 가지 다른 API가 있습니다. 계정을 만들고,
주문을 생성하고 주문을 나열하세요.계정을 만드는 것만으로도 충분합니다.
간단한 예로, 주문을 생성해 봅시다.
DynamoDB에 무언가를 저장하고 이벤트를 게시하세요.
이벤트 브로커에 전송한 다음 서비스를 주문합니다.
그리고 배송 서비스는 기본적으로 중단됩니다.
그리고 그들의 일을 해내세요.정말 좋은 예를 하나 보죠.
마틴 파울러가 한 말입니다.
여러분 모두 마틴을 아실 거예요
파울러, 아니라면 찾아봐그는 가장 유명한 사람 중 한 명이에요
전 세계의 건축가들이죠. 그는 정말 열렬한 지지자예요.
이벤트 기반 아키텍처에 대해서요.그리고 그가 평소에 하던 이 예시는
이는 서비스가 종료될 수 있다는 것을 보여줍니다.
소비자, 이벤트의 최종 제작자.장바구니가 주문을 요청합니다.
결제 서비스에서 승인을 하는 것 같습니다.
신용카드에 대해 승인을 내립니다.주문 서비스가 픽업합니다.포스트 오더 이벤트,
배송 서비스에서 픽업하고 배송 이벤트가 발생합니다.
실제로 다시 밀어냅니다.기본적으로 스스로와 소통하는 거죠.
이벤트 버스를 통해서요.그리고 다시 돌아가게 되죠.
결국에는 주문 서비스를 통해서요.자, 정말 좋아요.자, 이 모든 부품들은 대충
결합되고, 독립적으로 실패하고, 가장 중요한 것은 전체가
시스템은 매우 쉽게 발전할 수 있습니다.이메일을 추가하고 싶다면
알림 서비스는 간단합니다. 연결만 하면 됩니다.
이벤트 버스에 연결되죠.추가하고 싶은 경우
예를 들어 인보이스 서비스의 경우 약간의 절차가 필요할 수 있습니다.
거기 앉아서 이벤트를 접수하고
대기열에 올려놓으면 아마
EC2 인스턴스에서 실행되는 일부 상용 소프트웨어가 작업을 자동으로 수행합니다.
해당 대기열에서 인보이스를 생성할 수 있습니다.모든 게 아주...
여기에 쉽게 참여할 수 있습니다.사실 저는 조금 회피할게요.
최근에 봤으니까 여기 왔어요
제가 놀랐던 이벤트 기반 아키텍처
그것이 얼마나 단순하고 얼마나 중요한지를 보면
동시에 말이죠.API를 만든다면 아마도
readme.com에 익숙하실 겁니다.거기에 귀하의 설명을 게시합니다.
다른 사람들이 사용할 수 있도록 하는 API.하지만 API를 변경할 경우 기억해야 할 사항이 있습니다.
설명도 변경해야 합니다.이제 이를 실제로 자동화할 수 있습니다.API Gateway에서 API를 변경하면 이벤트가 생성됩니다.
이는 CloudTrail로 이동합니다.그러면 CloudTrail이 이벤트를 게시합니다.
Lambda 함수를 트리거하는 이벤트브리지로 이동합니다.이 Lambda 함수는 다음과 같은 기능을 제공합니다.
AWS 시스템 관리자가 제공하는 구성 정보
에서 비밀 API 키를 가져옵니다.
AWS 시크릿 매니저를 실행한 다음 업데이트를 게시합니다.
방금 readme.com의 API 게이트웨이에 게시하셨습니다.이건 아주 간단한 일이에요.사실 SAM에 대한 예제 코드가 있는 블로그 중 하나에 있습니다. 이 코드를 바로 사용할 수 있습니다.간단해 보이지만 중요한 부분이라는 것도 알고 있습니다.
우리가 시스템을 발전시키는 방식에 대해서요.API를 발전시키면 즉시
문서가 업데이트됩니다.하지만 다시 말씀드리지만, 이벤트 중심에서는
아키텍처에 무언가를 추가하고 싶으면
예를 들어 고객에게 보내는 알림이나 실제 상황인지 아닌지
실패했거나 문제가 발생한 경우 Amazon SNS를 쉽게 추가할 수 있습니다.이 모든 것을 갖춘 갈의 법칙
매우 중요합니다.작동하는 모든 복잡한 시스템은 진화했습니다.
작동하는 더 단순한 시스템에서 말이죠.이벤트 기반 아키텍처에서는
비동기 시스템은 매우 가깝습니다.
실제로 할 수 있는 자연 세계와
복잡한 시스템을 작동시키세요.기억하세요, 여기 이거
꽤 복잡한 시스템이죠.우리가 이걸 작동시킬 수 있는 이유는
우리는 완전한 통제 없이 독립적으로 취해야 할 조치를 취해야 합니다.사실 이건 그냥 그런 게 아니에요.
아키텍처요.아마존 투 피자를 기억하신다면
사실 팀 접근 방식은 이를 기반으로 합니다.이를 통해 다음과 같은 팀을 구성할 수 있습니다.
특정 구성 요소 하나와 특정 구성 요소에만 초점을 맞춥니다.그들은 알 필요가 없습니다.
큰 그림이죠.서비스를 주문하고 계신가요?
이메일이 있다는 사실을 알 필요가 없습니다.
알림 서비스가 있습니다.따라서 전체 시스템을 발전시킬 수 있습니다.
그리고 건설에 집중해서 정말 빠르게 움직이세요.
로컬 구성 요소.진짜로, 진화할 수도 있고 죽을 수도 있습니다.왜냐하면 정말로 건물을 짓고 싶다면
첫날부터 전체 시스템을 처음부터 새로 만들면 아마 안 될 것 같습니다.
작동하는 간단한 시스템이 되겠습니다.진화할 수 있는 시스템을 구축하세요.그리고 만드는 가장 좋은 방법은
진화 가능한 시스템은 집중하는 것입니다.
이벤트 기반 아키텍처에 대해엑스포 홀에 가보셨다면 아마 보셨을 겁니다.
서버리스 에스프레소 스탠드와 할 수 있는 일
서버리스 아키텍처인 서버리스 에스프레소를 사용하면
그 이면에는주문하세요
모바일 기기에서.주문이 모니터에 표시됩니다.
음료가 준비되면 알림을 받게 됩니다.이것이 바로 아키텍처입니다.
그 뒤를 들여다보세요.스텝 함수를 사용합니다.
EventBridge를 사용하며 전체를 사용합니다.
실행 패턴이 저기 있어요.이게 어떻게 작동하는지 쉽게 알 수 있을 겁니다.약간 생긴다고 생각하실 수도 있습니다.
주문 애플리케이션으로는 너무 복잡합니다.하지만 여기서 멋진 점은
진화하기 쉽다는 거죠.앱을 사용해 보셨다면 아시겠죠.
거기에는 실제로 볼 수 있는 메커니즘이 있다는 걸
각 단계가 거쳐가는 여정
아키텍처가 거쳐가고 있는 거죠.개발자들이 할 수 있는 일은
아무것도 바꾸지 않고 이걸 추가하세요
전체 시스템에서 말이죠.이제 알아요, 알다시피, 가끔은
동기식 시스템은 편리하기 때문에
훨씬 더 단순해 보이죠.비동기 시스템에서는
이벤트 버스에 있는 이 모든 컴포넌트들은
어떻게 함께 작동할까요?가끔은 보일지도 몰라요
조금 벅차게 느껴지네요.그래서 생각해 봤는데
이걸 어떻게 단순화할 수 있을까요?어떻게 하면 더 쉽게 만들 수 있을까요?
예를 들어, 한 번도 사용하지 않은 개발자
이전에는 서버리스였는데 어디서부터 시작해야 할지 어떻게 알 수 있을까요?어떤 서비스가 필요할까요?이 둘은 어떻게 연동되나요?정말 더 쉽게 만들고 싶었어요.오늘 발표하게 되어 정말 기쁩니다.
간소화하고 가속화하는 AWS 애플리케이션 컴포저
아키텍처 설계, 구성 및 구축
서버리스 애플리케이션.[박수] 처음에는 드래그할 수 있는 시각적 캔버스인 캔버스로 시작합니다.
그리고 서버리스 리소스를 드롭하세요.이러한 리소스를 서로 연결하여 서버리스를 만들 수 있습니다.
애플리케이션 아키텍처.그게 정말 흔한 일이죠.
SAM 또는 변환 생성과 같은 작업
여기에서 파일을 아주 쉽게 얻을 수 있습니다.그래서 이걸 함께 만드세요.이런 걸 다르게 만드시잖아요.
캔버스에 여러 구성 요소가 함께 있습니다.버튼 클릭 한 번이면
클라우드포메이션 파일 또는 SAM 파일.물론 상호 작용도 가능합니다.
로컬 디스크와 함께 말이죠.따라서 모든 파일을 저장할 수 있습니다.
로컬 디스크에 저장되므로 다음 중 하나를 계속할 수 있습니다.
캔버스에서 작업하거나 일반적인 IDE를 사용하여 계속 진행할 수 있습니다.
애플리케이션을 빌드하기 위해서요.물론 이것도 마찬가지죠. 이제 시각적 모델이 생겼기 때문이죠.
서버리스 애플리케이션의 경우 공유하기가 정말 쉽습니다.
동료 또는 고객과따라서 정말 빠르게 배포할 수 있습니다.
이 환경에서, 애플리케이션 컴포저에서
AWS에서도 마찬가지입니다.그리고 개발을 가능하게 하죠.
훨씬 빨라졌어요.할 수만 있다면
특히 경험이 많지 않은 분들은
서버리스 애플리케이션으로 시작해보길 권합니다.
AWS 애플리케이션 컴포저를 사용하면 더 쉽게 사용할 수 있습니다.
구축을 시작하려면
이 애플리케이션들.자, 자연에 대한 또 다른 개념을 살펴볼까요?
거미줄에 있는 거미입니다.정말 놀라워요.거미가 제일 많으니까요
이 웹의 중심이죠.그리고 우리 세상에서는 이벤트 버스가
거미줄에 있는 거미입니다.이벤트브리지가 바로 그것입니다.이벤트 라우팅을 수행합니다.
EventBridge는 조정과 일정 예약 작업을 수행하며, EventBridge는 가장 빠른 방법 중 하나입니다.
우리가 보유한 서비스는 진화하고 있습니다.예를 들어, 올해는
스키마와 이벤트 아카이빙을 추가했습니다.
그리고 EventBridge 스케줄러를 추가했는데 정말 놀랍습니다.기본적으로 크론 둘 중 하나를 사용할 수 있습니다.
기능성부터 실제까지
수백만 개의 이벤트를 스케줄링합니다.따라서 이벤트브리지는 정말 대단한 역할을 합니다.
웹에서 사용할 수 있는 강력한 스파이더입니다.그리고 이 모든 것에서 중요한 것은
이벤트를 생각해 보면 이벤트는 구성 가능합니다.지금까지 이 이벤트를 보셨을 때
브로커 시스템이 작동하는 것은 실제로 가능하다는 것입니다.
여러 가지를 엮어서 더 큰 것을 만들어 보세요.
그걸 응용해서 말이죠.그리고 극한의 힘이 있습니다.
작곡할 때 말이에요.유닉스가 그걸 보여줬어요.유닉스에서의 작곡의 힘
파이프였죠.파이프를 사용하면 아주 쉽게 만들 수 있습니다.그리고 벨 연구소를 이끌었던 맥킬로이는
유닉스 초창기에 저는 이런 개념을 생각해 냈습니다.작은 컴포넌트가 있어야 한다는 것을요.
표준 인터페이스와 표준 형식의 상호 작용을 통해
따라서 더 큰 애플리케이션을 구축할 수 있습니다.
작은 구성 요소에서 말이죠.엄청 강력하죠.사실 톰슨과 리치는
그걸 집어들고 실행에 옮기기 시작했어요.사실 그들은 이미 생각했었죠.
실제로 상호작용할 수 있는 통합 메커니즘에 대해
파일 디스크립터죠.따라서 유닉스에서 컴포저블이 가능한 이유는 이런 작은 구성 요소들 때문입니다.
모두 표준 입력과 표준 출력을 사용하여 서로 통신합니다.
텍스트를 표준 형식으로 사용합니다.그러니까 이건... 이건 그냥
제가 지어낸 농담이에요.이제 액세스 로그가 있다고 상상해 보세요.의 ID를 필터링하고 싶으신가요?
오류가 발생한 고객.따라서 API 라인을 얻을 수 있습니다.
액세스 로그에서500개의 오류를 찾아보세요.어떤 이유에서든 고객 ID를 뒤집으면
뒤에서 네 번째 필드입니다.그러니까 선을 거꾸로 뒤집는 거죠.네 번째 숫자만 잘라내셨네요.거꾸로 뒤집으면 되죠.
정렬되고 독특해서 꼭 필요한 것은 아닙니다.하지만 정말 좋아 보여요
여기 이 줄에그래서 기본적으로 얻을 수 있는 것은
이 오류를 경험한 고객 목록을 고유한 항목으로만 정렬하여
중복 항목이 없습니다.쉽게 할 수 있습니다.그리고 아주 많이 만들 수 있어요.
이렇게 간단한 구성 요소를 사용하는 다양한 응용 프로그램이 많이 있습니다.아직도 놀라울 따름입니다. 이게 뭔지,
40년 후, 50년이 지난 지금, 이게
그렇게 강력한 컨셉이라고요?자, 물론 문제는
AWS 서비스로 이 작업을 수행할 수 있을까요?하지만 그건 좀 더 어렵습니다.알다시피, 톰슨과 리치
정말 쉬웠어요. 왜냐하면 켄 톰슨은 사실 밤이 지나고 나서 알게 됐으니까요.
파이프를 만들고 싶다고 해서 모든 응용 프로그램을 다시 작성했습니다.
그들이 가지고 있던 것들이었죠.글쎄요, 그렇게 쉽게 할 수 있는 건 아니죠.
AWS에서 말이죠.통일된 방법은 없습니다.
이벤트를 구성하기 위해서요.게다가 이게 전부이기도 하죠.
아니면 아예 접근하지 않을 수도 있죠.제가 키네시스에 연결하면
모든 이벤트가 들어왔어요.또는 DynamoDB 스트림을 통해서요.그리고 수많은 고객들이
그들은 실제로 이런 종류의 관계를 구축하고 싶어하죠.
서로 다른 서비스 간에는 많은 글루 코드를 작성해야 합니다.그래서 계속 생각했죠. 왜 우리는 할 수 없을까요?
여기서 파이프 원리를 사용해볼까요?오늘 발표하게 되어 정말 기쁩니다.
Amazon EventBridge 파이프를 사용하면 [박수] 쉽게 스티칭할 수 있습니다.
AWS 서비스를 함께 제공합니다.그리고 이것은 새로운 기능입니다.
메시지 통합을 위해 특별히 설계되었습니다.
다양한 AWS 서비스에서그러니까 포인트 투 포인트,
소비자를 상대로 한 이벤트 제작자와 이벤트를 조작하는 방법
실제로 파이프를 통해 흘러가는 거죠.그러니까 당신이 해야겠다는 생각이 들었어요.
더 이상 글루 코드를 작성할 필요가 없습니다.쉽게 스티칭할 수 있습니다.
이러한 서비스를 함께 제공합니다.그리고 실제로 원하신다면
이벤트가 소비자에게 전달되기 전에 조작하면 실제로 제공할 수 있습니다.
Lambda 함수 또는 포인트 스루
일부 코드를 실제로 실행하기 위한 단계별 함수 또는 API 게이트웨이
파이프를 통해 흐르는 이벤트를 조작하기 위해서입니다.또한 필터링 기능이 내장되어 있어 원하는 경우에만 사용할 수 있습니다.
소비자에게 전달해야 하는 이벤트의 실제 하위 집합을 얻으려면
그것도 추가할 수 있습니다.기본적으로 이것은 파이프입니다.
지금은 스테로이드를 복용하고 있어요. 쉽지만은 않기 때문이죠.
컴포저블, 사실 어빌리티이기도 하죠.
파이프를 통해 흐르는 이벤트를 조작할 수 있습니다.이렇게 하면 확실히 줄어들 것입니다.
건물을 짓고 있는 고객 중 상당수가 상당한 비용을 부담하게 되었습니다.
이런 종류의 시스템 또는 AWS 서비스를 하나로 묶는 것
더 이상 그럴 필요가 없습니다. 왜냐하면 이제
아마존 이벤트브리지 파이프.자, 이벤트를 생각해 보면
사실, 한 걸음 더 물러서 보죠.
평소처럼 말이에요.최근에 풋볼에 가고 싶었어요
게임, 이 경우에는 아스날
리버풀을 상대로아스날.[희미한 환호] 런던은 준비됐어.지금은 아니에요, 네, 좀 그렇죠
아스날 팬이에요. 왜냐하면 그들은 그냥
아약스 같아.아름다운 축구를 하고,
하지만 득점하는 건 잊어버리세요.[웃음] 네.하지만 넌 그럴 필요가 있어
아스날 회원이 티켓을 구매해야 합니다
경기를 위해서요.그래서 저는 다음 중 한 곳으로 갔습니다.
실제로 이 서드파티 브로커들은
이 티켓은 판매용인데 한 번도 사용한 적이 없었어요.그래서 알아보고 싶었어요.
그들이 믿을만한지 아닌지그리고 실제로 사용해봤는데
처음으로, 트러스트파일럿이요.트러스트파일럿 사이트에 갔어요.그리고 그들은 실제로 제게 줬어요.
브로커로서 그 티켓에 대한 정말 유효한 후기들
그리고 실제로 티켓을 샀어요.나중에 그 트러스트파일럿을 알게 됐어요
AWS 고객인데 실제로
매우 흥미로운 이벤트 기반 아키텍처입니다.그리고 저는 그들을 초대했습니다.
그리고 얘기해서 좀 드릴게요.
환각의 실제 사례
이벤트 기반 아키텍처.엔지니어링 디렉터 안젤라 티모프테를 환영합니다
트러스트파일럿에서[환호와 박수] 감사합니다.이 방에 있는 에너지가 너무 좋아요.저는 오늘 이야기를 나누러 왔습니다.
한 마디에 대해서요.힘들게 벌어 들일 수 있어요.
하지만 우리 관계를 형성할 수 있는 힘은 있어요
소비자 수를 늘려 비즈니스 성장을 촉진할 수 있습니다.
자신감.그 단어는 신뢰입니다.트러스트파일럿에서 우리는 다음을 가능하게 합니다.
사람들이 리뷰를 읽고 쓰고 회사를 찾을 수 있습니다.
그들은 신뢰할 수 있습니다.리뷰는 사람들에게 도움이 되기 때문이죠.
여러분과 저처럼 자신감이 생겼으면 좋겠어요.
우리가 사는 제품에 대해서요.그들은 또한 기회이기도 합니다.
기업이 배우고 개선할 수 있도록
고객이 받는 피드백.트러스트파일럿은 열려 있습니다
그리고 양면을 모두 아우르는 투명한 서비스
이 커뮤니티는 서로 더 가깝습니다.우리는 신뢰에 불을 붙이는데 도움을 줍니다
이 커뮤니티 내에서 우리는 가장 인정받는 상징이 되겠다는 사명을 가지고 있습니다.
인터넷에서의 신뢰.2007년부터 저희는 주택으로 성장했습니다.
1억 9천만 개 이상의 리뷰.하지만 우리의 성장은
선형적이지는 않았습니다.2021년 한 해에만 지금까지 받은 성과가 있었습니다.
4,700만 개 이상의 리뷰.그리고 리뷰 개수도
그 중요성은 지속적으로 증가하고 있지만
점점 더 중요해지고 있습니다.리뷰의 양이 많기 때문에 저희 서비스는
성공하려면 신뢰할 수 있어야 합니다.그리고 신뢰를 넓히려면
신뢰성과 무결성 둘 다요.하지만 신뢰의 확장은
대단한 업적은 아닙니다.오늘날 우리는 굳건한 위치에 있지만, 우리의 여정은
노력이 없었던 것은 아닙니다.어디서 시작했는지 살펴보면, 저희 플랫폼은 모노리스를 기반으로 구축되었습니다.
그리고 프레미스 데이터베이스에서도 말이죠.우리의 경험은 순조롭게 시작했지만, 곧 알게 되었죠.
우리의 성장을 감당할 수 없었어요.더 많은 사람을 고용하는 것은 정답이 아니었어요.어마어마한 계획, 조정
및 버그로 인한 변경 사항 되돌리기
모두 골치 아픈 일이었죠.그리고 더 많은 사용량이 발생했습니다.
신뢰성 문제가 심해져 제품 가동 중단이 발생합니다.최상의 경험은 아니었습니다.
사용자를 위해.지금도 트러스트파일럿의 기억이 나요.
초창기 크리스마스 파티
우리 개발자들이 모두 준비한 자리였죠.
돌아가서 일하기 위해서요전통이 되었으니까요.
이 행사 기간 동안 정전이 발생했으니까요.물론 이보다 더 좋은 방법이 있을까요?
플랫폼을 안정화시키려면 칵테일을 몇 잔 마셔야겠죠?변화가 필요하다는 걸 알았어요.그래서 우리는 다음으로 전환했습니다.
이벤트 기반 아키텍처죠.하지만 어떻게 작동할까요?리뷰는 분명히
우리 비즈니스의 핵심입니다.하지만 이제 한 가지를 살펴보죠.실비아를 만나 보세요. 그는 대단한 일을 했어요.
꽃집에서 일한 경험이 있는데 그걸 공유하고 싶어요.
트러스트파일럿에 리뷰를 써서 말이죠.실비아가 리뷰를 제출하면
무대 뒤에서 이벤트가 공개되고 있습니다.
아마존 SNS 주제에 관한 내용입니다.리뷰가 제출한 주제
구독자가 20명 이상이며 각 구독자가 구독자 수를 완료했습니다.
Amazon Lambda를 사용하는 다른 비동기 프로세스인 Amazon ECS
및 기타 아마존 서비스.이러한 프로세스 중 하나
리뷰를 게시하는 것인데, 이는 또 다른 Amazon SNS입니다.
이는 Amazon SQS가 소비하고 트리거한다는 점에서 눈에 띕니다.
기타 프로세스.그 중 하나가 데이터를 저장하고 있습니다.이제 적합한 데이터 스토어를 선택해 보겠습니다.
리뷰 수가 많다는 점에서 그 자체로는 어려운 일이었습니다.
매일 읽는 사람이 수천 개에서 수백만 개로 늘어났습니다.우리는 확장 가능한 책을 찾아야 했습니다.
유연하고 비용 효율적인 데이터베이스.그리고 Amazon DynamoDB가 눈에 띄었습니다.
적임자였죠.우리는 모두 예상대로 계획을 세울 수 있다는 것을 알고 있습니다.
블랙 프라이데이와 같은 이벤트의 트래픽 증가
그리고 사이버 먼데이는 이제 막 지나갔지만
모놀리스 아키텍처죠.하지만 저희 최신 이벤트는
Amazon DynamoDB의 아키텍처와 사용을 통해 얻을 수 있는 이점은 다음과 같습니다.
유연성이 향상되었습니다.예상한 것과 예상치 못한 것 모두를 의미합니다.
트래픽 증가는 쉽게 처리할 수 있습니다.예상치 못한 사건 중 하나
아마 우리 모두가 아직도 기억할 수 있는 것은 COVID-19 입니다.모두가 어쩔 수 없이 온라인으로 구매했어요.우리 모두는 누구를 믿어야 하는지 알아야 했습니다.그 결과, 검색 및 검토가 이루어졌습니다.
Trustpilot에서 그 어느 때보다 중요해졌습니다.이로 인해 트래픽이 더 많이 증가했습니다.
우리가 예상했던 것보다 훨씬 더 많아요.하지만 클라우드 탄력성과 클라우드 사용 덕분입니다.
이벤트 기반 아키텍처를 통해 플랫폼을 확장할 수 있습니다.
예상한 트래픽과 예상치 못한 트래픽 증가에 대비하여 저희 팀은 계속 집중할 수 있습니다.
제품 출시 및 혁신에 대해규모 및 성장 다루기
트러스트파일럿에서 리뷰를 작성하는 것도 한 가지 과제입니다.하지만 진정성과 유용성을 유지하는 것이 좋습니다.
신뢰할 수 있는 정보는 전혀 다릅니다.다시 실비아의 리뷰로 돌아가면
모든 것을 하나의 이벤트로 취급함으로써 우리는 같은 입장에 서게 되었습니다.
쉽게 통합하고 발전할 수 있도록
기존 아키텍처.예를 들어 구독을 통해
리뷰 제출 주제 및 Amazon Kinesis 사용
규정 준수에 데이터를 전송하기 위한 실시간 수집용
그리고 사기 탐지 모델을 스캔할 수 있습니다.
100% 리뷰가 완료되었습니다.Amazon Step Function을 사용하면서 워크플로를 조율할 수 있습니다.
악의적인 행동이나 리뷰의 특이한 패턴에 대해 조치를 취하기 위해
몇 가지만 말씀드리자면아키텍처 보유
이벤트를 확장하고, 조정하고, 대응할 수 있는 것이 바로 우리에게 필요한 것입니다.
비즈니스 요구 사항을 충족하려면 무결성을 보호해야 합니다.
당사 플랫폼의 증가뿐만 아니라
팀 생산성.하지만 미래는 어떨까요?우리는 불확실성 속에 살고 있습니다
그리고 급변하는 시대.우리 모두 현명하게 지출해야 합니다.따라서 Trustpilot의 관련성이 더 높아집니다.
사람들이 더 나은, 더 신뢰할 수 있는 결정을 내릴 수 있도록 돕기 때문입니다.
누가, 무엇을 구매하는지에 대해여기서 멈추지 않겠습니다.더 많은 기능을 제공하기 위해 투자할 예정입니다.
도움을 드리기 위해,
개발을 도와준 AWS에 감사하다는 말을 전하고 싶습니다.
더 신뢰할 수 있는 세상. 그리고 감사합니다, 여러분,
들어주셔서 감사합니다.[환호와 박수] 고마워요, 안젤라.앞서 말씀드린 것을 잊어버렸는데, Angela는 AWS의 일원입니다.
히어로즈 프로그램.[응원과 박수] AWS 히어로즈 프로그램
53개국의 253명의 AWS 전문가를 표창합니다.
지식 공유와 커뮤니티 만들기에 열정이 있는 사람
더 나은 것은 타의 추종을 불허합니다.정말 큰 영향을 끼칩니다.
커뮤니티에.모든 분들께 감사의 말씀을 전하고 싶습니다.
오늘 이 자리에 함께한 영웅들 모두가 수고를 아끼지 않았어요.
실제로 우리 모두를 더 좋게 만들기 위해서죠.고마워요.[환호와 박수] 여기저기 다 있어요.이런 것들 중 하나입니다.
AWS 이벤트에서 우리는 수십만 달러를 기부합니다.
배울 수 있는 수업을 제공합니다.하지만 가끔은 사람들에게 배우는 것이 가장 좋은 방법일 때도 있습니다.
바로 옆에 앉으세요.왜냐면 진짜 들리잖아요
일종의 어려움이나 장애물, 이런 패턴이 우리에게 정말 잘 맞았어요.
이 특별한 상황에서 말이죠.가끔은 할 수 없는 이야기들도 있어요.
AWS 전문가인 우리의 이야기를 들어보세요.정말, 항상 당부드립니다.
방에 있는 모든 사람들이요, 서로 이야기를 나누기 위해서요.
서로에게서 배우는 거죠. 그게 최고니까요.
얻을 수 있는 정보의 출처.자, 제 생각에는 한 가지 특정한 아키텍처가
더 널리 퍼져 있는 것은 우리가 어떻게 운영할 수 있을지에 대해 고민하는 것입니다.
글로벌 규모의 우리 아키텍처.현재 30개 지역이 있습니다.
전 세계.즉, 할 수 있다는 뜻이죠.
실제로 애플리케이션을 고객과 가까운 곳에 배포하세요.
얻을 수 있는 것이죠.어떻게 할 수 있죠?쉬운 방법이나 쉬운 방법, 가장 편리한 방법은 무엇일까요?
운영이 필요한 유형의 아키텍처를 구축하세요.
글로벌 규모로?저는 믿습니다. 그리고 굳게 믿습니다.
이벤트 기반 아키텍처는 여러분이 사용해야 할 아키텍처라고 생각합니다.
제대로 작동해야 하는 애플리케이션을 구축하기 위해
글로벌 규모로그리고 우리 스스로도 해오고 있습니다.
이미 꽤 오래됐죠.그 방법을 좀 더 자세히 알아보죠.
이러한 글로벌 시스템 중 하나는 실제로 Amazon과 AWS에서 작동합니다.제 눈에는 DynamoDB가
데이터베이스의 강자 중 하나입니다.일상적으로 수조 달러에 달합니다.
그리고 오늘날에도 유지 관리를 통해 수조 건의 요청이 들어오고 있습니다.
지연 시간이 한 자릿수이며 작동 가능
글로벌 규모로그래서 우리가 할 수 있는 일은 아주 많습니다.
DynamoDB의 내부를 살펴보면서 배울 수 있습니다.그리고 이 경우에는 다음 사항만 살펴보겠습니다.
실제로 한 가지 특정 기능을 살펴보죠. 글로벌 테이블은 이런 모습입니다.
실제로 구현되었습니다. 왜냐하면 우리 모두 배울 수 있다고 생각하기 때문이죠.
이를 통해 자체 애플리케이션을 만들면
이는 글로벌 규모로 운영되어야 합니다.따라서 글로벌 테이블은 다음과 같은 결과를 제공합니다.
로컬 DynamoDB 인스턴스에 쓰기만 하면 실제로
해당 업데이트를 다른 지역에 자동으로 복제합니다.
필요한 부분을 표시해 두었습니다.
글로벌 테이블을 사용할 수 있습니다.그러면 다중 지역이 제공됩니다.
멀티액티브 데이터베이스.여전히 로컬 읽기 작업을 하고 있습니다.
아주 빠르고 빠르죠. 실제로
테이블은 전 세계에서 사용할 수 있습니다.그리고 그 밑에는 뭐가 있을까요?
이들은 액티브 액티브 아키텍처라고 부릅니다. 즉, 어떤 아키텍처에도 쓸 수 있다는 뜻이죠.
이러한 다양한 리전의 DynamoDD 인스턴스
업데이트가 자동으로 전파됩니다.
다른 인스턴스로.자, 여기선 동기화가 안 돼요.순전히 비동기식입니다.
환경.그건 그렇고, 대안은 다음과 같을 것입니다.
일종의 컨트롤러이고 실제로는
구독자 설정?그거 별로 믿을만하지 않아요.
아키텍처.이걸 어떻게 만들까요?정말 사용하겠어요?
그 안에 일종의 동시성이 있는 걸까요?원한다면 그럴 수도 있겠죠.하지만 정말 갖고 싶다면
중단이 발생하는 곳에서도 글로벌 규모로 운영할 수 있는 가용성이 뛰어난 시스템
항상 발생합니다.네.두가지 형태로 실행해야 한다면
인스턴스에 대한 페이스 커밋을 하면 그럴 가능성이 큽니다.
상당수의 거래가 실패할 거라는 거죠.자, 이제 빌드하면
비동기식 접근 방식 사용.그래서 우리도 다른 사람들처럼 말이죠.
이 방에서는 여러 가지 기능을 활용할 수 있습니다.
DynamoDB가 제공해야 하는 기능입니다.그 중 하나가 DynamoDB 스트림입니다.그래서 복제 기능을 구축했습니다.
DynamoDB가 이미 제공하고 있는 기능을 기반으로 합니다.기본적으로 복제 서비스는
DynamoDB 스트림에서 업데이트를 읽은 다음 업데이트에 전파합니다.
필요한 기타 지역.또한 다른 지역에도
복제 서비스. 유럽에서 권한을 얻으면 자동으로 전파됩니다.
미국에도 마찬가지죠.그럼 이 안에 뭐가 들어 있냐고요?
복제 서비스는 기본적으로 전체 컬렉션입니다.
수천 개의 리플리케이터가 있습니다. 왜냐하면 실제로
다양한 테이블을 복제하세요.그리고 우리는 SQS 대기열을 사용합니다.
이 이벤트 기반 아키텍처의 코디네이터로서 말이죠.리플리케이터 중 하나라도 고장날 경우
쉽게 다시 시작할 수 있고 대기열에서 다시 읽을 수 있습니다.
실패한 부분을 정확히 찾아내는 것
리플리케이터가 멈췄어요.그래서 수천 마리를 가질 수 있죠.
이런 리플리케이터들이죠.그래서 그들은 보살피겠지요.
이런 다른 환경으로 복제하는 것이죠.순전히 이벤트 중심입니다.
아키텍처.자, 패턴을 생각해보면
이벤트 기반 아키텍처에서 볼 수 있는 것은
이 작업을 제대로 수행하려면 다음이 필요합니다.
변경 데이터 캡처 기능.무엇이 있었는지 볼 수 있다는 것
전파해야 할 데이터의 변경 사항
다른 지역으로.이걸 비동기식으로 만들어야 합니다.이것을 동기식 시스템으로 실행
거의 불가능에 가깝습니다.비동기화는 당신에게 줄 것입니다
실패 관리, 그것은 당신에게 능력을 줄 것입니다
시스템을 매우 빠르게 발전시키면 실제로 문제를 해결할 수 있을 것입니다.
복제와 관련해서요.따라서 자가 치유 리플리케이터는 대기열을 사용하는 것이 중요합니다.
따라서 이러한 시스템을 매우 쉽게 구축할 수 있습니다.
내결함성이 뛰어난 방식으로 말이죠.물론, 아시다시피,
이런 패턴을 많이 볼 수 있습니다.결국, 전 세계는
패턴으로 만들어졌습니다.자연 어디에서든 볼 수 있죠.그래서 우리는 이런 패턴을 따라야 합니다.물론 컴퓨터로서의 우리도
과학자들, 우리 모두 읽어 봤어요.
유명한 갱 오브 포 (Gang of Four) 의 디자인 패턴에 관한 책이죠.하지만 아마존에서는 저희 제품을 계속 운영하고 있습니다.
빌더 라이브러리의 패턴.다시 한 번 말씀드리지만, 다음 사항을 숙지하시기 바랍니다.
건축업자 서재에 있는 글들을 한 번 보세요. 소장품이기 때문이죠.
지금까지 쌓아온 아마존 엔지니어들의 지식에 대해
신뢰성과 확장성이 뛰어난 글로벌 시스템 구축
수년에 걸쳐 말이죠.그래서 새로 나온 두 개의 기사는
클레어 리구오리의 작품을 소개해 드릴게요. 제 CI/CD 파이프라인이에요.
제 릴리즈 캡틴이자 두 번째 릴리즈 캡틴인가요?
데이비드 야나체크의 작품으로 종속성 격리 사용이라고 불립니다.
동시성 오버로드를 막기 위해서죠.훌륭한 기사.많은 기사가 다루고 있습니다.
건축 패턴에 대해 다루고 있지만, 기사 중 상당수는
제가 말씀드리고 싶은 것도 다루겠습니다.
개발과 관련된 어려운 작업이죠.설정해야 하는 것에 대해
사용자 환경, 환경 유지 방법.
롤백 수행 방법, CI/CD 파이프라인 통합 방법
파이프라인에.기본적으로 이 모든 것들은
제 눈에는 좀 무거운 것 같아요.
아무 상관도 없는 개발 중단
코드 작성과 관련해서요?그래서 여러분이 열심히 일해야 한다고 상상해 보세요.
코드 베이스가 다르거나, 모든 것이 느려집니다.
다양한 유형의 도구를 사용해야 하는 경우
다양한 환경에 있는 것들이죠.그래서 저희가 정말 생각해 봤는데
늘 그렇듯, 어떻게 제거를 할 수 있을까요?
이 무거운 짐을 맡기시나요?오늘 발표하고 싶은데요
모든 힘든 작업을 덜어주는 아마존 코드카탈리스트
이는 개발에 관한 것입니다.[박수] 이제 개발자들과 함께 만들었죠.
팀과 클라우드를 염두에 두고 있죠.이건 정말 도움이 되죠.
AWS에서 애플리케이션을 계획, 개발, 협업하고 제공합니다.사용하는 데 필요한 모든 도구를 갖추고 있습니다.
아이디어에서 생산까지 훨씬 더 빠르게.기본 컨셉은
청사진입니다.예를 들자면,
여러분이 만들고 싶은 것이 바로 단일 페이지 애플리케이션입니다.그러면 모든 도움을 받을 수 있을 것입니다.
이 모든 것을 실제로 설정해야 합니다.실제로 다음을 추가할 수도 있습니다.
자체 청사진이나 조직에 여러분이 따르기를 원하는 일련의 표준 청사진이 있을 수 있습니다.
애플리케이션을 개발하는 방식으로요.그리고 청사진은 아니죠.
그냥 코드를 만들죠, 그렇죠?다른 건 다 해줘요.프로젝트 파일을 설정합니다.통합 도구, 소스 제어, CI/CD를 구성합니다.
이슈 관리.그리고 이 서비스를 통해 다음을 수행할 수 있습니다.
실제로 GitHub와 같은 인기 있는 도구로 바꿔보세요.물론 중요한 부분은
이 모든 것에서 여러분은 쉽게 할 수 있습니다.
CI/CD 파이프라인을 설정하세요. 그렇지 않으면 설정하지 않아도 됩니다.
시스템이 자동으로 설정해 줄 것입니다.그리고 빌드 액션을 정의할 수 있습니다.
정말 원한다면 실제로 임포트할 수도 있습니다.
여러분의 GitHub 액션.아주 쉽게 배포할 수 있는 방법이기도 하죠.
AWS에서, 서비스, 지역 전반에서
계정 전반에 걸쳐 글로벌 방식으로또한 코드 지원 기능이 내장되어 있습니다.
커버리지, 유닛 테스트, 자동화,
보고서 생성, 제가 고려하는 모든 것들
개발이 무거웠지만 사실 우리에게 도움이 되지는 않습니다.
애플리케이션을 더 빠르게 빌드하기 위해서죠.사라지길 바래요.
이제 너한테는 그 모든 힘든 일들이야.제가 항상 겪는 문제 중 하나는
엔지니어, 개발자, 건축업자들이 실제로 일을 해야 한다는 거죠.
다양한 코드 베이스와 함께 말이죠.다음과 같은 버전이 있을 수 있습니다.
실제로 파이썬 2.7 대 3.9에서 실행해야 합니다.호환되지 않아요.그리고 실제로 전환할 수 있다는 것도
이 두 환경을 사용하여 동일한 애플리케이션을 구축하는 두 환경
꽤 어렵습니다.CodeCatalyst가 이걸 만들어
아주 쉽게 전환할 수 있습니다.
이런 환경들 사이를 오가면서 어려운 작업을 할 필요 없이
그러려면 리프팅이 필요하죠.그래서, 알다시피, 자동화가 가능하죠.
이 코드와 종속 항목으로 프로젝트를 채우면 즐겨 사용하는 IDE를 사용할 수 있습니다.
클라우드9, VS 코드, 젯브레인처럼 말이죠.복제 및 공유가 가능합니다.
개발 환경은 정말 간단합니다.실제로 사람들을 초대하는 거죠.
프로젝트에 참여하려면 해야 할 일만 남았습니다.
이메일 주소를 입력하고 바로
이제 해당 팀원이 액세스할 수 있습니다.
모든 코드, 모든 문제에
그리고 모든 배포 보고서에.물론 AWS가 그 이상이라는 것을 항상 알고 있습니다.
AWS 서비스에만 국한된 것이 아니라, 특히 서비스가 다운되었을 때
개발까지.그래서 우리는 핵심을 확장했습니다.
코드카탈리스트와 JIRA, 슬랙, 그리고 물론
유명한 IDE는 클라우드9, VS 코드, 제트브레인즈 같은 것들이에요.
물론 GitHub는 이 모든 것에 통합되어 있습니다. 바로 이러한 서비스가 바로 이러한 서비스이기 때문입니다.
우리는 모두 지금 사용하고 있고 CodeCatalyst는 이 기능을 통합하고 있습니다.
기본적으로 사용자 환경에 적용됩니다.그리고 실제로, 아시다시피
빠르게 움직여서 집중할 수 있게 하는 것이 전부입니다.
코드 작성에 정말 집중하고 너무 많은 시간을 들이지 마세요.
그 주위의 모든 문제에 대해서요.그래서 생각해보면
이벤트 기반 아키텍처는 그렇지 않습니다.
더 쉽게 진화할 수 있을 뿐만 아니라 훨씬 더 빠르게 진화합니다.예를 들어, 최근에 만났어요.
영국에 있는 Cinch라는 회사가 있습니다.3D 기술을 사용하는 회사의 한 예입니다.
자동차를 보여드리기 위해서요.그래서 기본적으로 집에 있을 수 있어요.
이 차를 봐요, 알다시피, 어떤 것인지 결정하세요.
사고 싶은지 아닌지그리고 실제로, 그들은 지었습니다.
이걸 6개월 만에 말이죠.예를 들어,
이벤트 기반 아키텍처의 정말 좋은 예입니다.차량이 업데이트되면
차량 업데이트를 받은 후 소모됩니다.
검색 서비스를 통해 정보를 제공합니다.
오픈소스인 OpenSearch로그러면 이 모든 구성 요소들이
이벤트를 게시하고 검색할 수 있으며 쉽게 확장할 수 있습니다.
그들을 위한 환경.사실 한 가지는
그 세계에서 매우 흥미로운 것은 패턴입니다.
점점 더 많이 생겨나는 것 같아요.그들은 실제로 모든 것을 가지고 있다는 것을
그들의 차들은 3D로 볼 수 있습니다.모든 차량은 인터페이스를 통해 360도로 캡처됩니다.
웹사이트에서는 그냥 자동차 주변을 둘러볼 수 있고, 주변을 걸어다닐 수 있습니다.
내부를 들여다 볼 수 있습니다.이런 패턴이 정말 떠오르고 있는 것 같아요.
우리의 디지털 세상에서요.결국 세상은 여러 가지입니다.
차원적입니다.그냥 한 줄이 아니에요.우리가 2D에만 익숙한 게 아니에요. 왜 그런가요?
우리가 가지고 있는 기계 때문이죠.키보드, 스크린, 마우스, 손가락, 그게 우리가 만든 방식이에요.
우리의 디지털 시스템과 우리가 이 시스템과 상호작용하는 방식.하지만 현실 세계는 아니에요.현실 세계는 다차원적입니다.그렇다면 어떻게 하면 디지털 시스템을 현실 세계와 비슷하게 만들 수 있을까요?
가능한 한?그리고 우린 정말 대단한 걸 봤어요
그 점에서 큰 진전이 있었죠.Alexa 및 기타 음성 시스템
몰라도 디지털 시스템에 액세스할 수 있습니다.
디지털 시스템이라는 것을요.이걸 사용할 수 있어요.
우리 모두가 사용하는 것이죠.이 채널은 슬랙 채널이 아닙니다.
우리가 무언가를 공유하는 곳이죠.여기 앉아서 내가 얘기해요.그러니까 정상이고, 정상적인 방식이죠.
서로 상호작용한다는 것, 그러니까 우리가 써야 할 것은
디지털 시스템에 접근하기 위한 일반적인 기술.소울 머신은 실제로 인수해 본 회사입니다.
이것은 한 걸음 더 나아간 것입니다.그들은 실제로 디지털을 가지고 있습니다.
감정을 표현할 수 있는 성격
그들과 상호작용하는 동안, 또 다른 지극히 정상적인 현상이죠.
자연스러운 상호작용 방식이죠.듣는 것만으로는 충분하지 않아요.
내가 말하는 건, 다들 내 얼굴을 보고 있는 거잖아.뭐가 중요하다고 생각해요?내가 싫어하는 게 뭐야?리버풀을 예로 들죠.알렉사와 소울 머신도 마찬가지고요.
이게 정말 첫 단계입니다.그리고 우리의 현실 세계도
다차원적입니다.따라서 우리는 그래야 합니다.
우리의 디지털 시스템에서 세상을 바라보며
다차원적으로 말이죠.다시 말씀드리지만, 정말
최근에 멋진 경험을 했어요.생일 선물을 받았어요
새 신발 한 켤레를 만들어주고 싶었어이제 제 발이 못생겼어요.그래서 지금 제가 있다는 게 놀라웠어요.
제 발에 꼭 맞는 신발을 신었을 거예요.그래서 우리는 이 이야기로 넘어갔습니다.
제임스 테일러와 아들에 대해 말하자면, 그들은 정말...
그들은 1857년에 구두 수선공으로 일했어요.그리고 그들은 같은 것을 사용합니다.
오늘날의 기법과 프로세스는 예전과 같습니다.
백 년 전에요.그들은 라스트 (last) 라고 불리는 것을 생산하는데, 이것은 물리적인 것입니다.
제 신발을 나무로 표현한 건데, 그 배경에는
신발이 만들어지고 있어요.정말 놀랐어요.
사실, 165년 된 이 회사는
사실 아주 현대적인 제품을 사용하고 있었습니다.
이 일을 해낼 수 있는 기술이죠.의자에 앉을 수 있어요
그리고 실제로 만들어낸 카메라가 잔뜩 달린 장치에 발을 올려 놓았죠.
제 발을 3차원 사진으로 찍었죠.그리고 그들은 사용하고 있었습니다.
그 이미지는 그걸로 마지막까지 만들어서 신발 한 켤레를 만드는 것 같았어요
저한테 딱 맞았어요.그리고 진지하게 생각하게 됐어요.
3D 기술이 이미 세상에 어떻게 스며들었는지우리는 그 목표를 향해 나아가고 있습니다.정말 보기 좋네요.
사실 165년이 지난 지금, 이 회사는 혁신하고 사용하고 있습니다.
3D와 같은 디지털 기술은 실제로 발전할 것입니다.
그들의 제품.그리고 이들이 유일한 것은 아닙니다.기억하세요, 이건
제품 구매 방법.제프 베조스가 저희 제품을 설명해 드린 적이 있습니다.
고객들은 반항적으로 불만을 품고 있습니다.고객의 기대를 의미합니다.
절대 고정되지 않고 올라갈 뿐입니다.이건 사실이에요. 특히
우리가 보는 쇼핑 패턴.불과 몇 년 전만 해도
집에 놓을 신발 한 켤레나 가구를 사고 싶으면
정적인 사진을 봐야 했어요.이게 어땠는지 몰랐을 거라는 걸
발에 딱 맞을 수도 있고 집에서 어떻게 보일지고객이 실제로 주문하는 방식으로는 네 가지 버전을 주문할 것입니다.
같은 신발을 집으로 보내주세요.
실제로 신어보세요.하나를 골라서 보내세요
나머지 세 개는 뒤로.제 눈에는 이게
아주 나쁜 고객 경험이기도 하고 나쁜 경험이기도 합니다.
소매업체 자체를 위해서요.그럼 거기서 더 잘할 수 있는 게 뭐가 있을까요?우리는 고객이 상호 작용할 수 있는 방법을 찾아야 합니다.
우리와 함께하는 것은 현실 세계와 같습니다.3D 이미지가 필요해요.
2D 화면에서 그런 일이 일어날 수 있는지 확인해보세요.다행히 브라우저가 시작되었습니다.
쉽게 사용할 수 있는 WebGL과 같은 기능을 소개하기 위해서입니다.
어디에나 표시할 수 있는 3D 이미지.하지만 수학이 많이 필요하긴 하지만
사실 이런 이미지들을 만들기 위해서요.자, 여기서 볼 수 있는 것은
아마존에서 만든 것입니다.
버추얼 트라이온이라고 합니다.기본적으로 증강현실을 이용해서 신발이 어땠는지 살펴보는 거죠.
발에 맞게 보일지 아니면 어떻게 보일지
가지고 계신 다른 옷들과 함께 말이죠.이거 진짜 확실해
고객이 실제로 제품을 구매할 수 있다는 것이죠.
많이 주문하지 않아도 되고 싶어하는 제품
그런 다음 여러 개를 돌려보내세요.프로덕션이라고 불립니다.
버추얼 트라이온.이제 3D 모델은 가치가 있습니다
천 장의 사진들사실 약 13만 장의 사진이죠.3D 모델을 만들고 싶은데요.
2D 이미지를 사용하면 각 모델에 대해 한 단계 더 나아갈 수 있습니다.
X축과 Y축의 축은 결국
13만 장의 사진으로 말이죠.그리고 실제로 추가해보면
여기에 세 번째 축을 추가하면 수백만 개에 달할 수 있습니다.
필요한 이미지 수.지금은 모든 산업에서 사용되고 있습니다.
그리고 우리는 이것이 훨씬 더 쉬워지도록 하고 싶습니다.13만 장의 사진을 찍을 수는 없습니다.
단 하나의 3D 이미지를 만드는 것이죠.최대한 가까이 다가가야 해요.자, 이제 이것들이 꼭 필요했어요.
그런 다음 생성하려면 일종의 복잡한 CAD 도면을 사용해야 합니다.
그걸로 3D 이미지를 만들었죠.하지만 한 가지 기술이 있습니다.
사실 그건 이미 100년이 넘었죠.
사진측량이라고 합니다.이것이 얼마나 많은지에 대한 과학입니다.
아주 좋은 근사치를 만들려면 2D 이미지가 정말 필요할까요?
3D 세계에 대해서요.그리고 많은 고객들이
전체 이미지 세트를 가져오는 이런 종류의 파이프라인이 이미 있습니다.
그런 다음, 예를 들어 머신러닝을 활용하세요.
서로 연결하기 위해서요.그리고 이벤트 중심으로
물론 아키텍처를 만들고, 그 둘을 연결해서 만들어내죠.
다양한 물체 형태 등 3D용 PDF는 없습니다.약 6~7가지 종류가 있습니다.
생성해야 하는 인기 있는 객체 모델
이 모든 파이프라인에서 말이죠.저희 고객 중 상당수는 말 그대로 수천 명의 고객을 보유하고 있습니다.
이런 제품들 중 정말 펌핑이 잘 되는 제품들이요.
이런 것들이 이 파이프라인을 통해 이루어지죠.자, 많은 연구가 진행되고 있습니다.
이 세상에서 벌어지고 있는 일이죠.NRF라는 게 있는데
이것은 신경 복사장입니다.이것이 바로 과학입니다.
얼마나 많은 이미지가 필요할까요? 그리고 나서 머신 러닝을 사용할까요?
격차를 실제로 메우기 위해서죠.사실, 좀 비슷해요.
인간으로서 우리가 일하는 방식이죠.우리 모두는 우리가 똑똑하다고 생각해요
주변 시야.사실이 아니에요.사실, 우리는 잘 보지 못합니다.
주변기기에 있는 진짜예요.하지만 그 스티치는 우리의 두뇌입니다.
이런 것들이 모여서 빈틈을 메웁니다.이것이 바로 NRF의 역할이기도 합니다.자, 이제 기계를 어떻게 활용할 수 있을까요?
이러한 격차를 메우는 방법을 배우시나요?사실 필요한 건 정도에 불과합니다.
3D 물체의 이미지 12개, 너무 복잡하지 않다면
NRF를 사용하여 3D 모델 생성.그리고 이것이 점점 더 발전하고 있다는 점을 감안하면
너무 널리 퍼져 있는 것 같아서 솔직히 3D는
곧 어떤 비디오만큼이나 널리 퍼질 것입니다.
이제 웹에서 볼 수 있습니다.5~6년 전,
3D는 여전히 훨씬 더 독점적이었죠.요즘에는 모두가 사용하고 있습니다.
어디에서든, 3D는 똑같을 것입니다.물론 그들은
2D 이미지보다 훨씬 더 유용합니다. 왜냐하면 이미지는 실물에 가깝기 때문입니다.
자연 세계가 우리에게 주는 것이죠.그리고 이 물체들은 어떻게 생겼는지도
현실 세계와 상호작용하세요.그리고 기억하세요, 증강 현실
신발 때문이죠.하지만 이 램프를 사면 어떨까요?이제 생활 속에 넣을 수 있어요.
방, 어떻게 생겼지?그나저나, 외형만 그런 게 아니라
전원을 켰다고 상상해 보세요.어떤 효과가 있나요?
방에?이 램프를 옮기면 어떻게 되나요?
테이블 반대편으로?여러분이 할 수 있는 이 모든 일들은
사실, 지금쯤이면 View In Your Room이라는 제품에 쓰였는데 실제로는
곧 더 널리 퍼질 거예요.
모든 종류의 다른 환경에서요.물론, 그건 당신이 아니란 뜻이죠.
오브젝트의 3D 오브젝트만 만들면 됩니다.
관심이 있으시겠지만, 가지고 계셔야 할 것도 있습니다.
그것이 있는 환경을 정확하게 표현한 것이죠.그러니까 이미 숫자가 있어요.
그 안에서 정말 잘 작동하는 엔진들이 많죠.언리얼, 유니티, 그리고 사실
저희는 오픈 3D 엔진에 상당한 투자를 해왔습니다.
O3DE는 유지되고 있습니다.
환경을 제공하는 리눅스 파운데이션에 의해
3D 환경을 실제로 보여드리기 위해서요.사실 그 중 일부이기도 합니다.
언리얼을 제어하는 에픽게임즈.그들도 이 일에 참여하고 있다고요?있는지 확인하고 싶은데요.
클라우드에서 정말 잘 작동하는 3D 엔진을 사용할 수 있습니다.파트너도 있습니다.
이 분야에서는 실제로 효과가 있죠.그 중 하나가 매터포트입니다.매터포트를 사용하면 실제로 사용할 수 있습니다.
3차원 표현을 위한 휴대폰
당신 방의 모습이요넣을 수 있는 장치가 있잖아요
핸드폰을 켜면 방 안을 뒤집을 거예요.
방을 정확히 표현하거나 실제로 사용할 수도 있습니다.
LIDAR가 내장되어 있어 정확한 영상을 만들 수 있는 그들의 카메라입니다.
환경을 표현한 것이죠.그러면 모든 데이터가 전달됩니다.
3D 플랫폼에 넣으면 다른 것을 만들 수 있습니다.
그 위에 애플리케이션이 있죠.예를 들어, 원하는 경우
특정 환경을 위한 가상 안내입니다.개체에 태그를 지정할 수도 있습니다.
이 3D 환경에 있는 것들이죠.그리고 태깅을 통해 쉽게 할 수 있죠.
AWS IoT 트윈메이커에 연결하는 경우를 예로 들 수 있습니다.여기 보이는 것은 환경입니다.
Matterport에서 스캔했습니다.거기 들어가서 볼 수 있어요
저 안에 있는 다른 장치들을 보세요.
실제로 클릭해서 정확한 상태를 확인할 수 있습니다.
장치의 실시간.실제로 결합하여 이 작업을 수행할 수 있습니다.
매터포트를 AWS IoT 트윈메이커와 함께 사용하세요.그런데 대시보드는
우리 모두가 즐겨 사용하는 그라파나 (Grafana) 일 뿐이죠.이 모든 융합이 가능하죠.
모델, 센서, 데이터가 모두 합쳐집니다.하지만 그거 알아요?그걸론 충분하지 않아요.왜냐하면 우리한테 뭔가가 있기 때문이죠.
인간이 할 수 있는 일은 사실 꽤 까다롭습니다.
디지털 세상에서요.넣으려고 해본 적이 있다면
차 안에 있는 여행 가방을 2D로 생각해도 소용이 없습니다.3D 감각이 정말 필요해요.
이 모든 여행 가방을 차에 쌓아둘 수 있게 말이죠.이름이 뭔지 알아야겠네요
공간 지능.자, 우리 대부분은 이걸 가지고 있어요. 전부는 아니에요.그래서 인간이 이해할 수 있게 도와주죠.
디지털 렌즈를 통한 물리적 세계.그리고 세상은 다음과 같이 구성되어 있습니다.
이런 많은 디지털 물체들을 우리는 이해해야 합니다.
그것들이 서로 어떻게 연관되어 있는지그리고 그 때문에
공간 지능이 필요하죠.지도를 생각해 보면, 지도는
아주 기본적이에요. 우리 모두 사용하죠.정말 맛있어요.
A에서 B로 가는 법?참고로 둘은 2차원이기 때문에 정확하지는 않습니다.
세계를 표현한 것이죠.우리가 로드 트립 중이었다는 거 알아요
한번은 크로아티아에 갔는데 지도에 그렇게 적혀있더군요. 네,
그 거리를 지날 수 있었어요. 하지만 모든 걸 다 알려주지는 못했어요.
거리가 얼마나 넓었는지.날 믿어, 물러서자
그 거리는 큰 모험이었어요.그리고 트럭을 운전한다면
A에서 B로 가는 방법을 알고 싶을 수도 있지만, 알아야 할 것도 있습니다.
육교의 높이를 정확히 알아내려면
실제로 그 밑으로 내려가세요.특히 이런 세상에서는
예를 들어 자율 주행과 같은 단순한 2D 지도로는 충분하지 않습니다.맵은 다음과 같이 생각해야 합니다.
서로 다른 시간대로 계층화되고 계층화되어 있습니다.도로는 아마 변하지 않을 것입니다.
몇 년 동안 도로의 차선이 바뀔 수 있습니다.
1년 단위로.그러면 도로공사가 생길 수도 있습니다.
몇 달이 걸리거나 실제로 그 자리에 멈춘 차들이 있을 수도 있습니다.
시간별 또는 일별로.모두 가지고 있어야 합니다
그 정보로 물건을 만들고 싶으면
자율 주행 자동차처럼요.이 예시 중 하나는
예를 들어, Zoox.Zoox는 함대를 만들고 있습니다.
라이드/우박 공유 역할을 할 자율 주행 차량.물론 도시에서는
역동적인 측면도 많죠.Zoox는 예측을 할 수 있어요
차량, 사람, 심지어 차량의 궤적
주변에 있는 동물들이 합리적으로 행동할 수 있도록
그리고 안전한 운전 결정.이러한 차량에는 다음이 필요합니다.
공간 지능, 그리고 센서의 융합이 필요합니다
그리고 맞춤형 ML 모델.그리고 지각 시스템에는
이 데이터들은 제 생각에는 카메라, LIDAR, 적외선 레이더에 대한 것입니다.
그리고 그런 것들도요.이 모든 센서들이 합쳐져 360도 자기장을 만들어냅니다.
그 주변에서요.이제 보시죠?
그것을 시각화한 것입니다.차는 사용하지 않아요.
그 시각화.맵은 소프트웨어로 액세스할 수 있어야 합니다.
이러한 시스템이 시각적으로만 작동하는 것이 아니라 제대로 작동하려면하지만 저희는
사물을 시각화하기 위해서요.그리고 우리는 실제로 시각화하고 싶습니다.
콘솔에서도 생각할 수 있는 모든 것을 시각화하는 것을 좋아합니다.
우리 시스템의 상태.시스템에는 시각화가 필요하지 않습니다.
그 자체만으로도 모두 우리를 위한 것이죠.인간은 시각화해야 합니다.
이런 것들이죠.제 생각엔 회사가
이 도전을 가장 잘 이해하는 사람은 에픽게임즈입니다.네이선 토마스를 환영해 주세요.
언리얼 엔진 담당 부사장 (VP) 이 자신들의 기술을 보여주기 위해
경험을 만드는 데 사용되고 있습니다.
미래를 위해서요.네이선.[음악 재생] 안녕하세요, 여러분, 멋져요
오늘 re:Invent에 오게 되어 기쁩니다.잠깐 얘기하고 싶은데요
오늘은 저희가 사용하는 게임 엔진인 언리얼 엔진에 대해 말씀드리겠습니다.
포트나이트와 같은 자체 게임을 제작하여 사용할 수 있도록 하기 위해서입니다.
모든 것을 만들 수 있는 전 세계 수천 명의 게임 개발자에게
소규모 독립 게임부터 최대 규모의 트리플 A 타이틀까지
우리 모두가 알고 사랑하는 게임이죠.언리얼 엔진이 만들어졌습니다.
크리에이터가 제작자를 위해 제작합니다.정말 중요한 일이에요.
혁신을 주도할 수 있는 공생 관계
자체 게임 개발을 통해 엔진에 통합한 다음 이를 가능하게 합니다.
언리얼 엔진을 사용하는 분들께지난 몇 년 동안 저희는 다음 사항에 정말 집중했습니다.
엔진의 포토리얼리즘과 시네마틱스 수준을 높인 것이 도움이 되었습니다.
게임을 넘어서 다양한 분야에 적용할 수 있습니다.
다양한 산업.사용자를 만나고 있습니다
자신만의 창의성을 통해 실시간 3D 혁명을 주도하세요
우리 도구에 적용되었습니다.그들은 우리가 할 수 없었던 온갖 일을 하고 있어요.
상상도 할 수 있었죠.자, 언리얼 엔진
이 이야기의 일부입니다.메타휴먼과 같은 우리의 도구는
트윈 모션과 리얼리티스캔은 이 이야기의 또 다른 부분입니다.
그 어느 때보다 쉽게 제작할 수 있도록 정말 큰 도움이 되고 있습니다.
실시간 3D 경험을 공유하세요.그럼 잠깐 얘기해 볼게요.
그들에 대해서도 마찬가지죠.자, 물론
이 모든 도구는 개발 과정에서 AWS를 사용합니다.
그리고 운영은 우리에게 유연성을 제공하는 데 도움이 됩니다.
그리고 성장에 필요한 규모도 있죠.이제, 세계를 건설할 때
가장 혁신적인 게임 엔진은 그냥 지나가는 게 아닙니다.
다양한 기능을 출시했습니다.꼭 사용하셔야 합니다.
직접 기술을 써서 경험을 쌓아보세요
한계를 뛰어넘고 무엇이 가능한지 보여주는 거죠.이것이 바로 우리가 건물을 지은 이유입니다.
매트릭스 어웨이큰즈, 언리얼 엔진 5 익스피리언스.이건 규모가 크지만,
포토리얼한 오픈 월드 환경.역동적이고 AI를 기반으로 합니다.
무한한 스토리텔링의 가능성을 실제로 보여줍니다.
언리얼 엔진 5에 대해서요.그리고 차세대에도 출시했습니다.
PS5, Xbox X 같은 콘솔에서 이 레벨을 달성할 수 있다는 걸 보여드리죠.
하드웨어의 실시간 충실도
오늘 바로 사용할 수 있습니다.세상은 정말 인상적이에요.약 16킬로미터예요.4만 대의 자동차가 있어요.
주행도 가능하고 파괴도 가능하죠.약 35,000명의 메타휴먼이 있습니다.
여기저기 돌아다니는 보행자들.약 7,000채의 건물이 있어요.
수십억 개의 폴리곤이 있죠.그리고 이 중 많은 부분이
후디니에 의해 절차적으로 생성되었는데, 그 말은
아티스트의 작업량이 훨씬 수월하죠.논리적으로 일관성이 있습니다.
그리고 믿을 수 있는 세상이죠.그리고 저희는 정말 믿습니다.
이는 많은 미래의 토대를 나타냅니다.
우리 모두가 함께 하게 될 3D 경험 말이죠.역사적으로 이런 유형의 대형 제품은
3D 생성을 위한 대규모 오픈 월드 제작은 쉽지 않습니다.
언리얼 엔진은 여러 가지 방법으로 이 문제를 해결하고 있습니다.하지만 말씀드렸듯이 언리얼 엔진은
여기서는 이야기의 일부에 불과합니다.한 가지 확실한 건
저 세상에 캐릭터를 넣고 싶어요
지금 만들고 있는 거요.그래서 메타휴먼 크리에이터를 출시했습니다.
수익을 올릴 수 있는 온라인 웹 서비스입니다.
단 몇 분 만에 완성도 높은 디지털 휴먼.그리고 이것들은 무료로 사용할 수 있습니다.
언리얼 엔진에서 말이죠.이것은 사용된 것입니다.
하는 데 수백만 달러가 들었죠.EC2 GPU 인스턴스를 사용하여
페타바이트의 백엔드 데이터에서 수백 기가바이트로 줄인 데이터 처리를 도와주세요.
인스턴스에서 실행한 다음 메쉬로 내려갑니다.
언리얼 엔진으로 익스포트할 수 있습니다.물론 그렇게 했을 때는
데이터 보호와 즉각적인 가용성이 필요했습니다.
그리고 고품질 사용자 경험.그래서 저희는 픽셀 스트리밍을 사용하고 있습니다.
이러한 속성을 얻기 위해서요.그러면 정말 할 수 있어요.
대규모로 사용자에게 다가가세요.물론 그 높은 퀄리티도
경험과 규모 덕분에 큰 성공을 거두었습니다.우리는 2백만 명이 넘는 메타휴먼을 보았습니다.
현재까지 만들어졌습니다.한 가지 아이디어를 드리자면
2017년으로 돌아가면 아마도 그랬을 것으로 추정됩니다.
이 중 75,000개가 생산 중입니다.따라서 가용성에 따라 엄청난 수요가 증가하고 있습니다.
서비스의 내용이죠.이제, 또한, 개발하면서
여러분의 경험은 공유하고 싶어질 것이고, 또 얻게 될 것입니다.
협업하기 위해서요.그래서 트윈 모션은 우리의 3D입니다.
언리얼 엔진을 기반으로 제작된 시각화 툴
인터페이스가 더 단순해졌습니다.고품질을 공유할 수 있습니다.
이미지, 파노라마 및 360도 동영상.그리고 무엇보다도
우리는 트윈 모션 클라우드를 구축했습니다. 트윈 모션 클라우드는 AWS에서 실행되는 웹 서비스로, 인터랙티브 스트리밍을 할 수 있습니다.
경험을 브라우저로 공유하고 공유했는데, 그럴 필요가 없다는 뜻이죠.
추가 하드웨어나 추가 소프트웨어를 설치해야 합니다.메타휴먼 크리에이터처럼
EC2 GPU 인스턴스, 이 경우에는 G4 및 G5에서 실행됩니다.이를 통해 실제로 다음을 수행할 수 있습니다.
가장 필요한 프로젝트로부터 우리가 원하는 높은 참여도
G4를 계속 지원하면서 G5 인스턴스와 같은 것들이 필요한 경우
그렇게 많은 하드웨어가 필요하지 않은 프로젝트를 위한 인스턴스
비용도 절약할 수 있죠.그리고 물론, 여러분도
여러분의 경험, 건물을 원하게 될 거예요.
그 안에 최고 품질의 자산과 환경을 갖추는 것이죠.따라서 사진 측량은 예술입니다.
그리고 2D 이미지로 3D 에셋을 만드는 과학도 있습니다.
손으로 직접 만드는 대신 말이죠.훨씬 간단하고 훨씬 빠릅니다.
그리고 더 높은 품질.이에 대한 표준은
에픽의 데스크톱 애플리케이션인 리얼리티캡쳐 (RealityCapture) 는 정말 훌륭합니다
간단하게 울트라를 만들 수 있습니다.
이미지로 만든 사실적인 모델.리얼리티스캔은 우리의 새로운 휴대폰입니다.
동일한 기능을 제공하는 애플리케이션
스마트폰을 위한 놀라운 파이프라인.처리에 AWS를 사용합니다.
백엔드에서 포인트 클라우드와 프리뷰 메시를 생성하여 더 쉽게 만들 수 있도록 도와줍니다.
올바른 이미지 세트를 만들고 있는지 알아보기 위해
고퀄리티 에셋을 얻기 위해서죠.그리고 마지막에는 여러분이 만들고 있는 그 자산이
우리 환경에 맞게 Sketchfab에서 공유할 수 있습니다.
공동 공유를 위한 것입니다.비공개 베타 버전이 끝났습니다.
10만 세션.수만 개의 모델
이미 만들어졌고, 우리는 수백만 개로부터 이런 것을 보았습니다.
처리 중인 사진들.이를 처리하기 위해 RDF를 사용합니다.
PostGres를 세션 정보로 사용합니다.우리는 S3와 클라우드프론트를 사용합니다.
파일 스토리지용.모든 처리는 당사에서 수행합니다.
G4 인스턴스에서는 ElastiCache를 사용합니다.
더 빠른 경험을 위해.정말 흥미진진한 것들을 봤는데,
베타 버전에서는 고퀄리티 모델이지만 정말 기대가 됩니다.
오늘 저희가 공개했다는 소식을 발표하려고 합니다.
iOS에서 리얼리티스캔을 실행합니다.[박수와 응원] 그럼 안드로이드가 곧 따라올 거예요.
하지만 지금 다운로드해서 사용해 보시길 권합니다.혁신의 결합은
저희가 언리얼 엔진과 다른 툴을 통해 이를 주도하고 있습니다.
결과물을 거의 구별할 수 없게 만드는 데 정말 도움이 됐어요.
현실에서 말이죠.이건 정말 가교 역할을 하죠.
기괴한 계곡과 거대한 사정거리 해방
이러한 도구의 새로운 사용 사례는 다음과 같습니다.
여기 보이는 프로젝트 앙투아네트는 새로운 도구 모음입니다.
언리얼 엔진을 기반으로 비행 시뮬레이션을 만드는 데 사용합니다.점점 더 많아지고 있습니다.
점점 더 많은 새로운 SIM 유형이 출시되고 있습니다. 증강현실,
논모션 SIM, 그리고 이건 성장에 정말 큰 도움이 되고 있어요.
항공 업계에서 받을 수 있는 교육 시간은
이건 정말 중요하죠.정말 기대가 됩니다.
우리 앞에서 볼 수 있는 실시간 3D 미래.하지만 이러한 변화는 그렇지 않습니다.
당신 없이도 일어날 수 있는 일이죠.앞으로 나아갈 모든 혁신가들
이 기술을 한계까지 밀어붙이기 위해서요. 그래서 기술이 이렇게 많이 쓰이는 이유죠.
제가 설명드리자면 오늘은 무료라고 말씀드리죠.
다양한 사용 사례에 적합합니다.예를 들어, 도시 샘플
언리얼 5 엔진 익스피리언스인 매트릭스 어웨이큰스를 기반으로 합니다.
오늘 다운로드할 수 있습니다.AWS Ambit 시나리오 디자이너는
또 다른 훌륭한 출발점입니다.그러니까 그걸 이용해서 바로 시작할 수 있죠.
위에 구축된 시뮬레이션 애플리케이션
언리얼 엔진에서 말이죠.에픽게임즈의 사명은 역량을 강화하는 것입니다.
새로운 세대의 크리에이터.여러분이 푸시하는 모습을 정말 보고 싶습니다.
우리가 할 수 있는 경험의 한계는
정말 상상도 할 수 없는 일이죠.너한테는 그런 힘, 힘이 있잖아
사람들을 하나로 모으고 상상력을 이어주기 위해서요.
실생활과 함께 말이죠.그게 궁금하시다면
기대가 되신다면 지금 바로 참여하시길 권합니다.정말 고마워요.[음악 재생] 고마워요, 네이선.정말 놀라워요.우리의 디지털 시스템은 아닐 수도 있습니다.
시각화가 필요하지만 분명히 필요합니다.
그리고 그가 보여준 것은 정말 놀랍습니다.사실, 그 중 하나는
네이선이 말한 건 앰빗이었는데 제가 정말 하고 싶은게
이걸 여러분께 알려드리기 위해서요. 여러분이 할 수 있는 일이니까요.
지금 바로 시작하세요.저는 앰빗을 좋아해요.다시 말씀드리지만, 이건 이런 것들 중 하나입니다.
그러면 작업이 훨씬 쉬워집니다.따라서 AWS Ambit 시나리오 디자이너는 오픈 소스 도구 세트입니다.
이를 GitHub에서 사용할 수 있으므로 다음과 같은 작업을 수행할 수 있습니다.
클릭 한 번으로 대규모 3D 콘텐츠
버튼 몇 개 중 하나.그래서 그 첫 번째 기능은
아시다시피 월드 제네레이션이죠.
필요한 3D 환경.쉽게 만들 수 있습니다.도시를 가리키기만 하면 됩니다.
오픈스트리트맵에서 Ambit은 즉시 3D 세계를 만들 것입니다.
오픈스트리트맵에 있는 데이터에서.아무것도 할 필요가 없습니다.
그걸로 말이에요.매번 가슴이 벅차오릅니다.
한 번 해봐요.그리고 당신이 할 수 있는 일은 바로 당신입니다
그 세계에 장애물을 놓을 수 있고 그에 대한 규칙을 사용할 수 있습니다.
이러한 장애물을 어떻게 배치해야 하는지, 어떻게 진화해야 할까요?
특정 파라미터에 대해그런 다음 추가할 수 있습니다.
여기에 환경적 영향을 주죠.일광을 원하시나요, 밤을 원하시나요?
날씨 패턴 같은 것들, 이 모든 종류의 시나리오들
실제로 추가할 수 있습니다.그리고 한 번의 버튼 클릭으로
시나리오를 자동으로 생성할 수 있습니다.그리고 다음과 같은 시나리오가 있을 수 있습니다.
JSON 또는 JTLF를 사용하면 인기 있는 어떤 것으로든 가져올 수 있습니다.
시뮬레이션 또는 시각화 도구.실제로 세트를 설정할 수 있습니다.
시나리오 생성에 사용되는 파라미터로 말 그대로 수천 개의 다양한 시나리오를 생성할 수 있습니다.
사용자 환경에 즉시 사용할 수 있습니다.
시뮬레이션 또는 시각화.제 생각엔 항상 그랬어요.
혁신에 대해 생각해 보세요. 저는 이런 패턴이 정말 마음에 들어요.
아마존의 근간을 이루고 있습니다.1997년 서한으로 돌아가면
제프 베조스가 주주들에게 쓴 글의 핵심은 바로 이것입니다.우리는 계속해서 실험할 것입니다.
우리는 측정하고 그것을 통해 배울 것입니다.즉,
긍정적이든 부정적이든, 배워야 하지만 또 필요한 것은
실험할 수 있으려면 말이죠.그리고 물론, 실험도
소매업에서는 쉽습니다.저희는 항상 그렇게 하겠다고 결심했습니다.
고객 앞에 물건을 가져오세요.그들도 투표할 수 있어요.
그들의 발로 말이죠.잘 안 돼요.
다시 시작할게요.하지만 그로부터 가장 중요한 것은, 할 수 있다는 것입니다.
실험하고, 측정하고, 배우는 것이죠.이제 더 큰 규모로, 특히
당장 조작할 수 없을 수도 있는 세상에서는
현실 세계에서는 시뮬레이션이 핵심입니다.그리고 모든 종류의 회사가 있습니다.
오늘날 다양한 시나리오에서 시뮬레이션을 사용하고 있는 회사들이죠.하지만 모든 것은 실제로 시작되었습니다.
아주 오래 전이에요.기원전 200년에 로마 장군들이 기부하고 있었습니다.
전투를 시뮬레이션하고 테스트하기 위해 전투원들에게 목검을 제공했습니다.
온갖 종류의 전략.그리고 한참 후에, 레오나르도 다
놀라운 혁신가인 빈치는 실제로 건물을 짓기 시작했습니다.
소형 모델, 그의 첫 번째 혁신
그가 모델을 만들기 시작하기 전에요.우리 세상, 디지털 세상에서, 시뮬레이션의 선구자들은
저는 폰 노이만과 울람이었습니다.두 사람은 시뮬레이션을 개척한 수학자였습니다.
디지털 세상에서는 수학적 모델을 사용했습니다.
예를 들어 중성자의 행동을 이해하기 위해서요.이건 전 세계의 문제였어요.
최초의 컴퓨터 시뮬레이션.그들은 발명가이기도 했습니다.
몬테카를로 시뮬레이션에 대해서요.몬테카를로 시뮬레이션, 이름
이미 말씀드렸듯이, 카지노에서는 위험을 모델링할 수 있습니다.
진심이에요!물론 지금은 사용되고 있습니다.
다중 금융 위험 모델링 방식에 사용됩니다.
카지노를 넘어서 말이죠.하지만 이건 처음이었어요.
시뮬레이션이 만들어졌습니다.아주 원시적이고
하지만 정말 잘 작동했어요.그리고 더 가까워지면
2000년대의 세계에는 이런 거대한 워크스테이션과 데스크탑이 있었습니다.
최신 하드웨어로 말이죠.하지만 대부분의 시뮬레이션은
실행될 하드웨어와 메모리에 국한된 것이었죠.
이미 구할 수 있었을 겁니다.따라서 다양한 유형이 있습니다.
시뮬레이션이 만들어지고 있었습니다.거의 모든 업종에는
고유한 시뮬레이션 유형과 그것이 생명과학 분야인지 여부
신약 개발, 금융 서비스 위험 모델링을 하기 위해서죠.석유와 가스는 실제로 소모됩니다.
지진 데이터를 가져온 다음 모든 종류의 데이터를 분석할 수 있습니다.
그 위에 모델링을 하죠.그리고 우리에겐 많은 파트너들이 있습니다.
사실, AWS에서 실행되는 시스템이 있고 다음과 같은 기능을 제공합니다.
특정 고객을 대상으로 하는 이런 종류의 시뮬레이션.예를 들어,
앤시스 같은 회사죠.이제 전문 시뮬레이션을 사용할 수 있게 되었습니다.
엔지니어링 회사, 토목 공학 회사, 그리고 많은 학생들을 위한 소프트웨어입니다.
실제로 토목공학을 예로 들자면, 여기서 건물을 짓습니다.
그들의 시스템을 사용하죠.그래서 여긴 일종의 상태죠.
오늘날의 최첨단 기술이죠.그럼 시뮬레이션을 하는 이유는 무엇일까요?자극을 받는 이유는 무엇일까요?음, 우선, 그냥
플레이할 수 없는 신체적 한계
실생활에서요.생각해보면
교통량을 생각해 보면 아주 큰 도시죠.
그 곳을 통과하면서 변화하고 싶어지죠.
교통이 어떻게 움직이는지, 그건 아무것도 아니에요
실생활에서도 할 수 있겠죠.그리고 그냥 알아내려고 노력하세요.예를 들어, 제가 참여했었죠.
COVID 팬데믹 기간 중 한 프로젝트를 진행하면서 한 건 정도
사람들이 들르지 않는 가장 붐비는 쇼핑 거리 중 하나였죠.
서로와의 거리.그래서 의문이 들었어요.
가운데, 어떤 장소에는 화분이
사람들이 자연스럽게 들를 수 있도록 이 상점가에
한 반 미터 거리?뭐, 그건 별거 아니에요
그냥 실생활에서 실험해 볼 거예요.
그런 다음 측정해 보세요.시뮬레이션에서는 이 작업을 수행할 수 있습니다.그리고 시뮬레이션은 당연하죠.
3차원적이기 때문에
현실 세계를 시뮬레이션하기 위해서죠.제가 어떻게 배웠는지 생각해보면
지리학은 아틀라스에서 배웠어요.그리고 저는 정말 매력적이었어요.저는 머나먼 나라에 대한 꿈을 꾸곤 했어요.
그리고 언덕과 그런 것들.하지만 실제로 아틀라스는 2D였죠.저는 아직도 깜짝 놀랐어요.오늘날 아이들은 비행을 통해 지리를 배웁니다.
시뮬레이션된 3D 세계를 통해 말이죠.주변을 볼 수 있습니다.
에베레스트 산이 얼마나 높은지요.네팔에서 호랑이를 볼 수도 있습니다.이런 모든 것들이 가능합니다.
시뮬레이션의 세계에서 말이죠.이런 경우를 대비해서 이렇게 하는 거죠.
물론 혼자서 비행을 할 수는 없죠.
히말라야로.그래서 시뮬레이션이 효과적이죠.
여기서 중요한 역할을 하죠.우리에겐 신체적 한계가 있습니다.그리고 물론 많은 것들이 있습니다.
원하지 않는 위험한 상황
이걸 현실에서 해보기 위해서요예를 들어, 많은 사람들이
요즘 도로에서 볼 수 있거나 이런 회사들이 있는 자율주행차
모든 용도의 시뮬레이션을 중심으로 제작되었습니다.Aurora를 생각해 보세요. 오로라는 다음 중 하나입니다.
기술을 개발하고 있는 회사들
자율 트럭 운송의 경우 LIDAR와 카메라, 레이더를 사용하여 수백 미터를 감시합니다.
그들 앞에서요.하지만 이것들을 사용하는 것은 매우 중요합니다.
이 정보는 시뮬레이션입니다.그냥 엉망으로 만들 수는 없으니까요.
현실 세계에서 트럭을 가지고 돌아다닐 수 있어요. 왜냐하면 그렇게 되면
정말 위험해요.예를 들어, 그들의 시스템은
2백만 회 이상의 무방비 왼손 회전을 가상으로 수행했습니다.
현실 세계에서는 한 번 해보기 전이었죠.그리고 또 다른 이유는,
시뮬레이션을 하는 또 다른 이유는 조작할 수 있기 때문입니다.
네 번째 차원이죠.그건 시간의 문제죠.그리고 본질적으로, 여러분은 할 수 있습니다.
수백만 개의 시뮬레이션을 동시에 수행하여 단 몇 시간 만에 수년간의 테스트를 수행할 수 있습니다.여기 삼림 벌채를 보실 수 있습니다.
볼리비아에서 벌어지고 있습니다.물론 이런 일도 있었죠.
몇 초 단위가 아니라 수십 년에 걸쳐 말이죠.하지만 시뮬레이션에서는 속도를 높일 수 있습니다.
보통 몇 년이 걸리던 결과물을 볼 수 있는 시간이죠.
완료하는 데에도 몇 년이 걸리죠.그러면 분명히 시간을 단축할 수 있겠죠.
원한다면 속도를 늦출 수도 있습니다.
훨씬 더 세밀한 제어.하지만 다른 유형도 있습니다.
오늘 살펴보려는 시뮬레이션은 공간 시뮬레이션입니다.우리 주변의 현실 세계는
엄청 복잡하죠.이것은 수천 개의 이벤트에 대한 것입니다.
그 주위에는 수천 개의 개체가 계속 있습니다.도시 교통에 대해 생각해 보세요.
수십만 개의 사례.생각해 보세요, 이렇게 큰 규모를 아시겠죠?
현재 진행 중인 미식축구 경기와 팝 콘서트
그리 멀지 않은 곳에 교통이 어떻게 흐르나요?
거기 갈 수 있는 도시?어떻게 조작해요?우리가 뭘 해야 만들 수 있죠?
그 모든 게 안전한가요?그리고 이것들 각각에 대해 생각해 보세요.
그걸 시뮬레이션해 보신다면 말이죠.말 그대로 수십만 명이 있잖아요
거기 다양한 개체들이 있어요.그리고 이 개체들 각각은
고유한 위치, 속도, 행동을 가지고 있습니다.
상호작용 행동.그리고 예전에는 이런 유형을 실행했었죠.
단일 머신에서 시뮬레이션을 하려면 다음이 필요하기 때문입니다.
이 작업을 수행하려면 상당한 양의 메모리가 필요합니다. 왜냐하면
수많은 시뮬레이션, 수많은 개체
메모리를 많이 차지하며, 특히 메모리의 상태가 어떤지
공간들 사이를 이동하면서 말이죠.그리고 아담은 벌써 화요일이에요
심스페이스 위버 (SimSpace Weaver) 를 발표했는데요, 조금 더 자세히 알아보고 싶습니다.
여러분과 함께 이 문제에 대해 더 자세히 알아보도록 하겠습니다.그래서 심스페이스 위버는 공간을 만들어냅니다.
누구나 시뮬레이션에 접근할 수 있고 성능이 크게 떨어집니다.
그걸 가로막는 장벽이죠.그래서 어쩌면 가장 좋은 방법일지도 몰라요
이에 대해 말씀드리려면 예시를 들어보셔야 합니다.네, 몇 년 전에
작년 초에 저는 만나러 하와이로 갔어요
테라포메이션이라는 회사죠.그리고 그들은 싸우기 위해 노력하고 있습니다.
1조 달러를 만들겠다는 목표가 만들어낸 기후 변화
나무가 최고의 탄소인 것처럼 전 세계의 나무들도
상상할 수 있는 포획 엔진.그래서 생각해봐야 할 게 있어요.
시뮬레이션이 실제로 집중하고 있는 회사에 어떻게 도움이 될 수 있을까요?
재조림에 대해서요.질문의 종류는 무엇인가요?
물어보고 싶은 질문이나 그에 대한 답변
정말 필요하겠어요?알다시피, 어디에 두세요?
당신의 자원은?씨앗을 어디에 심으세요?어떤 종류의 나무
여기에 심어야 할까요?탄소 포집량은 얼마나 되나요?
실제로 몇 년 동안 벌어지고 있는 일인가요?생물 다양성을 장려할 수 있을까요?왜냐하면 밝혀진 바에 의하면
생물 다양성은 생태계의 건강에 매우 중요합니다.씨앗이 어디에 있는지 고려해야 합니다.
어떤 종류의 씨앗인가요?식물의 출처가 어디인지,
밀도, 식재 방법, 서로 얼마나 떨어져 있는지, 어떤 영향을 미치는지
이 숲은 야생동물과 야생동물에게 미칠 영향
숲에 영향을 미칩니다.그럼 시작해 볼까요?
이 예시를 들어보죠.여긴 불모의 땅이네요.
그렇죠?그래서 여긴 거대한 공간인데
실제로 수십만 명이 살 수도 있습니다.
나무와 식물.그래서 시뮬레이션은 - 상상해 보세요
이 영역을 시뮬레이션으로 봅시다.사실 이것은 수 마일에 달합니다.그래서 그리드로 나누었죠.시뮬레이션을 해보면 다음과 같이 질문할 수 있습니다.
씨앗을 심기에 가장 좋은 장소는 어디일까요? 와 같은 질문
최고의 생물 다양성과 전반적인 성장을 이루기 위해서요?여기에 심으면 어땠을까요?그러면 시뮬레이션을 통해
속도를 높이면 미래를 볼 수 있습니다.그냥 시뮬레이션일 뿐이기 때문이죠.
실험을 해볼 수도 있죠.시작한다고 상상해 보세요.
다른 지역에서요.무슨 일이 일어날지 상상해 보세요
여기서부터 시작한다면?나무가 자라는 게 보이시죠?
패턴은 매우 다릅니다. 주로 주변의 물이 나무를 지탱하고 있기 때문이죠.
발아에도 도움이 됩니다.그리고 시뮬레이션에 있는 모든 물체들은
별개의 개체입니다.그리고 이 개체들 중 일부는 움직입니다.
환경과 상호작용하기도 하죠.물론 나무는 움직이지 않아요.하지만 시뮬레이션을 통해 알 수 있습니다.
발아는 어떻게 일어나는지, 씨앗은 어떻게 이동하는지
전 세계에.심스페이스를 만드는 이유는 무엇일까요?
위버의 독특한 점은 이 시뮬레이션 방식입니다.
배포되어 있습니다.우리의 공간 시뮬레이션
그리드로 나누어져 있습니다.시뮬레이션 로직은 각 개별 셀에서 작동합니다.
그리드에서.각 셀은 로직을 추적합니다.
해당 영역 및 모든 개체에 대해
그 세포 안에서요.그리고 모든 물체들은
별개의 개체입니다.나무, 씨앗, 동물.세포는 다음과 같이 분포합니다.
컴퓨팅 인스턴스의 클러스터.이러한 인스턴스는 함께 작동합니다.
전체 시뮬레이션을 마치 하나의 시뮬레이션을 가지고 있는 것처럼 처리하기
초대형 메모리 모델.그리고 하나의 통합된 것처럼 보입니다.
그 안에 모든 것이 있는 공간.여러분에게는 그럴 수 있는 고객들이 있습니다.
여기에서처럼 연결해서 시각화하세요.심스페이스 위버 핸들
모든 네트워킹 및 메모리 관리 처리
동기화를 처리합니다.이 모든 것이 여러분을 위해 이루어지고 있습니다.모든 힘든 일들
공간 시뮬레이션을 위해 해야 할 일이죠.
심스페이스 위버에서 처리합니다.이제 수백만 명을 추적할 수 있습니다.
개체, 나무, 관목, 야생 동물, 사슴, 새
모두 개체입니다.동물들은 그리드 안에서 경계를 넘나들죠.
그리고 국경을 넘으면 실제로 이동하게 되죠.
그리드에 있는 다른 세포들로요.그들은 실제로 자유롭게 움직입니다.
양도 중입니다.그리고 실제로는 나무가 자라지 않았던 것 같았어요.
중간 부분에서요.솔직히 그렇게 생각해요
그건 사슴 때문이에요.저는 그런 환경에서 살았어요.
사슴이 많아요.전부 다 먹어요.그래서 나무가 보이는 것 같아요.
그곳에서는 잘 자라지 않아요. 사실 그 때문일 수도 있습니다.
사슴이 묘목을 먹고 있어요.우리가 건물을 짓는다면 어떤 일이 벌어질까요?
저기 울타리가 있어요?그럼 더 많은 나무가 보이시죠?
울타리가 있고 사슴이 더 이상 없기 때문에 성장할 것입니다.
어떤 영향도 끼치지 않아요.쉽지 않은 일들이죠.
현실에서 해보기 위해서요.나무가 자라는 데에는 15년이 걸릴 수도 있습니다.시뮬레이션은 사실입니다.
어떤 일이 벌어질지 여기에 표현한 것입니다.
현실에서 만약 실제로
이런 접근법을 취하세요.이것은 테라포메이션과 같은 회사의 한 가지 방법일 뿐입니다.
시뮬레이션을 사용할 수도 있겠네요.그럼 다른 것들은 뭐가 있을까요?
시뮬레이션해 볼 수 있을까요?다른 것들은 뭐죠?이제 시뮬레이션할 수 있습니다.
SimSpace Weaver의 교통 패턴 또는 대중 교통 네트워크를 사용하면
아니면 공급망 인프라?이렇게 할 수 있는 이유는
공간 지능 세계에 있는 수백만 개의 개체들 중에서
심스페이스 위버가 제공하는 것이죠.그렇다면 왜 이 문제에 관심을 가져야 할까요?
이 모든 것 말이에요. 멋진 사진들만 빼고요.
우리가 만드는 거요?시뮬레이션이 중요한 것 같아요
혁신에서 중요한 역할을 하죠.이러한 '만약' 시나리오를 모두 플레이할 수 있기 때문에
현실에서는 할 수 없는 디지털 시스템에서도 말이죠.그리고, 아시다시피, 할 수 있는 일은
실제로 영향을 주지 않으면서 원하는 만큼 실험할 수 있습니다.
시스템을 꺼내기 전에 현실 세계에서
현실 세계로.그리고 제 생각엔 국경에서 진짜 패턴이 나타나고 있는 것 같아요.
디지털 시스템과 실제 현실 세계 사이
서서히 사라지고 있습니다.전에도 이미 본 적이 있는데,
알렉사.많은 고객들이
Alexa 뒤에는 복잡한 분산 시스템이 있다는 사실을 몰라요.그래서 이게 점점 모호해지고 있습니다.따라서 우리 중 더 많은 사람들이
이는 실제로 실제 상황과 함께 작동해야 하는 시스템을 구축합니다.
여기서는 월드 시뮬레이션이 매우 중요합니다.자, 미래는 어떨까요?시뮬레이션이 정말 마법의 열쇠일까요?
미래에 시스템을 구축하기 위해서일까요?물론 이제 이해하는데 도움이 되죠.
그 밑에 있는 현실의 법칙.하지만 이 시뮬레이션은
복잡한 물리적 엔진을 사용해서 매우 현실적이긴 하지만
근사치일 뿐이죠.점점 더 복잡해질 것입니다.
시간이 지날수록 더 현실적이긴 하지만, 그래도 언젠가는
해결할 수 없는 많은 문제들이 있습니다.자, 예를 들어, 원하신다면
분자 구성과 같은 아주 작은 것들을 시뮬레이션하기 위해서요.계산에 많은 노력이 필요했습니다.
모델 수에 따라 기하급수적으로 확장됩니다.
시뮬레이션에서오늘날 우리는 몬테카를로를 자주 사용합니다.
시뮬레이션 또는 시뮬레이션을 위한 DFT
분자의 거동은 정말 유용하죠
우리가 세상을 이해하도록 도와주는데 성공했죠.하지만 이는 여전히 중요한 의미를 지닙니다.
현재 현실 세계의 근사치입니다.우리가 살고 있다는 점을 감안하면
시뮬레이션에서도 이제 쉽게 할 수 있습니다.
20년 앞으로요.시뮬레이션을 하고 싶으면 어떨까요?
근사치를 사용하지 않고?훨씬 더 많은 메모리가 필요하겠죠.
사실 세상에 있는 것보다도 말이죠.하지만 이것은 단지 문제일 뿐입니다.
20년 전의 컴퓨터나 현재의 컴퓨터에서요.양자 컴퓨팅을 사용하면 10대 안에 가능할지도 모릅니다.
아니면 지금으로부터 20년 후?양자 시뮬레이터, 퀀텀
오늘날 화학 기반 시뮬레이션은 정확하지 않습니다.
슈퍼컴퓨터가 그러하듯이, 양자 하드웨어 때문이죠.
아직 개발 중입니다.하지만 최첨단 기술을 시험해 보기 위해서요.
여러분이 사용할 수 있는 프로토타입인 양자 컴퓨터
AWS 브래킷.많은 젊은 기업들이 성장해 왔습니다.
양자 컴퓨터는 모두 AWS를 통해 사용할 수 있습니다.
실험해 볼 수 있는 브래킷.자, 이제 양자 컴퓨터의 세계는
예를 들어 저희 회사의 풍부한 세트를 가지고 있지는 않습니다.
아직 개발 도구가 많이 있습니다.도구는 무엇인가요?
그게 필요한가요?알고리즘에 대해 어떻게 생각하세요?
그런 특별한 세상에서는 브라켓이 정말 민주화되죠.
양자 컴퓨터를 사용할 수 있게 되면 혁신을 확실히 도울 수 있습니다.
양자 컴퓨터 기반 구축의 소프트웨어 측면이죠.그리고 그들은 실제로 능력을 가지고 있습니다.
불가능할 수도 있는 질문에 답하는 것은
현재 클래식 컴퓨터용입니다.자, 이제 조금 플레이해 보죠.
이 작은 테스트.여러분이 기본적인 것을 가지고 있다고 상상해 보세요.
전자와 같은 양자 물체.두 비트가 필요하죠.
현재 컴퓨터에서.두 개의 전자를 모으기 위해서
2의 거듭제곱이 필요합니다.그리고 N개의 전자를 모으기 위해선
N 비트를 거듭제곱하려면 2가 필요합니다.자, 기억하세요, 만약 복용한다면
예를 들어, 페니실린 분자는
원자가 41개 있습니다.그리고 그것을 모델링하기 위해,
285개의 전자가 필요합니다.즉, 2의 거듭제곱인 285비트입니다.우리가 가지고 있는 것보다 더 많은 양의 메모리입니다.
전 세계에서 사용할 수 있습니다.바로 이거예요.이건 발음하지 않을게요.자, Polly를 통해 전달했는데요.
그건 그렇고, 1분 정도 걸렸어요.
이걸 발음하기 위해서요.어딘가에 올릴게요.
이게 진짜로 뭔지 알 수 있겠죠
정말, 정말 큰 숫자입니다.그래서 필요한 메모리는
컬렉션에 새 개체를 추가할 때마다 두 배로 늘립니다.따라서 필요한 메모리는
기하급수적입니다.데이트하는 건 불가능해요
우리의 현재 세계와 그 방식으로는
우리는 시스템을 구축합니다.하지만 양자 세계에서는
전자를 다른 양자 물체로 표현할 수 있습니다.
마음대로 조작할 수 있죠.이렇게 큰 사이즈는 필요 없어요
메모리 용량.큐비트는 기본 단위입니다.
양자 정보.그리고 인코딩하는 데 사용할 수 있습니다.
컬렉션에 있는 양자 개체.285개의 기본 물체에 대해
전자처럼 285큐비트를 직접 사용할 수 있습니다.이를 통해 우리는 생각을 시작할 수 있습니다.
실제로 갈 필요 없이 시뮬레이션을 하고 세상을 이해하는 것에 대해
이 근사치를 통해서 말이죠.한 가지 예를 들어보죠.흔히 쓰이는 용도인데요, 생각해보면
양자 시뮬레이션은 비료 생산입니다.글쎄요, 우린 그게 우물이라고 생각하겠죠.
지금쯤이면 알려진 과정이죠.저희가 제작을 해왔습니다.
비료는 영원히하버-보쉬 (Haber-Bosch) 라고 불리는 프로세스입니다.안타깝게도 이 프로세스는 다음을 사용합니다.
전 세계 가스의 약 3% 가 암모니아를 생성하는 데 사용됩니다.자, 만약 여러분이 음식물을 꺼낸 적이 있다면
냉장고를 꺼내 카운터에 올려놓으세요
잊어버렸어, 썩어가는 음식 알잖아
가스 없이도 암모니아가 생성됩니다.그 과정을 시뮬레이션할 수 있다면
복사할 수 있을 거예요.그리고 이 문제는 오직 해결될 수밖에 없습니다.
양자 컴퓨팅으로 말이죠.관련된 복잡성 때문입니다.
이를 현실적으로 시뮬레이션하려면 정말 필요하겠죠.
양자 컴퓨터죠.이제 이해하겠어요.
여러분 중 많은 분들이 자신이 별로 익숙하지 않다고 생각하실 겁니다.
양자 컴퓨팅에 대해서요. 하지만 양자 컴퓨팅은 현실이고 미래의 현실입니다.이것이 바로 우리가 나아가는 길입니다.
우리 시스템을 구축하기 위해서요.자, 모든 사람이 그런 건 아니라는 걸 알아요
양자 컴퓨팅에 대해 잘 알고 있습니다.그래서 인터뷰를 했어요.
아마존 학자인 존 프레스킬 (John Preskill) 과 함께 리처드 파인만 교수로 재직하고 있습니다.
칼텍에서 이론물리학을 전공했는데요그리고 그의 머릿속은 양자로 가득 차 있어요.그리고 그가 그것에 대해 말하는 방식은
저한테도 마찬가지예요. 정말 놀라워요.그래서 우리는 그와 인터뷰를 했어요.
그리고 그 속에 일종의 근본적 원리로 돌아가는 걸 포함시켰죠.
양자 컴퓨팅이 실제로 무엇인지에 대해서요.자, 이건 비디오입니다.
유튜브에서 찾을 수 있습니다.이런 호기심을 몇 번 해봤어요.
AWS에서 다루고 있는 정말 어려운 문제에 관한 동영상.그리고 더 자세히 알고 싶으시다면
양자 컴퓨팅의 기본 원리와 실제 현황
현재의 최첨단 기술과 그것이 우리에게 도움이 될 것으로 기대하는 것
와 함께 이 비디오를 시청해 주세요.하지만 오늘 밤엔 보지 마세요.
오늘 밤 할 일이 더 있어요.다시 한 번 말씀드리지만, 저희가 1등을 차지했습니다.
전 세계 DJ들이 저희 리:플레이 파티에서 연주하고 있어요.마틴 게릭스, 네,
오늘밤은 재미있을 거야.밖에서 만나서 반가워요.그럼 내가 원하는 게 뭐야?
데리고 가자고?시뮬레이션을 사용하세요.어떻게 지내는지 생각해 보세요.
현재 구축하고 있는 시스템, 즉 고객이자 어쩌면 고객일 수도 있습니다.
현실 세계와의 상호작용, 시뮬레이션을 어떻게 사용할 수 있을까요?이러한 엄청난 도약에도 불구하고
컴퓨터 시뮬레이션 분야에서는 아직 시작 단계에 있습니다.
정말로 가능한 것에 대해서요.하지만 펜으로는 불가능했던 것이
그리고 종이와 다빈치가 이걸 긁어냈죠.
오늘날에는 작은 모형들이 표준이 되었습니다.기억해, 신발은 내가 사야겠어
더 이상 이런 걸 오래 쓸 수 있는 사람이 아닌가요?
수작업으로 진행하는 것은 디지털 프로세스입니다.그럼 다음에 대해 생각해 보세요.
시뮬레이션을 사용하여 할 수 있는 일
시스템 개선을 위해서요.생각해 보라는 말로 기조 연설을 시작했습니다.
세상을 비동기적으로 바라보죠.그리고 왜 그렇게 생각해야 할까요?
그렇게 생각해요?왜냐면 그래요.마지막으로 어떻게 모델링할 수 있는지 보여드리면서 마치겠습니다.
세상을 더 정확하게 그리고 그것을 이용해 건설하세요
더 나은 시스템과 제품.여러분 모두가 동의할 수 있기를 바랍니다.
우리가 무언가를 통해 배울 수 있다는 것
우리 주변을 둘러보며 가장 위대한 것을 관찰하는 것과 같습니다.
현존하는 시스템, 우주 그 자체.우주 그 자체
매우 연약합니다.이건 지극히 잘못입니다.
또한 관대합니다.그리고 탄력이 있고 견고합니다.우리는 일종의 교훈을 얻어야 합니다.
처음 시작할 때 자연과 주변 세계에서 볼 수 있는 원리들은
컴퓨터 시스템 구축.이 강연이 여러분에게 영감을 주었기를 바랍니다.
더 크고, 더 훌륭하고, 더 대담한 시스템을 구축하기 위해
이 모든 것이 훨씬 빨라졌습니다.고마워요.이제 빌드하러 가세요.