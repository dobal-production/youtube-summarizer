- 안녕하세요 여러분, 제 이름은 미가 하우슬러입니다.지금 쿠베 315에 와 계세요:
Amazon EKS에서 쿠버네티스 워크로드를 보호합니다.저는 AWS의 수석 소프트웨어 엔지니어입니다.저는 쿠버네티스 보안, 쿠버네티스 보안 분야에서 일하고 있으며, 업스트림 쿠버네티스에 기여했고, 쿠버네티스 보안 위원회에 속해 있기 때문에 보안 업무를 담당하고 있습니다.
이를 보고하고 평가한 다음 쿠버네티스를 수정했습니다. - 그리고 저는 조지 존입니다.저는 제품 매니저입니다.
아마존 EKS 팀과 함께요.이 자리에 오게 되어 정말 기쁩니다. 참여해 주셔서 감사합니다.
오늘 함께 할 시간이에요. - 잘 가요?그럼요. - 오, 알았어요.
- [Micah] 좋아요. - 그래서 오늘 세션에서는
다른 접근법이죠.어떻게 지내는지 살펴보도록 할게요
Amazon EKS에서 실행되는 워크로드를 보호할 수 있는 방법은 다음과 같습니다.
몇 가지 다른 계층이 있습니다.먼저, 다음 단계로 넘어가겠습니다.
큰 그림을 보세요.클러스터 수준에서 사용할 수 있는 컨트롤을 살펴봅니다.그래서 무엇이 있고, 어떻게 보안을 유지할 수 있는지 살펴보겠습니다.
클러스터에 대한 액세스, 클러스터에서 실행 중인 애플리케이션에 권한을 할당하여 외부 AWS 리소스에 액세스할 수 있도록 하는 방법을 살펴봅니다.S3 버킷, DynamoDB, 이를 안전하게 설정하는 방법, 그리고 마지막으로
첫 번째 섹션에서는 보안 공간에서 다양한 AWS 서비스를 사용할 수 있는 방법과 이러한 서비스를 Amazon EKS와 통합하는 방법을 살펴봅니다.그런 다음 좀 더 깊이 들어가 인프라 계층에 대해 알아보겠습니다.여기서 말하는 인프라란 클러스터에서 실행하는 작업 노트인 EC2 인스턴스를 말합니다.그리고 다음 내용도 살펴보겠습니다.
네트워킹 VPC의 일부, 제어 및 제어 기능
인프라 계층을 보호하는 데 사용할 수 있는 메커니즘.그리고 마지막으로, 바로 넘어가겠습니다.
애플리케이션 레이어로 넘어가죠.최고에 대해 이야기하겠습니다.
사례, 애플리케이션을 구성하는 이미지 및 포드의 보안을 위한 몇 가지 제어그래서 한 가지 말씀드리고 싶은 것이 있습니다.
오늘 세션에서 우리가 집중하고 있는 것은
EKS 및 AWS 제어 및 기능은 다음과 같습니다.
사용할 수 있습니다.하지만 세션이 끝날 무렵
다음에 대해 설명하는 EKS 모범 사례 가이드라는 리소스를 공유하겠습니다.
보안 또는 클러스터링 방법을 전체적으로 파악하는 데 사용할 수 있는 Kubernetes 기능 및 도구가 제공됩니다.이제 시작해 보겠습니다.그래서 지난 몇 년 동안 엄청난 상승세를 보였습니다.
쿠버네티스 도입에 관해서요.2023년 클라우드 네이티브에 따르면
컴퓨팅 재단의 연간 설문 조사 중 84%
응답자들은 프로덕션 환경에서 또는 평가 중에 쿠버네티스를 사용하고 있습니다.그리고 이것이 바로 우리가 하는 것입니다.
아마존 EKS에서 보고 있습니다.매년 고객을 확보하고 있습니다.
수천만 개의 클러스터를 운영하고 있으며 이 숫자는 계속 증가하고 있습니다.그리고 우리가 시작했을 때
EKS는 6년도 더 전에 실제로 이에 대한 대응이었습니다.
쿠버네티스를 대규모로 관리하는 것은 어렵다는 고객 피드백에 대한 것입니다.아시다시피 고객들은 비용을 지출하고 있었습니다.
모니터링, 확장, 관리에 많은 시간이 걸렸습니다.
쿠버네티스 컨트롤 플레인, 그리고 그들은 뭔가를 원하죠.
다양한 AWS 서비스와 통합할 수 있는 네이티브가 필요합니다.그 이후로 EKS는 다음과 같이 부상했습니다.
AWS에서 Kubernetes를 실행할 수 있는 가장 신뢰할 수 있는 방법입니다.이제 제거하겠습니다.
관리에만 그치는 것이 아니라 차별화되지 않은 무거운 업무
쿠버네티스 컨트롤 플레인, 하지만 클러스터의 다양한 측면.AWS 및 EKS의 경우 보안은
최우선 순위입니다.이제 언제나처럼
클라우드에서 안전하게 운영하는 것은 공동의 책임입니다.AWS는 다음 사항을 책임집니다.
클라우드의 보안, 고객은 클라우드에서의 보안에 대한 책임을 집니다.아래쪽에서 볼 수 있는 것처럼 세 개의 레이어가 모두
AWS와 EKS에서 관리합니다.그래서 쿠버네티스 같은 것들은
클러스터 컨트롤 플레인, 컨트롤플레인이 실행되는 인프라,
지역, 로컬 영역, 일부 기본 서비스, 컨트롤 플레인 활용 (예: 컴퓨팅 스토리지 네트워킹), 실제 Kubernetes
비트 (예: 컨트롤에서 실행되는 API 서버)
CD 데이터베이스, 그 플레인.이 모든 것은 우리의 책임입니다.패치를 적용하고, 확장하고, 관리하고, 가용성과 복원력을 보장합니다.그리고 그 주위에는 여러 계층이 있습니다.
실제로 VPC에서 실행되는 EC2 인스턴스와 작업자 노드입니다.예를 들어, EC2에서 실행되는 운영 체제가 무엇이든간에
패치가 적용되었는지, 모니터링되는지 여부,
데이터의 상태를 확인하고 있는지 여부요.일부 클러스터는
오토 스케일링, 쿠버네티스 같은 기능
일부, 즉 워커에서 실행되는 바이너리입니다.
kubelet과 같은 노드 또는 컨테이너 런타임.이 모든 것은 여러분의 책임입니다.하지만 AWS와 EKS는 다음을 제공합니다.
다양한 도구를 사용할 수 있습니다. 예를 들어 여러 기능이 있습니다.
포드, 서브넷, 비공개의 보안 그룹과 같이
엔드포인트 액세스, EKS 애드온, EKS에 최적화된 AMI 등
이를 통해 데이터 플레인, VPC 및 거기서 실행되는 항목을 쉽게 보호할 수 있지만 결국에는
이는 여전히 여러분의 책임입니다.이제 다루었으니
몇 가지 기본 사항을 살펴보겠습니다. 첫 번째 레이어로 넘어가겠습니다.먼저 말씀드린 것처럼 클러스터 레벨 컨트롤을 살펴보겠습니다.EKS를 시작했을 때 클러스터 인증을 위한 쿠버네티스 네이티브 웨이브를 제공하고 싶었습니다.그래서 AWS-AUTH라는 구성 맵을 만들었는데 여기서 다음을 정의할 수 있습니다.
IM 주체를 쿠버네티스 권한에 매핑.하지만 이 접근 방식에는 몇 가지 장단점이 있었습니다.아시다시피, IAM을 사용할 수 있고, 별도의 ID 공급자를 유지할 필요가 없으며, 다단계 인증, 감사 등 IAM의 모든 이점을 누릴 수 있다는 점에서 좋은 점도 있습니다.
CloudTrail 로그 등.하지만 다른 한편으로는, 이제는 다양한 API 세트를 다루어야 했습니다.
모든 권한을 가진 EKS 클러스터를 생성하기 위해서죠.예를 들어 EKS를 사용할 수 있습니다.
API를 사용하여 클러스터를 만든 다음 다음을 수행해야 합니다.
쿠버네티스 API로 이동하여 매핑을 프로비저닝하세요.
그리고 구성 맵을 설정하세요.즉, 인프라를 자동화하거나 코드로 사용하는 것을 의미했습니다.
필요한 권한으로 클러스터를 부트스트랩하는 도구는 어렵습니다.이와 관련된 또 다른 문제점은
구성 맵을 경험한 결과, 약간 부서지기 쉬운 부분이 있었습니다.구성 맵에 오타를 넣거나 팔로우하지 않는 경우처럼
정확한 형식을 보면 실수로 그럴 수도 있습니다.
사용자를 차단하세요.그리고 IAM을 만들 때 다음과 같은 동작이 있었습니다.
EKS 클러스터를 생성하는 데 사용되는 ID는 자동으로 수퍼 유저 액세스 권한을 얻습니다.자, 이런 행동은 많은 사람들이 겪었던 일이었죠.
고객들이 싫어했어요.이 문제를 해결하려면 곧
작년 re:Invent가 끝나고 나서 마이크와 저는 무대에 섰습니다.
작년에는 곧 나올 작품이라고 얘기를 했었죠.피처링으로 나왔어요
re:Invent에 이어 얼마 지나지 않아 클러스터 액세스 관리라고 불렸습니다.클러스터 액세스 관리가 하는 일은 API를 통합하는 것입니다.따라서 더 이상 EKS와 쿠버네티스 API 간에 전환할 필요가 없습니다.대신 EKS를 사용하면 됩니다.
API를 사용하여 클러스터를 생성하고 권한을 설정하면
클러스터를 사용할 준비가 되셨나요?또한 구성을 간소화했기 때문에 사용자와 다른 AWS도 마찬가지였습니다.
EKS에 대한 액세스가 필요한 서비스, 전체 설정
이제 훨씬 더 간단해졌습니다.마지막으로, 세밀한 제어가 가능해졌습니다.그러니까, 기억나신다면
앞서 말씀드린 시나리오인데, 이제 클러스터 액세스가 가능합니다.
관리, 권한을 취소할 수 있습니다.
IAM 보안 주체에게 자동으로 부여됩니다.
그러면 클러스터가 생성됩니다.하단에 블로그 링크가 있습니다.관심이 있으시다면
자세히 알아보려면 살펴보세요.클러스터를 살펴보는 것이 좋습니다.
액세스 관리.EKS의 경우, 이것이 바로 미래입니다.
이것이 바로 우리가 향하고 있는 방향입니다.모든 새로운 기능, 모든 것
기능은 클러스터 액세스 관리를 기반으로 구축됩니다.기존 클러스터를 사용하는 기존 클러스터가 있는 경우
AWS-AUTH 구성 맵, 이전하는 것이 좋습니다.간단하고 쉬운 방법이 있습니다.
한 곳에서 다른 곳으로 마이그레이션하려면...구성 맵부터
클러스터 액세스 관리.실제 상황을 살펴보겠습니다.
무대 뒤에서 느껴보세요.따라서 먼저 다음과 통합해야 합니다.또는 IAM과 인터페이스하여
역할이든 사용자이든 관계없이 IAM 보안 주체를 생성하세요.그러면 여러분은
새로 도입된 API와의 인터페이스
기능의 일부로.동일한 기능이 다음과 같습니다.
콘솔에서도 사용할 수 있습니다.따라서 둘 중 하나를 사용하여 EKS를 사용할 수 있습니다.
콘솔을 사용하거나 API를 사용할 수 있습니다. 그러면
두 개의 메인 엔티티 생성.첫 번째는 액세스 입력입니다.따라서 액세스 엔트리는
이전 단계에서 생성한 IAM ID와 연결한 다음 액세스 정책을 생성하고 액세스 정책을 정의하여 사용합니다.
액세스 항목의 권한을 지정합니다.따라서 처음 두 단계가 완료되면 기능 설정이 거의 완료된 것입니다.클러스터 액세스 관리 기능.그리고 다음과 같이 가정해 보겠습니다.
API 서버에 접근하려고 하는 사용자가 있습니다.암묵적으로 일어나는 일은
AWS STS는 IAM 인증기에 의해 호출됩니다.
또는 CLI 토큰 가져오기 작업.그리고 요청이 있을 때
API 서버의 컨트롤 플레인에 도착하면 요청을 가로채는 웹 훅이 있습니다.
STS 토큰을 보고 사용자 ID를 찾으려고 시도합니다.
토큰과 연결한 다음 연결되지 않은 경우
접근 항목과의 매칭이 성공하면
인증이 완료되었습니다.다음은 인증입니다.승인을 받으려면 거기에서
저희가 살펴보는 일련의 권한 부여자들은
사용자 ID가 액세스 입력 및 액세스 정책과 매핑되는 경우 권한 부여도 허용되며, 그러면 요청이 유입될 수 있습니다.클러스터 액세스 관리
API와 콘솔을 통해 모두 사용할 수 있으므로
거기에는 유연성이 있습니다.좋아요, 그럼 첫 번째는
제가 말씀드린 부분은 어떻게 설정할 수 있는가입니다.
클러스터에 액세스할 수 있나요?이제 다음으로 넘어가겠습니다. 애플리케이션이 있습니다.
클러스터에서 실행하는 경우, 아마도 다음이 필요할 수 있습니다.
AWS 리소스에 액세스하려면
S3 버킷에 액세스해야 하는 쿠버네티스 애플리케이션.DynamoDB 테이블일 수도 있습니다.
모든 AWS 리소스가 될 수 있습니다.어떻게 확신할 수 있나요?
애플리케이션에 적절한 권한을 할당했나요?그래서 이전에 사용했던 옵션 중 하나는
여전히 사용할 수 있는 서비스용 IAM 역할이라고 합니다.간단히 말해서 IRSA라고 합니다.그래서 2019년에 IRSA를 출범시켰습니다.IRSA를 통해 지원금을 받을 수 있게 되었습니다.
포드에 대한 세분화된 AWS 권한.따라서 여러 애플리케이션에 속하는 여러 포드를 모두 동일한 EC2 인스턴스에서 실행할 수 있지만 효과적으로는
다양한 권한 세트.이제 이 기능이 출시되었습니다.
말씀드렸듯이 2019년에 저희의 목표는 IRSA가 다양한 분야에서 작동하도록 하는 것이었습니다.
AWS에서 지원하는 쿠버네티스 배포 모델.그래서 우리는 IRSA가 제대로 작동하기를 원했습니다.
EKS를 사용하면 클라우드, EKS Anywhere, 자체 관리형, EC2의 쿠버네티스 클러스터에서 이러한 클러스터를 관리할 수 있습니다.
인스턴스, 레드햇, 오픈시프트, AWS용 서비스간단히 말해서 ROSA입니다.그래서 저희는 IRSA 를 만들지 않는 방법으로 만들었죠.
모든 EKS API에 직접 의존하는 거죠.우리는 그 중 일부를 활용했습니다.
IAM과 같은 기본 서비스지만 몇 가지 장단점이 있었습니다.첫 번째는, 이제
IRSA용 IAM에 따라 다음을 생성해야 했습니다.
IAM 또는 OIDC 제공업체이제 이것은 특권 작전이었죠.몇몇 고객으로부터 소식을 들었는데
특히 규제 대상 산업의 고객, 클러스터 관리자는
IAM 권한이 없습니다.그러니까 이제
클러스터 관리자가 ID에 연락해야 하는데...죄송합니다, IAM 관리자님.뒷말이 많이 남았어요
IRSA를 설정하느라 이리저리 사용했는데, 사실 사용자 친화적이지는 않았습니다.다른 하나는 범위 지정이었습니다.따라서 역할을 만들거나, 역할을 사용하거나, IRSA에서 사용할 역할을 만들 때 일반적으로 해당 역할을 바인딩하거나 이 역할을 맡을 수 있는 클러스터를 지정해야 합니다.즉, 나중에 새 클러스터에서 역할을 사용하려는 경우
IAM 역할로 돌아가거나, 신뢰 정책을 계속 업데이트하거나, 다시 작업하고 싶다면
클러스터의 역할은 다음으로 돌아가야 합니다.
역할은 정책을 신뢰하고 계속 활용합니다.마지막으로 몇 가지가 있습니다.
역할을 사용할 수 있는 클러스터 수에 제한이 있습니다.그리고 이러한 문제를 해결하기 위해
작년 re:Invent에서 이 기능을 출시했습니다.
포드 아이덴티티라고 불렸죠따라서 파드 아이덴티티는 신뢰를 단순화한다.파드 아이덴티티를 사용하면 다음과 같은 역할을 맡을 수 있는 역할을 생성할 수 있다.
EKS 서비스 전체.따라서 이전에는 역할을 생성할 때 클러스터를 지정했습니다.
이를 가정할 수 있었는데, 이제 파드 아이덴티티를 사용하면
AWS 서비스가 이를 맡을 수 있도록 지정하기만 하면 됩니다.따라서 어느 쪽이든 상관 없습니다.
현재 사용하고 있는 클러스터이지만 능력도 있습니다.
몇 개의 클러스터로 제한하고 싶다면
그런 능력도 있잖아요.IAM 역할 세션 태그를 지원하여 속성 기반 액세스 제어와 같은 새로운 기능을 제공하므로 정책을 재사용할 수 있습니다.
및 클러스터 전반의 역할.마지막으로, 여러분은 할 수 있습니다.
이제 필요한 모든 것을 갖춘 클러스터를 만들 수 있습니다.
권한을 한 번에그리고 다음 링크가 있습니다.
관심이 있으시면 하단에 블로그가 있습니다.
파드 아이덴티티에 대해 자세히 알아보세요.그래서 한 가지 강조하고 싶은 것은 앞서 말했듯이 클러스터 액세스입니다.
관리는 이전 강연의 미래입니다.
이 강연의 첫 부분에서는 AWS-AUTH 구성 맵이 이전 방식이라고 말했지만, 여기서는 IRSA가 이전 방식이 아니라고 말씀드렸습니다.둘 다 지원할 예정입니다.저희는 IRSA를 지원 중단할 계획이 없습니다.IRSA는 계속 존재할 것입니다.
포드 아이덴티티와 함께 말이죠.파드 아이덴티티가 목적입니다.
클라우드의 EKS 매니지드 서비스를 위해 구축되었습니다.EKS Anywhere 또는 자체 관리형 쿠버네티스에서는 작동하지 않습니다.
EC2의 클러스터.따라서 더 많은 옵션을 제공하는 것이 관건입니다.사용 사례와 필요에 따라 솔루션을 선택할 수 있습니다.
요구 사항에 가장 적합합니다.좋아요, 흐름을 살펴보죠.Pod Identity의 경우 전제 조건은 다음을 실행해야 한다는 것입니다.
파드 아이덴티티 에이전트 (불명료).따라서 실행해야 합니다.
모든 작업자 노드에서 실행 중입니다.자, 그럼 이제
아주 간단한 시나리오입니다.필요한 애플리케이션을 클러스터에 배포하고 싶다고 가정해 봅시다.
S3 버킷에 액세스하기 위해서요.모든 AWS 리소스가 될 수 있습니다. 저는 S3를 다음과 같이 사용하고 있습니다.
간단한 예시를 보여드릴게요.첫 번째는, 당신입니다.
IAM과 인터페이스하거나 IAM을 사용하여 IAM 역할을 생성하는 것입니다.IAM 역할에는 두 가지가 있습니다.
권한 정책과 신뢰 정책으로 구성됩니다.권한 정책은 다음과 같습니다.
지정한 곳에서는 S3에 액세스할 수 있습니다.따라서 우리의 경우에는 애플리케이션이 권한 정책인 S3에 액세스할 수 있기를 원합니다.
S3에 액세스할 수 있는 권한을 갖게 될 것입니다.그리고 신뢰 정책이 생겼습니다.이것이 바로 포드 아이덴티티입니다.
IRSA와는 다릅니다.에 대한 신뢰 정책
파드 아이덴티티는 이 역할이 다음과 같을 수 있도록 지정한다.
EKS 서비스가 맡습니다.그래서 새로운 서비스가 생겼습니다.
저희가 도입한 원칙은 한 번에 해결할 수 있는 단계입니다.그건 중요하지 않아요.
이 역할이 클러스터 A 또는 B에서 사용되는지 아니면 C의 C에서 사용되는지 여부
미래에는 이 기능이 제대로 작동할 것이며 이는 한 번에 한 단계만 수행하면 됩니다.그 다음에는 Pod Identity API를 만들고 사용하세요.다시 말하지만, 다음을 사용할 수 있습니다.
원하는 경우 콘솔을 사용할 수 있지만 포드 ID 연결 생성이라는 작업이 있는데, 이를 통해 이전에 생성한 IAM 역할을 매핑할 수 있습니다.
서비스 계정과 함께.한 가지 좋은 점은
그 서비스 계정, 쿠버네티스 서비스는
해당 시점에는 계정이 존재하지 않아도 됩니다.이건 여러분이 할 수 있는 것일 수도 있습니다.
미래에 만들어 보세요.좋은 점은 클러스터 관리자라면 클러스터를 설정하고 싶어한다는 것입니다.
모든 권한이 있기 때문에 나중에 앱 개발팀이 들어오면 클러스터를 사용할 준비가 되면 미리 만들 수 있습니다.
모든 매핑과 미리 파드 아이덴티티 연계를 해두세요.이제 파드 아이덴티티를 설정하기 위해 하는 두 가지 작업은 다음과 같다.이 기능.그리고 나중에 앱 개발팀이 있다고 해봅시다.
애플리케이션을 배포하면 포드가 가동됩니다.이를 감지했을 때
포드에는 서비스 계정이 연결되어 있는데,
이전에는 파드 아이덴티티를 통해 매핑되었다.
어소시에이션, 요청을 가로채는 웹 훅이 있는데,
그러면 포드 사양이 변경됩니다.그리고 몇 가지를 추가해 보겠습니다.
환경 변수, 잘 알려진 환경
포드 사양에 대한 변수.따라서 AWS SDK가 출시되면 이러한 환경 변수를 알게 됩니다.이를 마운트하고 포드에 마운트된 서비스 계정 토큰을 가져옵니다.다음을 호출할 것입니다.
Pod Identity 에이전트는 서비스 계정 토큰인 토큰을 전달합니다.그리고 파드 아이덴티티 에이전트가
그러면 파드 아이덴티티에 대해 수임된 역할을 호출하는데, 이는
파드 아이덴티티 API의 일부로 새로 도입한 API이다.그러면 이 API가 유효성을 검사할 것입니다.
전달된 서비스 계정 토큰.유효성이 확인되면 반환됩니다.
임시 AWS 자격 증명이 생성되고, 이 자격 증명은 포드에 삽입됩니다.그 다음은 애플리케이션
해당 AWS 자격 증명을 사용하여 S3에 액세스할 수 있습니다.좋아요, 그럼 작년 re:Invent에서 출시된 이후 파드 아이덴티티에 새로워진 점은 무엇일까요?이제 포드 아이덴티티를 사용할 수 있습니다
모든 상용 AWS 지역, 중국 및
미국 고브클라우드 지역.에이전트 자체를 오픈소스로 제공합니다.그래서 우리가 시작했을 때,
EKS 애드온으로만 사용할 수 있었습니다.고객으로부터 피드백을 받았습니다.
직접 배포하고 싶다거나 하고 싶다는
자체 AMI에 적용하고 사용자 지정 AMI를 생성하세요.따라서 에이전트는 이제 오픈 소스로 제공됩니다.마지막으로 소개한 것은, 저희가 소개한 내용입니다.
포드 아이덴티티 및 EKS 애드온을 지원합니다.따라서 애드온은 클러스터에서 실행할 수 있는 운영 소프트웨어입니다.그리고 이 소프트웨어들은
일반적으로 AWS 리소스에 액세스하려면 권한, AWS 권한이 필요합니다.이전에는 유일한 방법이었습니다.
IRSA를 통해 설정할 수 있었지만 이제는 Pod를 통해 설정할 수 있었습니다.
아이덴티티도 사용할 수 있는데, 이는 크게 단순화된다.
애드온 설정 경험.좋아요. 이제 넘어가죠.
사용할 수 있는 몇 가지 컨트롤에 대해 알아보겠습니다.
문제에 대한 알림을 확인하세요.가장 먼저 알아봐야 할 것은
액세스 시, 들어오는 요청
API 서버 자체.따라서 EKS 클러스터를 생성하면 기본적으로 컨트롤 플레인에서 실행되는 API 서버인 클러스터 엔드포인트를 얻게 됩니다.들어오는 모든 요청은
API 서버는 컨트롤 플레인 감사 로그에 기록되며 CloudWatch에서 사용할 수 있습니다.이는 옵트인 방식이거나
활성화해야 하는 것이죠.하지만 컨트롤 플레인 로깅을 활성화하면 로그가 자동으로 실행됩니다.
CloudWatch로 이동합니다.이제 CloudWatch에서 사용할 수 있다는 것은 무엇이든 사용할 수 있다는 뜻입니다.
예를 들어 CloudWatch에 로그인하여 자세히 분석해 보세요.프레젠테이션이 끝나면 보안 모범 사례를 공유하겠습니다.그 안에는 섹션이 있습니다.
디텍티브 컨트롤 (Detective Control) 이라고 불리는데 미리 만들어진 것도 있습니다.
CloudWatch 로그 인사이트 (명확하지 않음) 가 유용하다는 것을 알게 되었습니다.그게 바로 여러분이 할 수 있는 일이죠.
프레젠테이션이 끝나고 한 번 보고 싶을지도 몰라요또 다른 장점은
CloudWatch를 사용하면 경보를 설정할 수 있습니다.그러니까 탐지를 하고 싶다면
금지되거나 승인되지 않은 액세스가 403개나 증가하면 이제 스스로 경보를 발령할 수 있습니다.
이런 상황에 말이죠.좋아요, 다음은, 이전에 살펴본 건데요.
API로 들어오는 요청을 살펴보세요.
클러스터의 서버 엔드포인트.EKS API로 들어오는 요청을 살펴보는 것입니다.따라서 여기서 EKS API는 EKS라고 할 수 있습니다.
클러스터 삭제를 생성할 때 사용하는 서비스 API,
클러스터 업데이트, 클러스터, 쿠버네티스 API가 아닌 모든 EKS API.이들 모두는 클라우드트레일에 기록되며, 클라우드트레일과 함께 기록됩니다.
로그와 클라우드트레일 인사이트를 분석할 수 있습니다.마지막으로 아마존 디텍티브 (Amazon Detective) 도 있습니다.따라서 모든 VPC 흐름 로그를 분석하거나 시각화하려면
EKS와 통합된 Amazon 탐정을 사용할 수 있습니다.다음은 암호화입니다.그래서 그 중 일부는
클러스터용 EBS, EFS, FSx와 같은 기본 AWS 스토리지 옵션이 EKS에서 지원됩니다.저장 시 다음과 같이 암호화할 수 있습니다.
AWS 관리형 키를 사용하거나 기존 키를 가져올 수 있습니다.이와 함께 일부
쿠버네티스에 저장되는 민감한 비밀 정보
클러스터는 일반적으로 쿠버네티스 시크릿 오브젝트에 저장된다.EKS는 다음과 같은 기능을 제공합니다.
AWS인 키를 사용하여 비밀 주제를 암호화할 수 있습니다.
키 관리 서비스 사무소 또는 KMS에 자체 키를 가져온 다음 이를 사용하여 암호화할 수 있습니다.그리고 키가 들어오면
KMS에서는 기능을 사용할 수 있고 자동화의 이점을 누릴 수 있습니다.
로테이션은 KMS에서 제공합니다.그렇다면 그 중에는 어떤 것들이 있을까요?
사용할 수 있는 다른 클러스터 범위 컨트롤이 있나요?첫 번째는
쿠버네티스 클러스터 엔드포인트.그래서 제가 말씀드리자면
쿠버네티스 클러스터 엔드포인트는 모든 클러스터에서 사용할 수 있는 API 서버 엔드포인트를 말합니다.기본적으로 퍼블릭 모드입니다. 즉, 모든 트래픽은
VPC에서 시작 (API 서버에 연결해야 하는 경우)작업자가 있다고 가정해 보겠습니다.
노드는 API 서버에 연결해야 합니다.트래픽은 VPC를 떠나 Amazon 네트워크로 남아 있다가 다시 API 서버로 돌아옵니다.하지만 만약 여러분이 원한다고 가정해 봅시다.
트래픽이 항상 VPC에 유지되도록 완전히 비공개로 설정하려면 다음과 같은 옵션이 있습니다.
엔드포인트를 프라이빗 모드로 구성하십시오.다음은 다른 하나입니다.
API는 EKS API입니다.그래서 오늘 다시 말씀드리지만, 트래픽이 어디서 발생하는지가 필요하다면
VPC에서 프라이빗 엔드포인트를 통해 또는 프라이빗 방식으로 EKS API에 도달해야 합니다.
AWS 프라이빗 링크가 있는데, 이 기능은 우리가 생각하는
1년 정도 전에 출시되었습니다.따라서 AWS를 활용할 수 있습니다.
EKS 서비스와의 프라이빗 링크를 통해 일종의 프라이빗 연결을 얻을 수 있습니다.다음은 사용 관리입니다.
구성 요소는 언제든지 사용할 수 있습니다.따라서 EKS 애드온은 EKS에 최적화되어 있습니다.
아마존 머신 이미지 또는 AMI.이런 것들은 저희가 만든 것입니다.
책임지세요.우리는 항상 문제를 찾고 있습니다.취약점이 있다면
패치를 적용하고 새 버전을 출시하는 것은 우리의 책임입니다.그리고 API도 있습니다.
이를 활용하여 클러스터에 적용할 수 있습니다.따라서 가능하면
관리형 구성 요소를 활용하세요.마지막으로 보안 허브를 사용하여 클러스터를 검사하는 방법을 살펴보겠습니다.제 생각에는 보안 허브가 있는 것 같아요.
보안을 살펴보기 위한 사전 정의된 검사 항목 약 8가지
클러스터 상태.그러니까, 알다시피, 그건
보안 관점에서 클러스터가 어떤 상태인지 알 수 있는 방법도 있습니다.좋아요, 그럼 마이카를 초대할게요. - 고마워요 조지.다음 섹션은 인프라에 관한 내용입니다.
범위가 지정된 보안 제어.그래서 George가 이야기한 것처럼, 우리는 서로 떨어져 있는 것 같습니다.
클러스터와 인프라.따라서 인프라란 실제로 컨테이너가 실행되는 위치를 의미합니다.그리고 가장 먼저 말씀드리자면
EKS 자동 모드에 대해 이야기하게 되어 정말 기쁩니다.어제 출시되었으니 새로운 기능을 얻으실 수 있습니다.EKS 자동 모드가 새로워졌습니다.
전체를 자동화하는 데 도움이 되는 EKS의 기능
쿠버네티스 클러스터 인프라.따라서 자동 모드를 사용하면 AWS가
노드 생성 및 배포를 담당합니다.포드만 생성하면 됩니다.이를 통해 실제로 얻을 수 있는 것은
해야 할 일은 성능을 개선하고 리소스를 최적화하는 것입니다.카펜터를 사용해서
저희가 만든 오픈 소스 프로젝트입니다. 저희가 관리합니다.
전적으로 여러분을 위한 것이며, 저희가 만들어 드리겠습니다.
정의한 포드에 필요한 노드.포드를 정의하면
특정 AWS 영역에 X개의 메모리, Y개의 CPU가 필요합니다. 여기서 생성하겠습니다.마찬가지로, 규모를 확장하면
쿠버네티스 디플로이먼트를 가정하고 더 많은 레플리카를 추가하면
가장 적합한 유형의 EC2 노드를 만들어 드리겠습니다.마찬가지로, 실행 중인 워크로드에 가장 적합한 유형의 노드를 통합하여 찾아드릴 것입니다.이렇게 하면 작업이 정말 간소화됩니다.
클러스터 관리.생각할 필요가 없습니다.
노드 그룹 생성에 대해 말씀드리자면, 어떤 영역에서 만들고 싶으세요?구성을 생성하려면 쿠버네티스 API를 사용하기만 하면 됩니다.
EKS 자동 모드용.또한 이로 인해 필요한 운영 오버헤드가 크게 줄어듭니다.고민할 필요도 없습니다.
AWS에서 생성하고 사용할 수 있게 하는 머신 이미지 업데이트
여러분은 노드를 사용하기만 하면 됩니다.노드의 최대 수명은 21일이므로 워크로드가 21일 이상 실행되더라도 해당 노드는
애플리케이션은 재활용되고 정상적으로 다른 노드에 다시 생성됩니다.
최신 Amazon 머신 이미지, 최신 보안 패치가 적용되어 항상 최신 상태로 유지됩니다.이렇게 하면 정말 도움이 됩니다.
자신의 민첩성을 높이고 혁신을 가속화하세요. 그렇지 않기 때문이죠.
모든 노드를 최신 상태로 유지하는 데 시간을 할애하기 위해서요.실제로 이러한 모든 오퍼 작업을 AWS로 오프로드할 수 있습니다.이 또한 정말 도움이 됩니다.
애플리케이션의 성능과 가용성을 개선할 수 있습니다.앞서 말씀드렸듯이 정상적으로 다시 시작할 수 있습니다.노드의 원활한 마이그레이션.따라서 Auto Scaling 그룹에 어떤 종류의 규모 조정 정책을 적용할지 고민하지 않아도 됩니다.이렇게 하면 알아서 할 수 있습니다.그리고 마지막으로, 이건 정말
용량을 자동화하여 비용을 최적화하는 데 도움이 됩니다.
계획 및 동적 규모 조정.굳이 말할 필요 없어요.
좋아요, 어떤 종류의 노드가 가장 좋은가요?
내 워크로드에 필요한 거요?쿠버네티스 포드의 요청을 기반으로 결정하겠습니다.George가 앞서 말했듯이, 우리는 공동 책임 모델을 가지고 있습니다.그리고 EKS 자동 모드를 사용하면
약간 바뀌었죠.이전 예제에서 EKS 관리형 Node 그룹을 사용하는 경우 다음과 같은 기능이 더 있습니다.
책임은 여러분에게 있습니다.이 모델에서는 모든 것이 여러분에게 달려있습니다.
컨테이너의 보안 유지, 그리고
VPC 인프라 및 위에 설치하는 모든 애드온.자동으로 설치되는 애드온이 많이 있습니다.
EKS 자동 모드에 포함되어 있습니다.쿠벨렛 같은 것들,
컨테이너 네트워킹 인터페이스, kube 프록시, 일부 CSI 드라이버이러한 정보는 당사에서 자동으로 유지 관리합니다.하지만 다른 애드온은 여전히 사용할 수 있지만, 정말 많은 것들이 있습니다.
관리해야 하는 항목이 줄어듭니다.클러스터 보안 측면에서 설명해야 할 또 다른 측면은 클러스터 네트워크 보안에 관한 것입니다.그러니까 응용 프로그램도 있잖아요.
클러스터의 컨테이너와 포드에서 실행되고 있죠?두 가지 주요 구성이 있습니다.
여기 있잖아요.첫 번째는 쿠버네티스 네트워킹 정책을 활용하는 것입니다.따라서 이것은 다음의 일부입니다.
쿠버네티스를 인터페이스로 사용하고 AWS VPC 컨테이너에서 구동합니다.
네트워크 인터페이스 또는 CNI 플러그인.에서 규칙을 정의할 수 있습니다.
쿠버네티스 API에는 다음과 같이 적혀 있습니다. 포드를 여기에 넣고 싶어요.
네트워크 네임스페이스는 다른 네트워크 네임스페이스에 있는 포드와 통신합니다.매우 세분화될 수 있습니다.
포드 레이블, 심지어 포드 레이블 수준에서도 제어할 수 있고 L 7도 제어할 수 있습니다.그렇다면 호스트 이름이나 TCP 포트는 무엇일까요?이는 호스트에 적용됩니다.따라서 EKS VPC CNI에서 EBPF를 사용하고 있습니다.기타 (사용 중인 경우)
다른 적용 계층을 사용하는 다른 CNI 플러그인 (사용 중일 수 있음)
다른 기술.하지만 그건 호스트에 적용되죠.다른 방법은 보안 그룹을 사용하는 것입니다.따라서 이들은 동일한 보안입니다.
잘 알고 있고 좋아하는 그룹이 EC2를 사용하지만 그럴 수 있습니다.
쿠버네티스 포드에 적용.따라서 엘라스틱 네트워크 인터페이스를 사용하는 쿠버네티스의 각 포드 또는 연결된 ENI를 사용합니다.
EC2 인스턴스 및 EC2 보안 그룹에
포드는 보안 그룹을 해당 포드의 네트워크 인터페이스에 연결합니다.따라서 수정할 수 없는 오프 호스트 메커니즘을 사용할 수 있습니다.
호스트는 포드에서 어떤 앱, 어떤 네트워크 호출을 할 수 있는지 제어합니다.그리고 다음과 같은 링크가 포함되어 있습니다.
자세한 내용을 확인하실 수 있습니다.George가 말씀하셨듯이,
CloudTrail을 사용하여 수행할 수 있는 몇 가지 탐지 제어 기능.또 다른 형태의 탐지는 인프라 주변을 더 많이 통제합니다.
레이어는 GuardDuty 주변에 있습니다.그래서 가드듀티에는 몇 가지가 있습니다.
아마존 EKS와의 통합이 정말 훌륭합니다.첫 번째 통합은
GuardDuty와 함께 구축한 것은 감사 로그 보호를 위한 것이었습니다.따라서 쿠버네티스에는 감사 로그가 있습니다.
쿠버네티스는 API 서버입니다.해당 요청에 대해 이루어진 모든 요청에 대해 감사 로그를 내보냅니다.따라서 감사 로그에는 여러 가지 내용이 포함됩니다.
예를 들어, 포드를 생성하면 포드 이름을 알려주죠.
어떤 사용자가 포드를 생성했는지, 포드에 대한 기타 메타데이터.그리고 이 모든 것이 중앙 로그로 이동합니다.전원을 켤 수 있어요.
여러분의 계정으로 전송하세요. 하지만 GuardDuty를 사용하면
또한 해당 로그를 클러스터의 GuardDuty로 전송하도록 할 수도 있습니다.GuardDuty는 컴퓨터를 사용합니다.
학습용이며, 비슷한 기능도 꽤 많이 사용합니다.
알려진 공격 패턴에서 관찰한 규칙이죠.그리고 저는 인터페이스하고, 우리는 인터페이스를 합니다.
GuardDuty 팀과 할 말이 많아요. 새로운 얘기가 있어요.
쿠버네티스에 추가될 예정인 것들, 우리가 해야 할 새로운 것들을 알려드리겠습니다.
구성이 잘못되었는지, 아니면 구성이 잘못되었는지 찾아보십시오.
또는 공격 패턴.따라서 GuardDuty는 다음 중 하나를 탐지하면 경고를 보냅니다.
잘못된 구성 (예: 실수로 인증되지 않은 익명 사용자를 구성한 경우)
관리자로서의 쿠버네티스 API.전에 본 적이 있는데
끔찍해요, 그러지 마세요.하지만 그런 짓을 하면 GuardDuty로부터 “이봐, 이런 일이 일어났으니, 가서 해결해야 해.” 라는 경고를 받게 될 거예요.여러 사례도 마찬가지입니다.
기타 알려진 공격 패턴.정말, 정말 그렇습니다.
훌륭한 보호 메커니즘이죠.다음에서 활성화할 수 있습니다.
계정 수준에서 모든 클러스터에 이 기능을 적용하고 싶다고 말할 수 있습니다.두 번째는 아마존 가드듀티입니다.
탐정 컨트롤에는 런타임 보호 기능이 포함되어 있습니다.아마존 가드듀티도 마찬가지입니다.
배포할 에이전트 기반 모드가 있습니다.
EKS 애드온을 통해 모든 호스트의 에이전트는
공격 패턴이 통했는지 여부에 관계없이 알려진 공격 패턴을 찾아보십시오.
파일 간 변경 또는 기타 알려진 휴리스틱
노드에서 악의적인 공격 패턴을 찾기 위해
쿠버네티스 감사 로그에는 나타나지 않지만 다음에서는 확인할 수 있습니다.
리눅스 감사 로그를 예로 들어보죠.이건 또 다른 훌륭한 컨트롤이죠.다시 말씀드리지만, 계정 수준 또는 다음에서 이 기능을 켤 수 있습니다.
계정의 AWS 조직 수준, 방금 만들겠습니다.
모든 클러스터에서 활성화되었습니다.몇 가지 다른 인프라
저희가 권장하는 범위 보안 제어
고객은 귀사에 대한 액세스를 제한하고 최소화해야 합니다.
AWS SSM을 사용하는 인스턴스.따라서 스피닝에 익숙하다면
AWS를 가리키고 클릭해 본 적이 있다면 가상 머신을 올려보세요.
콘솔은 처음인데, 아마 SSH를 사용하셨겠죠?누구나 SSH에 익숙할 거예요.SSH 키 생성 중, 알아두세요
인스턴스에서 (불명료) 한 다음 포트 열기
보안 그룹에서 IP 주소를 얻고, 그렇죠?호스트에 연결 중입니다.그건...당신이 그걸 해냈을 때, 난
수신 설정을 했어도 놀라지 않을 테고, 부끄러워할 수도 있어요. 괜찮아요.
보안 그룹 규칙은 전 세계 어디에서든 허용한다는 거예요. 제 IP를 찾아보고 싶지 않으니까요.집에 있는데 IP가 바뀌면 어떻게 되나요?아니면 제가 사무실에 있는 경우
플로팅 IP가 있잖아요?전 세계로 설정할 수도 있습니다.좋진 않지만 당신은
제대로 했을지도 몰라요?프로덕션 환경에서는 그렇게 하고 싶지 않으실 겁니다.AWS 시스템도 마찬가지입니다.
관리자, SSH를 끄고 SSM이 호스트에 액세스하도록 설정하면 SSM 에이전트가 연결됩니다.
SSM 서비스로 돌아가세요.그리고 SSM 세션 매니저를 사용하면
없이 SSM을 통해 인스턴스에 로그인할 수 있습니다.
열린 포트가 필요합니다.따라서 EKS에만 적용되는 것은 아니지만 모범 사례에 불과한 훌륭한 보안 제어라고 할 수 있습니다.
이 방법을 사용하면 개방형 포트를 잘못 구성하지 않아도 되므로 이 방법을 사용하는 것이 좋습니다.그냥 할 필요가 없으니까요.
SSH 같은 용도로 말이죠.온갖 종류의 인터넷 봇과 모든 것을 스캐닝하고 있습니다. 글로벌 IP 공간을 찾고 있는데 포트 22에서 무엇을 수신하고 있나요?그리고 거기서 공격당하고 싶지도 않죠.또한, 다음을 추천합니다.
컨테이너에 최적화된 OS 사용그래서 우리는 아마존 리눅스를 사용하는 Amazon EKS에 최적화된 AMI를 가지고 있습니다.그리고 같은 것을 사용하는 보틀 로켓도 있습니다.
커널은 Amazon Linux를 사용하지만 좀 더 강화된 컨테이너를 사용하며 컨테이너 우선 OS만 사용합니다.EKS 자동 모드에서는 실제로 사용합니다.
보틀 로켓이 후드 아래에 있습니다.하지만 보틀 로켓은
운영체제가 없는 것이 훨씬 더 잠긴 운영체제입니다.
범용 OS도 아니고 패키지 관리자도 없습니다.따라서 패키지를 최신 상태로 유지할 수 없으며 유지할 필요도 없습니다.
패키지를 최신 상태로 유지하세요.새 제품을 받으실 수 있습니다...새 인스턴스를 만드세요
새 패키지가 필요하거나 보안 패치가 필요한 경우마지막으로, 인증만 하는 것이 좋습니다.
CIS 벤치마크를 사용한 클러스터 구성다음을 확인할 수 있는 EKS 전용 CIS 벤치마크가 있습니다.
클러스터 구성, 공개 액세스를 원하지 않는 경우 다음과 같은 사항이 있는지 확인
클러스터를 켜면 해당 기능을 끌 수 있습니다.꼭 알아두세요
지금까지 말씀드린 다른 API도 모두 가지고 계세요.
클러스터 액세스 관리, 그렇지 않은지 확인
더 이상 구성 맵 모드를 사용합니다.CIS 벤치마크를 사용할 수 있습니다.
Kube-Bench와 같은 오픈 소스 도구를 사용하여 검증하십시오.
구성은 여기에 있습니다.그리고 마지막으로, 최종
이 섹션은 실제로 응용 프로그램을 확대하는 것입니다.
클러스터의 보안 제어 범위를 좁히세요.앞서 말씀드린 것처럼 포드는
보안은 여러분에게 필요한 것 중 하나입니다.
주의를 기울여야 하죠, 그렇죠?그래서 가장 좋은 메커니즘 중 하나는
왜냐하면 이것은 실제로 쿠버네티스 항목 중 하나를 사용하는 것이기 때문입니다.
포드 보안 표준 또는 외부 포드 보안, 즉 폴리시 코드 솔루션.오픈 소스가 있습니다.
카이베르노, 오픈 폴리시 에이전트 게이트키퍼 같은 솔루션, 기타
일부 보안 표준을 코드로 적용하는 데 도움이 됩니다.몇 가지 최고입니다.
여기서 몇 가지 하이라이트를 살펴보세요. 엄청 많아요.다시 말씀드리지만, EKS Security Best에 대한 링크는 나중에 알려드리겠습니다.
이러한 내용이 포함된 사례 가이드.하지만 몇 가지만 말씀드리자면
정말 한 번 말씀드리고 싶은 것은, Privileged 컨테이너를 제한하는 것이 매우 중요하기 때문입니다.그리고 저는 구체적으로 사용하고 있습니다.
여기서 “한계”라는 단어를 사용하는데요, 가끔 사람들은 절대 하지 말아야겠다고 생각하기 때문이죠.
권한이 부여된 컨테이너.익숙하지 않으시다면
권한 있는 컨테이너의 경우, docker 명령줄을 실행하면 대시 대시 권한 플래그가 생깁니다.권한을 실행하면
컨테이너에 모든 종류의 Linux 디바이스에 대한 액세스 권한을 부여하고 호스트의 권한 에스컬레이션을 제공하여 호스트를 관리할 수 있도록 합니다.가끔은 그게 필요할 때도 있습니다.따라서 제한이라고 할 때 제거를 의미하지는 않습니다.
권한이 부여된 컨테이너.예를 들어, AWS VPC CNI는 포드가 네임스페이스를 가질 수 있도록 네트워크 네임스페이스를 설정해야 합니다.
호스트의 자체 네트워크.권한이 있어야 합니다.컨테이너, 즉 CSI와 같은 것들이 있습니다.
EBS용, EFS용 스토리지 인터페이스 에이전트 또는 기타 여러 에이전트용 스토리지 인터페이스 에이전트
아마존 통합.필요할 수도 있습니다.
특권을 누렸어요. 괜찮아요.하지만 우리가 권장하는 것은
여러분이 해야 할 일은 그것을 제한하는 것입니다.그래서 만약 신청서가 있다면
이는 웹 트래픽에 서비스를 제공하는 것이므로 권한을 부여받을 필요는 없을 수 있으므로 권한을 부여하지 마십시오.마찬가지로, 사용자 컴퓨터에서 실행 중인 애플리케이션이 있는 경우
클러스터, 다시 한 번 말씀드리지만, 이 웹 서비스 트래픽을 예로 들어보죠. 그건 절대 말이 안 될 거예요.
쿠버네티스 API에 대해 서비스 계정 토큰 마운트를 비활성화하세요.기본적으로 쿠버네티스는
모든 포드에 토큰을 마운트하여 해당 포드와 통신할 수 있도록 합니다.
API 서버 및 인증.아무 것도 없어요.
권한은 기본값이지만 다음과 같은 형태로 존재합니다.
인증 메커니즘.필요 없다면 꺼두세요, 그렇죠?마찬가지로 호스트 경로 사용을 제한하세요.필요하지 않을 경우 사용 중지할 수 있는 기능 중 하나일 뿐입니다.과거에는 모든 종류의 CVE가 있었습니다. 컨테이너에 있든 없든 말이죠.
Kubernetes 자체의 D 또는 호스트 마운트를 중심으로 하는 컨테이너 런타임 에이전트인 RunC.따라서 필요하지 않으면 끄십시오.그리고 마지막으로, 여러분처럼
컨테이너 이미지를 빌드하세요. 정의하면
도커 파일에 있거나 정의한 대로
컨테이너 이미지, 또는 실제로는 도커 파일이 아니라 실제로 포드에 있습니다.
구성, 만약 당신의 포드가 있다면, 다시 말씀드리지만,
웹 트래픽 예시.포드 (pod) 가 글을 쓸 필요가 전혀 없는 경우, 또는 사용자의 애플리케이션에 있는 경우
포드는 파일 시스템에 쓸 필요가 전혀 없습니다.
읽기 전용 파일로 전환하는 것을 고려해 보세요.
컨테이너 내 시스템.그러면 전체가 없어집니다.
애플리케이션이 사용할 수 있는 수많은 공격 벡터
잠재적으로 취약할 수도 있지만, 그렇지 않을 수도 있습니다.
걱정 좀 해봐야겠네요우리가 즐겨 생각하는 또 다른 측면은 바로 이미지 보안입니다.그래서 여러분의 이미지는
실행 중이신 분들은 어딘가에서 가져오시는 거예요. 아마 아마존이겠죠.
ECR, 아마도 다른 곳일지도 몰라요.정기적으로 취약점을 검사하는 것이 좋습니다.따라서 Amazon ECR에서는 네이티브 ECR을 사용할 수 있습니다.
Amazon Inspector를 통합하여 보안이 유지되는 경우 이미지 스캔 및 보고서를 받을 수 있습니다.
애플리케이션에서 발견된 취약성 (여부
시스템 패키지에 있거나 일부 지원이 있습니다.
언어 패키지도 마찬가지죠.또한, 사용할 때
ECR (외부에서 오는 ECR이 필요하지 않은 경우)
VPC에서 프라이빗 링크와 함께 ECR을 사용할 수 있습니다.다음과 같이 잠글 수 있습니다.
이미지는 비공개 링크를 통해서만 올 수 있습니다.정말 훌륭하고 훌륭한 컨트롤이에요.
고객들이 사용하는 것을 본 적이 있습니다.그리고 마지막으로, 다음과 비슷합니다.
읽기 전용 파일 시스템은 컨테이너에서 구성해야 하는 것에 가깝습니다.
빌드 시 정의 (이미지 구성)
루트가 아닌 사용자를 사용하기 위해서요.다음과 같은 경우 일종의 기본값입니다.
빌드할 때 도커 파일을 사용하셔도 됩니다.
루트 사용자를 사용합니다.듣고 계신다면, 다시 말씀드리지만, 웹 컨테이너가 있다면
어떤 포트에서든 수신이 가능하죠.
반드시 루트로 실행할 필요는 없습니다.따라서 변경할 수 있습니다.
루트 사용자가 아닌 사용자한테는 말이죠.다시 말씀드리지만, 이 값은 줄어들 뿐입니다.
Linux 프로세스가 갖는 권한은 다음과 같습니다.
클러스터에서 실행되므로 보안이 있는 경우 그럴 가능성이 훨씬 적습니다.
에스컬레이션하고 작업을 수행할 수 있는 권한을 갖는 이벤트
여러분이 원하지 않는 일들이죠.다음 편은 제가 하고 싶은데요
이 이야기에 대해 정말 기대가 되는 부분이에요.이건 꽤 새로워요.따라서 쿠버네티스는 권한 부여를 내장하고 있습니다.쿠버네티스를 사용해 본 적이 있다면 아마도 RBAC, 즉 역할 기반 액세스 제어를 구성했을 것입니다.아마도 다음과 같은 내용을 작성해 보셨을 것입니다.
일부 포드가 클러스터의 항목을 관리하거나 사람이 관리할 수 있도록 하는 RBAC 정책
클러스터에 있는 것들 맞죠?RBAC 설문 조사를 작성해 본 적이 있다면 어떻게 될까요?손을 빠르게 보여주세요.지금까지 몇 명이나 해봤어요?
RBAC 정책을 작성하셨나요?좋아요, 좋아요, 좋아요.여기 사람이 많아요.좋아요, 그래요, 혹시 있으시다면
RBAC 정책을 작성했으니 아마 들어보셨을 겁니다.
이것의 한계 중 하나.에서 정말 잘 작동했어요
쿠버네티스는 최근 8년 정도 됐을 텐데요.하지만 갈수록
고객들의 의견을 들어본 결과, 몇 가지 사례를 확인하고 있습니다.
RBAC의 한계도 작용하고 있습니다.글을 써본 적이 있다면
RBAC 정책은 허용만 한다는 것을 알고 계실 겁니다.거부는 할 수 없어요.그러니까 허락하고 싶으면, 말해봐
플랫폼 팀이라면 개발자를 허용하고 싶을 것입니다.
또는 개발자 그룹이 클러스터의 일부 배포를 관리하지만 원하지 않는 경우
에서 배포 또는 데몬 세트를 관리하려면
kube 시스템 네임스페이스.정말 고통스러워지네요
플랫폼 관리자로서 여러분은 플랫폼을 만들어야 하기 때문에
해당 개발자를 위한 모든 네임스페이스의 RBAC 정책.쿠버네티스 클러스터 역할을 생성할 경우 해당 역할을 부여해야 합니다.
모든 네임스페이스의 모든 권한 또는 그냥
구체적으로 이름이 지정된 네임스페이스.조건은 없습니다.정말 고통스러워지죠.그러니까 아무 조건도 없어요.
그리고 거부는 없어요.Cedar는 접근 제어 언어이자 런타임 평가 언어입니다.
AWS에서 구축한 오픈 소스 엔진.여러 차례 출시되었습니다.
몇 년 전 re:Invent에서이를 위한 매니지드 서비스도 있습니다. 바로 아마존 검증 권한입니다.하지만 Cedar는 실제로 자체 애플리케이션에도 사용할 수 있습니다.어떤 종류인지 정의할 수 있습니다.
누가, 어떤 리소스에서 작업을 허용할 수 있습니다.그래서 지난 몇 달 동안 우리는 재구상된 Kubernetes를 위한 새로운 프로토타입을 구축하고 오픈 소스화했습니다.
Cedar를 사용한 인증.그리고 GitHub에 있기 때문에
여기에서 링크를 볼 수 있습니다.실제로 다운로드할 수 있습니다.
다운로드하여 사용해 보세요.잠깐 후에 데모를 보여드릴게요. 그래도 좀 보여드릴게요.
이게 어떻게 생겼는지 간단히 말씀드리죠.한 번도 본 적이 없다면
시더 코드, 괜찮아.Cedar는 아주, 아주 읽기 쉬워요.삼나무 정책에는 기본적으로 세 가지 또는...글쎄요, 세 부분으로 나눠서 부르죠.효과가 있잖아그래서 이 정책에서는
아무것도 하지 않는 인위적인 정책입니다.
없으니까, 실제로 사용된 건 아니지만
Cedar로 무엇을 할 수 있는지 보여드리기 위해서죠.효과가 있거든요. 허가나 금지가 필요하죠.이것은 허가 정책입니다.그럼 기본 사항이 생겼습니다.
보험에서 교장이 있는 섹션,
조치 및 자원.어떤 원칙을 정의하느냐에 따라
이 정책이 적용되는 대상, 무엇을 정의할 수 있습니다.
이 정책이 적용되는 작업 또는 작업 집합그래서 제가 말하고자 하는 것은,
주체는 사용자 지정 사용자입니다.특정 것은 아니지만, 그냥
그게 바로 교장의 유형이죠.액션은 바로
“가져오기” 또는 “목록” 목록.따라서 다음 중 하나일 수 있습니다.
가져오기 또는 목록 작업.그리고 리소스,
제가 허용한 몇 가지 사용자 지정 리소스 유형입니다.하지만 이제 뭔가가 생겼습니다.
쿠버네티스 RBAC에서는 할 수 없는 일이죠.조건이 있습니다.'언제' 조항이 있어요.허용만 할게요
이 정책은 교장이 특정 그룹에 속할 때 적용됩니다.그래서 우리에겐 한 가지 관례가 있습니다.
우리가 정의한 그룹 유형과 해당 그룹의 식별자.이름일 수도 있겠죠.그리고 또 다른 한 부분
이 조건에서는 리소스에 어떤 필드가 있고 그 필드는 cool value와 같아야 한다는 것입니다.그리고 마지막으로, 하나 더 말씀드리자면
신택틱 슈가라는 이름은...이는 Cedar 정책의 또 다른 조건인 “불이행” 조항인데, 이 조항은 이 정책이 적용될 때 이를 무효로 합니다.이를 통해 좀 더 간단하게 만들 수 있습니다.
글자를 써야 하는데, 그렇지 않으면, 같지 않은가 하는 것보다
when 조항에 넣으세요.unless 절도 추가할 수 있습니다.그럼 우리가 할게요, 이거
리소스 도트 co-My kind 속성이 “비밀”과 같지 않는 한 모든 정책은 언제 효력을 발휘할 것입니다.따라서 해당 속성이 “비밀”과 같으면 이 전체 정책이 적용되지 않습니다.그러니까 정말 대단한 얘기죠.
시더 (Cedar) 를 잠깐 둘러보세요.이제 이게 어떻게 생겼는지 아주 간단하게 데모를 해볼게요.좋아요, 그럼 제가 하고 싶은데요
제가 미리 작성한 몇 가지 정책을 보여드릴게요.그럼 이제 어떻게 작동하는지 살펴보도록 하겠습니다.그래서 제가 처음으로 작성한 정책은
권한 부여 정책입니다.교장을 허용합니다.
쿠버네티스 사용자는 액션을 수행할 수 있습니다.그래서 액션은
할 수 있는 것은 생성인데, 이것들은 그냥 쿠버네티스일 뿐입니다.
동사, 생성, 나열, 감시, 업데이트, 패치, 삭제.그리고 이를 활용할 수 있는 리소스가 쿠버네티스 리소스입니다.다시 말씀드리지만, RBAC 정책을 작성해 본 적이 있다면 메트릭, 활성 상태 확인 등과 같은 리소스가 아닌 URL이 있습니다.
그 다음은 리소스입니다.그래서 모든 시크릿 포드, 구성 맵,
CRD, 이것들이 전부 리소스입니다.그럼 우리가 말할게, 알겠어
이것은 자원에 영향을 미칩니다.하지만 이는 어디까지나 적용됩니다.
주체 이름이 샘플 사용자인 경우.작업 중인 리소스
on은 네임스페이스 리소스입니다.따라서 리소스는 제외됩니다.
node와 같은 네임스페이스가 없는 것, 유효성 검사 중
어드미션 구성, 기타 여러 쿠버네티스 유형.네임스페이스 이름이 기본값이다.API 그룹이 비어 있습니다.
파드, 컨피그 맵 및 컨피그레이션이 있는 핵심 API 그룹입니다.
모든 것이 살아 있고 쿠버네티스.그리고 API 리소스는 구성 맵입니다.따라서 샘플 사용자가 기본적으로 이 모든 작업을 수행할 수 있도록 할 것입니다.
구성 맵의 동사.이것이 우리의 권한 부여 정책입니다.비슷해 보이네요.
RBAC에서 거의 모든 작업을 실제로 할 수 있는 거잖아요, 그렇죠?허가라고 해서 금지된 것은 아닙니다. 그리고 이 모든 표현들은
RBAC로 모델링할 수 있습니다.이제 뭔가 해볼게요
조금 달라요.자, 이제 하나 더 추가해 볼게요.
정책은 금지 조항입니다.그룹에 속한 사용자가 라벨을 요구하는 것을 금지할 예정입니다.따라서 쿠버네티스 사용자는 그룹에 속해 있습니다.이들은 다음과 같은 행위가 금지되어 있습니다.
요청에 레이블 선택기가 없는 한 모든 Kubernetes 리소스를 나열하고 감시합니다.목록을 작성해 본 적이 있다면
파드와 같은 쿠버네티스 리소스나 다른 리소스는
Kube Cuddle로 할 수 있습니다.라벨 셀렉터용 큐브 커들 대시 L.키는 값과 같습니다.키와 값을 지정할 수 있습니다.그래서 이 예제에서는
라벨이 없는 한 모든 요청을 금지할 것입니다.
키 소유자가 요청자의 이름과 같은 셀렉터RBAC에서는 이 작업을 수행할 수 없습니다.이는 속성 기반 액세스 제어입니다.이제 위에서 살펴본 동사 중 일부를 제한했습니다.다음 정책은 그냥 그런 것이 아닙니다.
쿠버네티스 인증, 쿠버네티스 승인.따라서 쿠버네티스 승인은
제한할 수 있는 쿠버네티스의 또 다른 부분
리소스에 대한 뮤테이션.따라서 생성, 삭제, 업데이트도 가능합니다.다시 한번, 필수 레이블 그룹의 사용자들에게도 적용해 보겠습니다.사용자는 리소스, 기간을 생성, 업데이트 또는 삭제할 수 없습니다.해당 리소스에 메타데이터가 있는 경우는 예외입니다.해당 메타데이터, 그러니까 구성한 적이 있다면
쿠버네티스 리소스에는 메타데이터 객체가 들어 있습니다.
오브젝트 메타와 라벨.그리고 그 라벨 중 하나는
“소유자는 주요 이름”입니다.그래서 더 이상 할 수 없어요.
우리는 사용자를 금지하고 라벨을 요구할 것입니다.
리소스 생성, 업데이트 또는 삭제
소유자가 아닌 이상.그리고 마침내, 우린
업데이트 시에도 비슷한 금지 조치를 취하지만 오버라이드는 방지할 예정입니다.그러니까 입학 허가를 받으면
업데이트를 요청하면 두 가지 리소스를 얻을 수 있습니다.새 상태와 이전 상태가 표시됩니다.우리는 누군가를 내버려 두고 싶지 않아요.
아직 소유하지 않은 리소스를 덮어쓰세요.따라서 이전 객체 메타데이터는 금지하겠습니다.
소유자 이름이 없었다면 금지할 거예요.알겠어요?그게 저희 정책이에요.그래서 저는 이미 로컬 쿠버네티스에서 이것을 만들었습니다.
그리고 도커형 클러스터에 대해 알아보겠습니다.
실제로 어떻게 생겼는지.좋아, 이제 kube 설정을 해봤어
제가 작성한 것은 샘플 사용자입니다.그리고 저는 쿠버네티스를 사용하고 있습니다.
클라이언트가 Kube cuddle off를 호출합니다. 저는 누구죠?그리고 이건 그냥 돌아올 거야
다시 말하죠. “당신은 어떤 사용자예요?”어떤 그룹에 속해 있나요?그래서 저는 샘플 사용자이고,
그룹 샘플 그룹에는 정책에서 볼 수 있는 레이블과 인증된 시스템이 필요합니다.관리자로 일하고 싶어서
클러스터의 관리자예요. 다른 kube 구성과는 다릅니다.구성 맵을 만들고 싶어요
여기서는 디스플레이 용도로만 사용됩니다.좋아요, 그래서 구성을 만들었죠.
“기타 구성”이라는 맵.이렇게 될 거예요.
키와 밸류 푸우 바 뿐이죠?아무 데이터도 필요 없어요.라벨을 붙일 거예요.
방금 소유자, 일부 사용자와 함께 만든 구성 맵입니다.그래서 샘플 사용자는 아니죠.
그냥 다른 사용자.이제 존재하는 구성 맵을 가져와서 레이블을 표시해 보겠습니다.그러니까 세 가지가 있네요.이미 있는 kube 루트 CA가 있습니다.생성되었습니다.
쿠버네티스에 의해 자동으로 레이블이 지정되지 않습니다.다른 구성도 있습니다.
일부 사용자가 소유하고 있습니다.이 테스트 구성이 있습니다.
이름은 기본값입니다.알겠어요?그러니까 이들 중 어느 것도 아니에요.
샘플 사용자가 소유합니다.샘플 사용자로서 만약
큐브 커들, CM 또는 구성 맵을 가져와 보세요.
금지당할 거야.그리고 우린 그냥 얻기만 하는 게 아니에요
잠깐만요. 어떤 정책이 그 요청을 거부했는지 알아볼게요.여기에서 정책 레이블을 볼 수 있습니다.
21행의 1번 열에 있는 집행 정책 1에서는 이 요청을 금지합니다.이제 알겠어요. 금지됐어요. 그리고 어떤 정책인지 알겠어요.
제가 이러는 걸 금지해 주세요.라벨을 붙이고 싶으면
기존의 다른 구성을 업데이트하고 추가하고 싶어요
스테이지가 테스트 라벨과 동일해요. 다음에서 금지될 거예요.
그건 제가 소유한 게 아니기 때문이죠.구성을 만들고 싶다면
샘플 사용자로 맵을 만들고 다시 리터럴에서 K 1이 V 1과 같지만 레이블이 없습니다.
이 구성 맵에서 만들려고 하는데, 다시 말하지만 거부당할 거예요.이건 입학 거부예요.입학 웹훅이 이를 거부한 것을 볼 수 있습니다.지금까지는 이 방법이 꽤 효과적이죠.그럼 만약 우리가 실제로 어떻게 할 수 있을까요?
이 사용자로서 뭔가 해볼까요?자, 그럼 샘플 구성 맵을 보여드릴게요.로컬에 있는 파일에 저장해 두었습니다.
“샘플 구성”이라고 합니다.레이블이 있고 레이블의 소유자는 샘플 사용자와 동일하다는 것을 알 수 있습니다.그냥 더미가 좀 있을 뿐이야
스테이지 이퀄리티 테스트 데이터.그러면 어떻게 될까요?
실제로 이걸 샘플 사용자로 만들어 볼까요?좋아요, 한 번 해볼까요.성공했어요.이거 멋지네요, 그렇죠?이게 우리가 실제로 원하는 거예요.그리고 샘플 사용자로서
구성 맵을 나열하고 싶다면 레이블 셀렉터로 구성 맵을 가져오세요. 전에 시도해 봤다는 걸 기억하세요.
라벨 셀렉터 없이 말이죠.라벨을 사용하여 작업을 수행합니다.
셀렉터, 성공했지만 우리가 소유한 셀렉터만 볼 수 있어요.다른 건 볼 수 없어요.자, 이것이 우리의 짧은 데모입니다.몇 가지 주의할 점이 있습니다.
Cedar에 대해 말씀드리자면, Cedar는 사실 이 시점에서 프로토타입이라고 할 수 있습니다.여러분의 의견을 더 듣고 싶어요.이걸 원하신다면
EKS에 통합되었으니 이에 대해 듣고 싶습니다.바로 다운로드해서 사용해 볼 수 있습니다.모두 오픈 소스입니다.네, 다시 말씀드리지만, 여러분이 좋아하는 점, 싫어하는 점, 보고 싶은 점을 듣고 싶습니다.하지만 지금으로서는 이게
정말 기대가 되고 더 많은 것을 얻고 싶은 오픈 소스 프로젝트입니다.
여러분으로부터 받은 정보.마지막으로, 몇 가지 자료가 있습니다.강연 내내 말씀드렸듯이 EKS 모범 사례 가이드가 있습니다.이 내용은 AWS 설명서에 있습니다.여기 QR 코드가 있습니다.그래서 더 많은 것을 읽을 수 있습니다.
여기에서 언급한 이러한 모범 사례와 AWS 또는 EKS에만 국한되지 않고 일반적인 쿠버네티스 관련 모범 사례에 대해서도 설명합니다.EKS 워크숍이 있는데
처음 방문하신다면 훌륭한 가이드 투어입니다.
쿠버네티스, EKS가 처음인데 어떻게 하는지 알고 싶으신가요?
EKS 클러스터를 생성하기 위한 훌륭한 가이드 투어입니다.
클러스터 생성, 구성, 설치
모니터링 스택 및 기타 애드온과 같은 클러스터 기반 애플리케이션정말, 정말 도움이 됩니다.그리고 EKS도 있습니다.
저희가 제공하는 청사진.다음은 샘플입니다.
도움이 되는 테라폼 및 AWS CDK 구성
EKS를 사용하여 매우 빠르게 시작하고 실행할 수 있습니다.마지막으로 공개 로드맵도 있습니다.따라서 GitHub에 가면
AWS 조직의 컨테이너 로드맵은
여기에 링크가 있습니다.목록을 볼 수 있습니다.
사용자들의 기능 요청, 또는 저희가 공개한 문제에 대해 “이봐, 이건 우리가 생각하고 있는 문제야, 사용자 피드백이 필요해.
거기서 EKS에서 원하는 기능을 추천할 수 있습니다.
사용 사례에 대해 알려주세요.이에 대해 듣고 싶습니다.시더용으로도 하나 있어요
EKS에 통합.따라서 원하신다면, 원하신다면
그거, 원한다면 그거 하나 더해요. 하지만 할 수 있어요
업데이트도 구독하세요.따라서 다음과 같은 경우 알림을 받을 수 있습니다.
기능은 개발 중이거나 실제로 출시되는 시점우리는 이것을 실제로 사용합니다.저희 제품 매니저들은 이걸 사용합니다.
항상 가늠해 보죠. 가장 인기 있는 문제가 뭔가요?누구나 가서 볼 수 있겠죠.플러스 1을 기준으로 정렬하면 EKS에서 가장 많이 요청되는 기능을 확인할 수 있죠?그리고, 고맙습니다.
오늘 시간 내주셔서 감사합니다.조지와 저는
강연 후에 밖에서 Q&A 시간에 할게요감사합니다. 좋은 시간 보내세요.
re:Invent에서 좋은 한 주 보내셨어요. - 감사합니다.(관중들의 박수 소리)