- 그리고 고마워요
오늘 저녁에 나와요이게 다음 세션인 거 알아요아마 해피 아워가 시작되고 있을 거라는 걸 알아요. 재미있는 활동도 몇 가지 있어요.
알다시피, 우리와 함께 시간을 보내러 오실 거라는
그런 데로 가는 대신 나야시간 내주셔서 정말 고마워요.여긴 SAS305 일 거야이건 건축적인 문제가 될 거예요
우리 팀인 SaaS 팩토리가 알게 된 함정
지난 10년 이상 SaaS 고객과 함께 일해 왔습니다.우리는 지금까지 배운 것에 초점을 맞출 것입니다.
이런 경험에서 말이죠.몇 가지를 살펴보도록 하죠.
진행 상황이 달라졌어요. 함정 속에서만 그런 게 아니에요. 사람들이 잘못한 일에 집중하고 싶지 않으니까요.차라리 집중하고 싶어요
이러한 함정에서 배운 점과 SaaS 고객으로서 여러분이 어떻게 배울 수 있었는지에 대해
이러한 모범 사례를 염두에 두고 애플리케이션을 개발하고 이러한 모범 사례를 피하려고 노력할 수 있습니다.
지금까지 알게 된 함정.그래서 제 이름은 빌 타르예요.저는 주요 파트너입니다.
AWS SaaS 팩토리라는 팀의 솔루션 아키텍트입니다.모두 참석해 주셔서 감사합니다.자, 그럼 시작해 볼까요?
SaaS의 약속과 함께 말이죠.유튜브에서 이걸 보셨다면, 이건 반복 세션이었어요. 저희는
이 세션은 작년에도 했었죠. 하지만 제가 말씀드리자면, 이 세션은 앞으로
조금 달라요.이걸 다시 조정했어요. 조금 더 걸릴 거예요.
함정은 달랐지만, 무엇이 다르지 않은가
SaaS의 장점입니다.지난 몇 년 동안 우리는 다음과 같은 유형의 목표를 달성하기 위해 노력해 왔습니다.
SaaS에는 존재감, 민첩성 유지,
우리 팀을 위한 유연성.우리는 계속해서 제공에 집중할 수 있기를 바랍니다.
고객을 위한 혁신.우리는 고객이 만족할 수 있는 기능을 지속적으로 제공하고자 합니다.
고객 앞에서 말이죠.계속 운영되고 싶어요
효율성을 높이는 동시에 말이죠.애플리케이션 관리에 관한 세부 사항에 얽매이고 싶지는 않습니다.
확장이 불가능해졌어요.그리고 우리는 다음 사항에 집중하고 있습니다.
혁신보다는 솔루션을 운영하는 것.그리고 중요한 것은 이것이
지난 번에 점점 더 많은 이야기를 나누었죠.
몇 년, 지속 가능한 성장.처음에 우리가
SaaS에 대해 생각하면서 말씀드린 것은
성장 측면에서는 괜찮았죠.솔루션을 확장하는 것도 좋지만, 초점은
단순히 애플리케이션을 확장하는 것에서 벗어나 더 많은 고객을 확보하는 방향으로 나아가고 있습니다.
수익성을 높이고 지속 가능한 성장을 이룰 수 있도록 말이죠.에 대한 이해
우리가 구축한 제품의 기본 비용 구조 및
우리의 투자와 회사에 투자하는 모든 사람들에게 이를 표현할 수 있어야 합니다.그걸 어떻게 알 수 있을까요?
우리가 끌어들이는 고객들이 실제로 수익을 내고 있는 걸까요?시간이 지남에 따라 소프트웨어를 계속 성장시켜 나감에 따라 운영도 가능할 것이라는 것을 어떻게 증명할 수 있을까요?
이윤이 나는 걸까요?이제 무엇이 바뀌었나요?
이번 강연에서는 제가 올해 집중적으로 다루고 싶은 함정들에 대해 말씀드리겠습니다.먼저 성장을 위해 우리가 어떻게 구축해 나갈지 생각해 볼게요.자, 정말 많은 것들이 있습니다.
물론 성장을 위한 전략이죠.이는 SaaS를 대규모로 운영하는 방식의 기술적 측면과 매우 유사합니다.하지만 아이덴티티티에 대해 말하자면, 제가 해본 이후로는 이 아이디도 있습니다.
SaaS Factory 팀에 합류하여 SaaS Factory 팀에 합류했습니다.
5년이 넘는 기간 동안 우리는 정체성에 대해 이야기해왔지만, 여전히 제 생각에 부딪히게 됩니다.
같은 일을 해내고, 같은 함정에 빠지고, 같은 문제를 해결하지 못하고, 앞서나가지 못하는 사람들
그 무렵에는 아이덴티티 스토리가
고객들은 특정 기능을 요구하고 있습니다.원격 측정이 불충분해요, 이거
또한 매우 흔한 문제이기도 합니다.우린 자주 들어오곤 하죠.
이 SaaS 고객들은 우리에게 이렇게 말합니다. “네, 원격 측정 기능이 있어요.
우리는 어느 정도 옵저버빌리티를 가지고 있습니다. 하지만 그들은 그 옵저버빌리티가 어떻게 되는지에 대해 깊이 생각하지 않고 있습니다.
활용해야 할 대상, 데이터를 소비할 주체, 필요한 데이터
일을 제대로 하기 위해서요.수익 누수는 제가 올해 처음 접했던 용어입니다.새로운 용어는 아닌 것 같은데,
하지만 구체적으로 SaaS에 대한 개념은
단순히 우리가 어떻게 돈을 벌고 있는지 이해하는 것이 아니라
모든 스트림에서 수익을 창출할 수 있는 잠재력이 무엇인지에 대해 매우 세밀하게 설명합니다.
우리는 거기에 대해 발표하고 있습니다.사용량 기반인지 아닌지, 그리고 우리가
사용량을 기반으로 수집하는지, 아니면 사용 권한인지 여부를 측정하고 있는지 확인하세요
우리 임차인이 얼마나 소비하는지, 그리고 계약을 재협상하기 위해 누구를 찾아야 하는지 이해하는거죠.그러면 투자가 부족하고
테스트, 이건 정말 대단한 일이에요.이것은 널리 퍼진 것입니다.
작년 강연 내내SaaS를 사용하는 고객들이 계속 테스트에 어려움을 겪고 있다고 생각하기 때문에 이 문제를 하나의 함정으로 통합했습니다.자, 바로 넘어가겠습니다.
첫 번째 함정 속으로 들어갔는데 이건 통제 불능 상태입니다.물론 이건
컨트롤 플레인에 대한 레퍼런스입니다.SaaS를 구축한 적이 있다면 컨트롤 플레인은 SaaS를 대규모로 운영하는 핵심 방법 중 하나입니다.언제, 언제 도입할 수 있나요?
고객과 이야기를 나누고 있는데 아직도 그 소리가 들립니다.
그들한테도 같은 이야기를 들려줬어요.우리는 그들에게 이렇게 묻습니다. “아시죠?
이런 다양한 조각들이 있나요?”디스커버리를 할 때요.온보딩 작업을 하고 있는데 어떻게든 들어오고 있어요.
테넌트가 시스템에 들어와요.FinOps를 가지고 있을 수도 있고
DevOps 스토리가 있을 수도 있겠지만, 우리가 본격적으로 파고들어 그들이 통제권을 가지고 있는지 물어보면
플레인, 그들은 정말 그렇지 않습니다.그리고 보통은, 그들은
이에 대해서는 꽤 솔직하죠.네, 우린 별로 그렇게 생각하지 않아요
컨트롤 플레인이 있는 이유는 그렇지 않기 때문이죠.
단일 관점을 통해 솔루션을 운영합니다.오히려 이러한 도구는 전체 애플리케이션에 분산되어 있기 때문에 방법이 없습니다.
시스템을 하나의 단위로 운영하기 위해서죠.이제 SaaS에는 다음이 필요합니다.
다양한 도구 세트.여기에는 컨트롤 플레인도 포함되죠?애플리케이션 플랜은 다음을 수행할 수 있습니다.
여러 가지가 될 수 있습니다.이것은 아주 간단한 SaaS 애플리케이션의 간단한 예일 뿐입니다.
ECS에서 실행될 수도 있고, 앞에 로드 밸런서가 있을 수도 있습니다.어떻게 보이든 상관 없습니다.
애플리케이션 플레인에서처럼 컨트롤 플레인이 만들어집니다.
다양한 도구를 사용하여 다양한 작업을 수행할 수 있습니다.
이러한 애플리케이션 플레인 중.이 컨트롤 플레인에 대한 관리자 경험이 필요할 수도 있습니다.
온보딩과 관리자가 할 수 있는 방법이 있을 수 있습니다.
원활한 방식으로 고객을 쉽게 온보딩할 수 있습니다.아이덴티티 스토리는 물론
이것이 두 컨트롤 플레인 전체에 어떻게 퍼지는지에 대해 이야기해 보겠습니다.
그리고 애플리케이션 플레인.메트릭스, 빌링, 바라건대
대금 청구를 하고 있어요. 대금을 받을 수 있으면 좋겠어요
저희 솔루션 때문이죠?그리고 우리가 관리하는 방법도
티어와 테넌트, 관리자 및 테넌트 사용자 모두 컨트롤 플레인의 일부를 구성합니다.이것은 일종의 단일 개념입니다. 지금까지 말씀드린 바 있습니다.
오랫동안 이 문제에 대해 얘기했었죠.올해 제가 달라진 점은 무엇일까요? 그리고 아마도 문제는
우리 팀이 이룩한 발전이 가장 기대되는 것은 바로 우리가 도구라고 부르는 것입니다.
SaaS 빌더 툴킷.이 솔루션은 저희 팀이 만든 오픈 소스 무료 솔루션으로, 제가 방금 말씀드린 많은 개념을 기반으로 합니다.
컨트롤 플레인의 관점에서 말이죠.물론 모든 것이 여전히 그렇습니다.
애플리케이션에 대해서요, 그렇죠?결국에는 SaaS가 필요하죠.
솔루션은 우리가 고객에게 제공하는 애플리케이션입니다.하지만 우리가 구축한 것은
이제 이러한 개념을 모두 보여주는 실제 서비스가 완성되었습니다.따라서 AWS CDK로 작성되었으므로 다음과 같이 의견을 제시할 수 있습니다.
구현 측면에서는 다음과 같은 서비스가 제공됩니다.
온보딩, 지표 및 분석을 시연하고
청구, 계층화 관리, 테넌트 사용자 관리 및 당사에서 고려하는 다양한 개념
컨트롤 플레인의또한 다음과 같은 기능도 제공합니다.
관리자 사용자 경험.관리자 콘솔, UI, CLI,
관리자가 사용할 수 있게 해주는 다양한 도구
컨트롤 플레인을 관리할 수도 있죠.또한 배포 방식에 대해서도 독단적인 접근 방식을 취했습니다.그러니까 이렇게 말하는 대신
단일 컨트롤 플레인이 배포를 담당합니다.
이 배포 솔루션의 일부가 애플리케이션 플레인으로 이동합니다.이제 간단하게 할 수 있습니다.
EventBridge와 같은 도구를 사용하여 컨트롤 플레인에서 애플리케이션 플레인으로 이벤트를 발생시켜 프로비저닝과 애플리케이션을 시작합니다.
플레인은 독립적일 수 있습니다.이렇게 하면 하나를 만들 수 있습니다.
SBT와 같은 컨트롤 플레인을 사용하여 다양한 유형의 스택을 관리할 수 있습니다.따라서 당사의 서버리스를 사용할 수 있습니다.
레퍼런스 아키텍처, EKS 레퍼런스 아키텍처 또는 ECS 레퍼런스 아키텍처.기술 선호도에 관계없이 동일한 SaaS Builder Toolkit을 사용하여 모든 애플리케이션 계획을 관리할 수 있습니다.우리가 또한 제공했을 때
다음을 보여주는 몇 가지 포인트 솔루션
사람들이 계속해서 구축하는 SaaS 모범 사례.TVM은 토큰 벤딩 머신입니다.SQS 및 S3에 대한 모범 사례.다음을 허용하는 일부 대시보드
소프트웨어를 모니터링할 수 있습니다.그리고 우리는 계속해서 이를 보완하고 있습니다.중요한 것은 SBT는 플러그형 솔루션이라는 것입니다. 나중에 우리가 만든 플러그인 몇 가지를 설명하겠습니다.하지만 아이덴티티용 플러그인도 있고, 빌링용 플러그인도 있습니다. 다양한 플러그인을 사용할 수 있도록 계속해서 발전시켜 나갈 예정입니다.
컨트롤 플레인의 여러 측면을 관리하는 서드파티 소프트웨어, 그리고 물론
애플리케이션 플레인.좋아, 나도 던질게
여기 QR 코드 몇 개.그러지 마세요.이런 사진들을 찍으실 수 있을지 모르겠지만
하지만 이건 온라인에 올릴 거야.우리는 비디오를 매우 빠르게 게시하고, 모든 내용이 담긴 PDF도 게시합니다.
이 링크들은 저기 있어요.그러니까 이런 사진들을 못 찍으면, 너무 작으면
걱정하지 마세요.며칠 내로 모두 온라인에 접속할 수 있습니다.이제 표준화가 시작됩니다.
제가 말씀드린 것은 이것의 플러그 가능성입니다.
SBT는 정말 중요한 역할을 합니다. 그런데 이 혁신을 이룬 것은 SBT 뿐만이 아닙니다.Omnistrate라는 툴이 있는데 서비스형 컨트롤 플레인 (Control Plane) 이라는 툴이 있는데, 저도 이 툴을 정말 좋아하는데, 이 툴은 다음과 같은 도구이기도 합니다.
플러그인을 제공하는 것과 같은 방법으로 허점을 메울 수 있습니다.
이해할 수 있도록 모든 기능을 제공합니다.
구축해야 하는 것과 간단하게 만들 수 있는 것
타사 도구를 사용하세요. 여기에는 청구도 포함됩니다.그리고 이러한 단일 주제는 종종 여러 주제로 나누어집니다.결제 서비스 공급자가 여러 개 있을 수 있으며, 특히 판매 중인 경우 AWS Marketplace와도 통합해야 할 수 있습니다.
엔터프라이즈 고객 대상.지표 및 분석, 아마도
옵저버빌리티 스토리일 수도 있고, 애널리틱스 스토리일 수도 있고, 아마도
SRE 역할에 대한 알림.보안에는 여러 가지가 있을 것입니다.
물론 구현은 다르지만 아이덴티티가 작용합니다.규정 준수, 우리의 보안 스토리
우리의 승인 사례, 이 모든 것이 작용합니다.
CICD 도구 및 FinOps 도구를 사용한 데브옵스 사례도 마찬가지입니다.이들 모두는 개별적으로 타사 제품일 수 있습니다.
이렇게 하면 우리 팀이 원하는 것보다 이러한 매우 구체적인 작업을 더 잘 수행할 수 있습니다.하지만 SBT가 있으면
이러한 타사 솔루션의 작동 방식에 대한 다양한 예를 통해 이러한 애플리케이션을 테스트하고 어떻게 작동하는지 확인하는 데 따르는 차별화되지 않은 무거운 작업을 일부 제거할 수 있습니다.
SaaS 환경에서 작동합니다.이제 테넌트 관리는 컨트롤 플레인에서 보았던 주제 중 하나입니다. 제가 생각하는 이유에 대해 말하자면
컨트롤 플레인이 없다는 것은 문제가 될 수 있습니다.저는 다음과 같은 개념을 몇 가지 보여드리고 싶었습니다.
이걸 만들 때를 생각해 봤어요.
SBT 내부의 테넌트 관리, 그리고 이들이 실제로 도입되었을 때 어떻게 작용하는지
실제 SaaS 애플리케이션.SaaS 애플리케이션은 CICD 도구와 같이 다양한 영역을 포괄하는 상당히 큰 공간을 차지하는 경향이 있기 때문에
버전 관리, CI/CD에서 출력된 내용을 이해하면 우리의 인프라는 코드이고, 그 출력은 어디에 있고, Terraform을 실행하고 있고, 스택은 실제로 무엇을 출력하고 있으며, 이러한 상태를 어디에서 관리하고 있는지 이해하면 됩니다.아이덴티티 공급자는 무엇인가요?테넌트 ID 공급자는 무엇인가요?분석이란 무엇인가요?
우리가 제공하는 대시보드는?우리가 가지고 있는 URL은 무엇인가요?
고객에게 제공한 건가요?어떤 결제 절차가 있나요?어떤 FinOps 도구가 있나요?그리고 어떤 기능이 있을까요?
우리가 사용하는 관리 도구는?런치다클리를 사용하고 있나요?모든 기능의 상태는 어떻습니까?
특정 테넌트의 플래그는?어떻게 이해할 수 있나요?그리고 제가 SaaS 솔루션 운영자라면 한 가지 관점에서 어떻게 볼 수 있을까요?물론 이 모든 사람들이 우리의 온보딩과 우리의 활동에 관여하고 있습니다.
오프보딩 스토리, 그렇죠?고객을 온보딩하는 경우
우리가 이 모든 걸 만들잖아요. 저도 이 모든 도구를 직접 찾아가서 오프보딩할 수 있어야 해요.결제 처리업체를 고른다면, 거기에 남아 있는 것은 꼭 가서 정리하고 싶어요.
추가 노출을 피하기 위해서죠. 모든 것이 모든 것과 연결되죠.그리고 컨트롤 플레인도
이 모든 것이 제대로 작동하게 하죠, 그렇죠?네, 테넌트는 이 모든 것의 중심에 있는 궁극적인 존재이고 컨트롤 플레인은 이 모든 것을 연결하는 역할을 합니다.
우리 테넌트한테 할 일이요SBT 세션이 두 개 더 있어요.저는 보통 말을 걸지 않아요.
강연 중에 세션이 있긴 하지만 내일은 이런 세션들이 있어요
벌써 수요일이니까우리 둘 다 운이 좋네요
이건 우연히도 내일이 될 거야.그 중 한 명이 토드예요.
골딩, 지금은 SAS406 12시 30분이고 다른 하나는 워크숍이에요. SAS304목요일이니까, 심지어
가서 줄을 서서 기다리면 꽤 괜찮은 게 있어요
그런 일에 빠질 가능성이 높아요.그러니 가능하다면 확인해 보세요.SBT에 관심이 있으시다면 제가 볼 수 있는 것보다 훨씬 더 깊이 들어가게 될 거예요. 몇 장의 슬라이드로 말이죠.그리고 두 번째 함정은
정체성에 문제가 생겼습니다.다시 말씀드리지만, 저희는 계속 노력해 왔습니다.
시작했을 때부터 SaaS 제공업체와 함께했습니다.저희는 코그니토와 함께 작업해 왔는데
OKTA, Auth0, 핑 아이덴티티, 그리고 앞으로도 계속 확인하겠습니다.
여기에도 같은 종류의 문제가 발생합니다.처음에는 아주 중요한 것부터 시작하죠.
간단한 정체성 이야기 같은 것들이 떠오르기 시작하죠.단순한 사용자 인증 대신 머신 투 머신 (machine to machine) 은 어떨까요?어떻게 처리해야 할까요?
고객에 대한 ID 정책이 달라지나요?그리고 이 아이덴티티 스토리
매우 복잡한 이야기입니다.사실 이건 함정의 연속인데, 만약 우리가 그걸 만들지 않으면
처음에 보면 이런 것들을 자주 찾을 수 있을 겁니다.
다운스트림에서 함정이 우리를 덮치고 있습니다.그럼 어디서부터 시작할까요?먼저 시작해보죠.
간단한 아이덴티티 스토리.SaaS 애플리케이션, SaaS 관리자, 테넌트 사용자 모두 로깅할 수도 있습니다.
동일한 애플리케이션에사용자 이름이 있는 데이터베이스로 시작할 수도 있습니다.
그리고 그 안에 비밀번호도 있고요.우리가 도망칠 수 있으면 좋겠어요.
최대한 빨리 아이덴티티 제공업체를 이용하세요.일단 아이덴티티를 확보하면
제공자가 마련되어 있고, 사용자들이 로그인하고 일부 제공자가 반환되고 있습니다.
일종의 아이덴티티 토큰, 아마도 우리가 일종의 신원 토큰을 만들 수도 있습니다.
아이덴티티 매핑 도구로 말하자면, 좋아요, 이 테넌트는 이 사용자이고, 이 테넌트는 사용자입니다.
그리고 우리는 그 관리를 유지합니다.그렇다고 말하는 게 아니에요.
그게 올바른 해결책이긴 하지만 어쩌면 여기서부터 시작해야 할 수도 있습니다. 어떤 것이 있는지 알아보도록 하죠.
이 부분들 중 일부는 슬라이드의 뒷부분에서 설명하겠습니다.어쩌면 우리가 제공할 수 있는 것은
관리자 콘솔도 마찬가지죠.또한 테넌트 관리자도 허용합니다.
동일한 콘솔에 로그인할 수 있습니다.초기 단계에서는 괜찮을 수도 있는 것들이 이미 몇 가지 있습니다. 하지만 이미 했을지도 모릅니다.
기술적 부채를 몇 개 넣었으니 청산해야 할 거예요그리고 제가 소개할게요
우리가 생각하고 싶어할 만한 몇 가지 새로운 개념을 소개하는 슬라이드를 몇 개 더 보여드릴게요.
초반에, 또는 이미 이런 방식으로 구축했다면 언제 이런 문제를 해결해야 할지 생각해 보는 것이 좋을 수도 있습니다.그 중 첫 번째로 해야 할 일 중 하나는 여러분의 정체성에 대해 생각하는 것입니다.
사실 이건 여러 부분으로 구성된 이야기입니다.SaaS를 구축할 때 만들고 있는 단일 애플리케이션은 아닙니다.앞서 말씀드린 컨트롤 플레인과 애플리케이션 플레인은
아이덴티티 관점에서 보면 사실상 두 개의 분리된 도메인이죠.관리 콘솔도 있고 SaaS 애플리케이션도 있습니다. 하지만 이제 아이덴티티 관점에서 이들을 조금 차별화하는 것에 대해 생각해 보셨으면 합니다.테넌트 사용자는 여전히 ID 공급자에 로그인하고 있을 수 있습니다.아직 테넌트 매핑을 하고 있을 수도 있습니다.조금 후에 사라질지도 몰라요그리고 지금은 따로 있어요
SaaS 관리자를 위한 아이덴티티 스토리사실 우리는 실제로 두 가지 유형의 애플리케이션을 만들고 있기 때문에 가능한 한 두 가지를 분리하고 싶습니다.우리의 애플리케이션 플랜은
멀티테넌트 애플리케이션.모든 고객 또는 임차인이 해당 버전을 사용하고 있습니다.
해당 애플리케이션의.반면에 우리의 통제력은
비행기, 세입자는 우리야.우리밖에 없어요
해당 애플리케이션 사용.그리고 시사하는 바는
아이덴티티 스토리는 이 두 가지를 관리하는 방식에 따라 매우 달라야 하기 때문입니다.같은 도구를 사용하더라도, 사용하고 있더라도
Cognito는 양쪽 모두 사용할 수 있습니다. 계속 사용하시길 바랍니다.
뚜렷하고 분리된 사용자 풀, 어쩌면 분리되어 있을 수도 있습니다.
Cognito가 존재하는 계정.그 이야기들은 구별해 두세요. 지구상에서 마지막 일이니까요.
내가 원하는 건 내 세입자 중 한 명이 실수로 내 컨트롤 플레인에 로그인하는 거잖아이 이야기들을 분명하게 표현해 주세요. 그러면 도움이 될 거예요.
구축 방식에 있어 어느 정도 유연성을 유지할 수 있습니다.
이런 다양한 도구들.물론, 여러분의 콘솔도
또한 구별되어야 합니다.여긴 예전부터 그랬던 곳이에요.
제가 겪은 한 가지 문제가 있는데, 사람들이 컨트롤 플레인을 테넌트가 액세스할 수 있는 것으로 생각한다는 거죠.그리고 여러분도 그럴 수도 있겠지만
용어도 다르고 아마도 여러분은
컨트롤 플레인을 여러 가지 용도로 사용, 관리 방법에 대한 테넌트 경험
사용자 경험은 실제로 해당 테넌트 도메인의 일부이며, 저도 그렇게 되기를 바랍니다.
애플리케이션에 속한 아이덴티티 스토리의 일부입니다.자, 계속 말씀드렸는데
이 테넌트 매핑 도구, 테넌트 매핑 도구를 사용하지 않는 것이 무엇을 의미하는지 이야기해 보겠습니다.그럼 우리가 얻을 수 있는 건
이제 좀 더 구체적으로 적용해 보겠습니다.이제 우리가 할 일은
API 게이트웨이와 람다 권한 부여자, 그리고 람다 권한 부여자를 소개합니다. 만약
잘 모르겠지만 JOT만 있으면 됩니다.
토큰을 만들고 매핑해 보세요.이렇게 말할 수 있습니다. “좋아요, 저
이 JOT 토큰을 읽을 수 있어요. 사용하고 해석할 수 있어요.”어떻게 생겼는지 구체적인 예를 보여드릴게요.
몇 장의 슬라이드에서도 말이죠.이제 Cognito를 소개하고 알려드리겠습니다.
코그니토를 사용한 몇 가지 예시인데요, 코그니토는 아직 멀지만
SaaS 제공업체가 사용하는 유일한 ID 공급자와는 다릅니다.Cognito 내에서 격리를 생성할 수 있는 매우 편리한 방법인 사용자 풀을 만들 예정입니다.이 예시의 각 테넌트는 별도의 사용자 풀을 갖게 됩니다.Cognito의 관점에서 멀티테넌시를 수행할 수 있는 유일한 방법은 아니지만,
이는 매우 편리한 방법이며, 이를 통해 테넌트의 ID 패턴 간에 유연성을 어느 정도 유지할 수 있습니다.자, 이제 이러한 개별 풀을 사용하고 JOT 토큰을 갖게 되었습니다.
이제 테넌트 ID가 여기에 내장되었으니 그럴 필요가 없습니다.
더 이상 테넌트 매핑을 하세요.Cognito는 실제로 그렇게 하고 있습니다.
우리를 위한 테넌트 매핑어떻게 하는지 알 수 있겠죠.
여기 보이죠, 그렇죠?여긴 웅덩이예요.
그 안에 있는 아이덴티티, 그리고 이것들은 다음으로 전달될 것입니다.
JOT 토큰을 통해 저희를 보내주세요.자, 이제 진짜
이 테넌트 토큰을 다음과 같이 매핑하는 방법으로 사용합니다.
각 테넌트의 아이덴티티 맞죠?그래서 우리는 그들의 것으로 이해합니다.
JOT 토큰은 개별 사용자가 누구인지를 통해 전달되며, 이를 통해 IAM을 사용하여 정책을 사용하여 해당 사용자가 액세스할 수 있는 대상을 정의할 수 있게 됩니다.따라서 STS라는 도구를 사용하여 IAM 내에서 역할을 맡을 수 있습니다.역할은 다음과 같을 수 있습니다.
이런 식이죠.읽을 수 있으면 좋겠네요.그렇지 않아도 괜찮습니다.하지만 난 네가 대부분 그러길 바랄 뿐이야
그 결론에 집중하세요.다른 모든 변수들처럼 거기 변수가 있어요.
소프트웨어에서 사용하는 변수입니다.여기 있는 작고 구불구불한 것은 우리가 원칙 태그라고 부르는 태그의 종류라고 부르겠다고 적혀있습니다.
테넌트 ID라고 불릴 거예요.우리가 그걸 대체할 거예요.
구체적인 가치를 담은 태그에 대해서는 다음 슬라이드에서 설명하겠습니다.일단 그렇게 하면 임시로 반환될 것입니다.
AWS용 CLI에 로그인할 때 사용하는 것과 같은 보안 자격 증명이 우리에게 제공됩니다.아시다시피, 이건 비밀이에요.
비밀 키, 액세스 키.우린 그걸 얻을거야.
정확한 유형의 값을 반환하고, 이를 사용하여 다음을 수행할 수 있습니다.
DynamoDB 또는 S3와 같은 AWS 서비스, 특히 네이티브 스토리가 있는 서비스에 대한 테넌트 액세스를 제한하십시오.이와 동일한 값을 사용할 수도 있습니다.
다른 경험을 만들기 위해서죠. 하지만 실제로는 네이티브 경험이죠.
특히 서버리스에서 AWS 서비스를 사용한 경험,
정말 가치가 있습니다.여기 있는 것 처럼요. 저기 있는 걸 볼 수 있잖아요.
첫 번째 칸에는 세입자 차별주의자가 있습니다.그리고 뒤돌아보면
이 IAM 정책에서 DynamoDB 리딩 키라고 적혀 있는 것을 볼 수 있습니다.즉, 첫 번째 열을 의미합니다.
지금 보고 있는 것을 보면 어떤 테넌트가 있는지 알 수 있을 것입니다.
해당 행에 액세스할 수 있습니다.이는 매우 강력한 기법이며, 이를 행 수준 보안이라고도 합니다.물론 관련 내용을 다루는 블로그도 있습니다.
보안 유형을 사용하여 전략을 구현하기
용어를 ABAC 또는 속성 기반 액세스 제어라고 합니다.이 블로그는 다음과 같은 훌륭한 블로그입니다.
이에 대해 매우 자세히 설명하고 사용자가 사용하지 않고도 IAM이 이러한 동적 역할을 실제로 관리할 수 있는 방법을 보여줍니다.
모든 종류의 템플릿.그럼 이제 시작해 보죠.
코드 내용에 대해 좀 더 자세히 설명하고 조금 더 깊이 있게 설명해 드리겠습니다.
이 부분은 좀 비슷해 보이네요.너무 깊이 들어가지는 않을게요알면 괜찮아, 만약 알면
당신은 매일 코딩하는 사람이 아니에요. 그래도 그럴 것 같아요
개념으로는 꽤 이해할 수 있을 것 같아요.자, 이제 조금 더 살펴보죠.
Cognito에 대해 좀 더 자세히 알아보겠습니다.저희는 각 테넌트가 그렇게 할 것이라고 말씀드렸습니다.
자체 사용자 풀을 보유하고 있습니다.각 사용자 풀 내부에는 테넌트 사용자가 있으며, 해당 테넌트 사용자는
사용자 지정 속성 (예: 테넌트, 상태, 소속 계층, 소속 지역 등) 에 대한 사용자 지정 속성 등 몇 가지 사항을 입력할 수 있습니다.
그 안에 이런 변수들이 있어요.이제 그 내용이 들어가게 될 거예요
JOT 토큰에는 우리를 위한 Cognito 이벤트가 포함되어 있습니다.여기서 볼 수 있는 것은
JOT 토큰의 아주 축약된 버전입니다.이 토큰은 완전한 JOT 토큰은 아니지만 이러한 커스텀 클레임에는
JOT 토큰에 추가되었습니다.이제 코드를 통해 서버리스에서 가져온 몇 가지 예제 코드를 보여드리겠습니다.
레퍼런스 아키텍처 (사소한 예외 제외)
거기 도착하면 말씀드리죠.이것은 tenant_authorizer 클래스에서 가져온 것입니다. 여기서는
실제로 JOT 토큰을 가져와서 테넌트 ID를 추출합니다. 이것이 바로 우리가 보여준 것과 같습니다.
마지막 슬라이드에서 봤죠?비교적 간단하게 할 수 있습니다.이제 사용해볼게요
앞서 말씀드린 것처럼 STS가 역할을 맡을 거예요.이제 여기가 제가 사는 곳입니다.
제가 약간 거짓말을 했는데, 사실 이건 전적으로 서버리스 레퍼런스 아키텍처에서 나온 것은 아닙니다. 왜냐하면 ABAC를 사용하지 않고 실제로 사용자 지정 템플릿을 사용하기 때문이죠.그래서 ABAC 전략을 사용하기 위해 코드를 조금 바꿨습니다. 보시다시피 저는
사실 태그를 전달한 거죠.그래서 저는 테넌트 변수를 태그로 IAM에 전달하면서 이렇게 말하고 있습니다. “이봐, 가서 그 변수를 찾아봐
이 값으로 바꾸세요.”그리고 그건 테넌트 1로 돌아가는 거죠?그래서 저는 테넌트로 넘어갈 거예요.
1, 이제 이걸 다시 제게 넘길 거예요.기억해, 우린 람다 (Lambda) 에 속해 있어
지금 권한 부여자 맞죠?그러니까 이게 제 API 게이트웨이를 통과하는 거죠.JOT 토큰을 가져갔어요.
테넌트 ID를 추출하고 이제 다음과 같은 자격 증명을 준비했습니다. “보안은 다음과 같습니다.
키, 여기 액세스 키가 있어요.”그러면 제약이 생길 거예요
사물을 검색하는 데 사용 중인 AWS SDK의 모든 버전에 액세스할 수 있습니다.
다른 AWS 서비스에서.가상 관점에서 볼 때 우리의 IAM 역할은 이렇게 대체되었습니다.따라서 테넌트 1이 대체되었습니다.
아까 봤던 구불구불한 변수죠.그리고 이제, 우리의 관점으로는
우리의 데이터 액세스 객체, 초기화하러 갈 때
DynamoDB용 AWS SDK, 해당 컨텍스트를 전달하기만 하면 됩니다.이제 DynamoDB에 대한 모든 호출의 범위는 다음과 같이 지정됩니다.
그 테넌트 변수, 그리고 저만 할 수 있을 거예요
제가 액세스할 수 있어야 하는 테넌트 데이터에 접근하기 위해서요.내 코드를 잊어버리더라도
아시다시피 WHERE 절은 DynamoDB와 정확히 일치하지 않습니다.
WHERE 절이 있긴 한데 이해하신 것 같아요
개념적으로 보면 이러한 쿼리를 제한하는 것을 잊어버려도 여전히 액세스 권한만 남습니다.
내 테넌트 데이터에.자, 이걸로 마무리하겠습니다.이것은 서버리스로 연결되는 링크입니다.
레퍼런스 아키텍처.실제 파일 이름은 다음과 같습니다.그러니까 ABAC를 사용하지 않았다면 어떻게 사용했는지 볼 수 있다는 것 말고는
파일 기반 정책을 사용하여 동일한 작업을 수행했습니다.그러면 실제로 볼 수 있습니다.
동일한 토큰을 처리하는 별도의 두 가지 방법
자판기 컨셉은 동일한 파일에 있습니다.좋아요, 제가 생각하는 이 컨셉의 또 다른 부분이 중요하다고 생각해요. 몇몇 세입자들이 이런 문제를 자주 겪는 것을 볼 수 있습니다.우리가 어떻게 생각하는지에 대해 말씀드리자면
정책과 권한, 즉 SaaS에서는 거의 모든 것을 내부적으로 생각하는 경향이 있습니다.
테넌트 아이덴티티 용어.그래서 우리 세입자가 생겼어요.
지난 슬라이드에서 했던 것처럼 SaaS 애플리케이션에 로그인하세요.아직 Cognito를 사용하고 있습니다.
아직 사용자 풀이 있습니다.하지만 만약 우리의 경우는 어떻게 될까요?
실제 비즈니스 사용 사례는 단순한 테넌트 격리가 아닌가요?여러 테넌트가 동일한 데이터를 공유해야 하는 경우 어떻게 되나요?상상해 보세요. 원한다면
비즈니스 사용 사례의 경우 공급망입니다.그래서 저희 두 명이 일하고 있습니다.
여러 회사에서 작업하고 있지만 실제로 작업 중입니다.
S3 버킷에 있는 동일한 데이터 공급망입니다.그리고 제가 할 수 있어야 할 것은
한 번에 그 데이터에 접근할 수 있죠.액세스할 수 있어야 합니다.
다른 지점이긴 하지만 언제 접속할 수 있는지 명시한 규칙이 필요해요
그리고 언제 액세스할 수 있는지 말이에요.그래서 실제로 만들 수 있습니다. 여기서는 약간 다른 목적으로 DynamoDB를 소개하겠습니다.이걸 이용해서 계획을 세워보도록 하겠습니다.
정책 스토어라고 불리는 것이죠.그리고 이러한 정책 스토어는 우리가 부르는 도구 안에 있습니다.
AWS 검증 권한, 줄여서 AVP.AVP를 사용하면 정책 저장소를 보유할 수 있습니다. 제가 지금 사용하고 있는 방법은 테넌트당 정책 저장소입니다.따라서 각 테넌트에는 고유한 것이 있습니다.
독립 정책 저장소.그리고 그 안에는 이런 관습이 있을 거예요
Cedar라는 언어는 Cedar라고 불리는데, Cedar는 철자가 딱 맞을 거예요
아주 간단한 규칙을 몇 개 만들면, “이봐, 이거 말이야.
컨텍스트, 이 특정 테넌트는 이미 테넌트 컨텍스트에 있기 때문에 원칙 유형이 일치하면 특정 문서를 검색할 수 있습니다.
제가 기대하는 것이죠.”이건 삼나무의 아주 간단한 예인데요, 물론 그럴 수도 있겠죠.
훨씬 더 복잡하지만 이렇게 하면 만들 수 있습니다.
순수 테넌트 격리 이외의 격리 패턴은 다릅니다.아직 테넌트가 필요해요
격리 상태가 유지되고 싶지만 여전히 보호하고 싶어요
테넌트별 데이터, 하지만 이러한 깔끔한 규칙을 충족하지 않는 다른 유형의 데이터가 있는 경우 AVP를 사용하여 규칙을 자세히 설명하면 됩니다. 테넌트 격리만으로 수행되지 않는 상황에서도 테넌트가 필요로 할 수 있는 데이터에 실제로 매핑할 수 있습니다.물론 우리에겐
거기에 또 다른 블로그도 있어요.그래서 여러분이 할 수 있기를 바랍니다.
이 QR 코드를 캡처하기 위해서요.곧 알게 될 것 같아요, 그렇죠?페더레이티드 아이덴티티는 또 다른 문제죠.페더레이션 ID의 작동 방식에 대해 너무 깊이 있게 설명하지는 못하겠지만, 페더레이션 ID는 여러분이 사용하는 개념입니다.
원한다면 언젠가는 들어가야 할 거예요
기업 고객에게 판매하세요.이 모든 것을 아주 높은 수준에서 다시 말씀드리면, 저희는
간단한 SaaS 애플리케이션, 다중 테넌트, 우리는
여전히 사용자 풀을 사용하고 있지만, 이제 새 변수를 도입합니다.테넌트가 우리를 찾아오자 테넌트 1은 이렇게 말합니다. “알다시피, 저는 Descope를 좋아해요.
그게 제 ID 공급자예요.저는 수천 개를 가지고 있어요.
이미 사용자들이 들어왔어요.자격 증명 풀에 이러한 사용자를 모두 생성하고 싶지는 않습니다.저와 연결을 끊으셨으면 좋겠어요.”다행스럽게도 테넌트 2도 Okta를 사용하고 싶어할 수도 있다고 가정해 보겠습니다.몇 개든 있을 수 있습니다.
연결하려는 다양한 ID 제공업체.하지만 다행스럽게도
그렇게 할 수 있는 몇 가지 다른 표준이 있습니다.Cognito와 같은 도구도
Auth0 또는 Descope를 기본 ID 공급자로 사용하는 이러한 도구를 사용하면 다음과 같이 페더레이션할 수 있습니다.
이러한 다른 데이터 저장소.그래서 OIDC를 사용할 수 있습니다.
사용자가 로그만 하면 Descope에 연결할 수 있습니다.
데스코프에 로그인하세요.그리고 데스코프는
코그니토와 대화하세요.그리고 코그니토는 단순히 동일한 유형의 JOT를 발산할 것입니다.
이 사람이 네이티브 Cognito 사용자였다면 그랬을 것입니다.Okta도 마찬가지입니다.
그리고 다른 인증 플로우도 마찬가지죠.하지만 아마도 이번엔
이 두 가지를 허용하는 또 다른 개방형, 또 다른 개방형 표준인 SAML을 사용하세요.
서로 통신할 수 있는 다양한 ID 저장소.그러니까 제가 어디에 대해서인지
어쩌면 이런 일이 일어날 수도 있을 것 같고, 어떤 혁신은
흥미롭네요. 마찰 없는 온보딩이라는 개념을 다시 소개하고 싶습니다.온보딩에 대해 생각할 때 우리는 테넌트가 받는 것을 보고 싶습니다.
소프트웨어의 가치를 최대한 빨리 파악하세요.그리고 제가 이 일을 하면서 부딪혔던 장벽 중 하나는 바로 가입할 때
페더레이션을 하고 싶으실 겁니다.그럼 무슨 일이 일어날까요, 당신은
소프트웨어에 가입하면 다음과 같이 말할 수 있습니다.
“좋아요, 저희는 SAML을 사용합니다.그들은 제 SAML IDP로 갈 거예요.파일을 가져올게요.
너한테 넘겨줄게.누군가 수동으로 설정해 줄 거예요.”그동안은,
일주일이 지났지만 평가하려는 소프트웨어의 가치를 전혀 얻지 못했다고 가정해 봅시다.다른 곳으로 옮겨 다른 것을 찾고 있는 것 같네요.
이제 소프트웨어가 하나 생겼네요.그래서 생각해 보고 싶은게
어떻게 우리가 이걸 할 수 있는 지경에 이를 수 있을까요?
원활한 방식으로 테넌트 관리자에게 권한을 부여했습니다.
직접 해보는 거죠.그럼 Descope를 다시 소개할게요. 그들이 이걸 어떻게 만들었는지 마음에 들고 기능도 마음에 들기 때문이죠.
그들이 만든 것인데, 선택할 수 있게 해주죠.
자체 ID 공급자를 서비스에 온보딩하는 역할을 합니다.다시 말씀드리지만, 테넌트 관리자는 소프트웨어에 가입하기만 하면 되고, 사용자를 추가하고 싶은 시점에 이르면 들어가서 선택할 수 있습니다.
자체 ID 제공업체.그리고 거기서부터 그들은
애플리케이션의 UI에서 페더레이션을 구성할 수 있습니다.그럼 간단히 들어가볼게요.
SAML 파일을 업로드하면 사용자들이 이 애플리케이션을 사용하고 있습니다.SaaS 관리자 상호작용이 전혀 없었기 때문에 이를 얻을 수 있었습니다.
서비스 온보딩.이것은 대단한 혁신입니다.그리고 데스코프라고 말하지 않을게요
이 일을 하는 건 저뿐이었어요물론 있을 수도 있겠죠.
이에 대한 다른 해결책도 있습니다.제가 잘 아는 게 이거예요
잘 알고 있는데 정말 멋지네요.저도 그런 방식이 마음에 들어요
Descope는 아이덴티티 플로우를 수행하고 있는데, 이를 통해 다음을 수행할 수 있습니다.
아이덴티티, 아이덴티티 플로우도 다릅니다
개별 테넌트용입니다.정말 멋진 기능이죠.그러니 확인해 보고 싶으실 수도 있습니다.알겠어요.그리고 넌 자주
Go 애플리케이션 사용하기.이제 생략하겠습니다.
현미경, 짐작하시겠지만, 이것은 관찰 가능성과 모든 것을 가질 수 있다는 것에 대한 기준입니다.
애플리케이션에서 방출되는 다양한 원격 측정 기능을 통해 다양한 역할의 사용자가 자신의 데이터를 관찰할 수 있습니다.
애플리케이션 및 운영.이제 SaaS 공급자와 대화할 때 SaaS 제공업체는 SaaS 공급업체에 다음이 있다고 말하는 경우가 많습니다.
옵저버빌리티에 관한 이야기지만, 표면을 조금 긁어보면 이들이 실제로 무엇을 가지고 있는지를 알 수 있습니다.
SRE의 이야기죠?다양한 SRE를 통해 EKS에서 사용하는 CPU의 수를 실제로 관찰할 수 있습니다.다음 여부를 확인할 수 있습니다.
EC2의 상태가 양호합니다.이들에게 어떻게 지내는지 물어 보면
우리 애플리케이션에 대한 비즈니스 지표가 나올 수 있을까요?아니면 어떻게 다른가요?
조직 내 역할은 운영 상황을 볼 수 있습니다.
애플리케이션의 상태는 어떻습니까?답은 보통 “음,
이제 해볼게요.”그럼 조금 생각해 봅시다.
이게 무슨 뜻인지 좀 생각해보시고 몇 가지 생각해 보세요.
옵저버빌리티 스토리를 구축할 때 이를 유연하고 탄력적으로 만들기 위해 사용할 수 있는 방법이죠.먼저, 우리가 관심을 갖는 이유는 무엇일까요?
옵저버빌리티에 대해서요서로 다른 역할은 무엇인가요?
우리가 생각해보고 싶은 것, 그리고 왜 이걸 만들었는지
애초에 데이터요?따라서 여기에는 비용 관리가 포함될 수 있습니다.비용 데이터를 어떻게 내보는지에 대한 FinOps 이야기는 SaaS의 성공에 매우 중요합니다.재무팀이 우리의 상황을 설명하는 데이터를 보고 시각화할 수 없는 경우
힘들게 번 현금을 이 세입자들을 지원하는 데 쓰이는 것인데 그들은 이해할 수 없습니다.
운영 비용에 대한 기본 단위 경제학
임차인이나 특정 기능, 계속 투자하는 방법을 어떻게 이해할 수 있을까요?
이 애플리케이션에는 어떤 유형의 고객을 유치해야 할까요?문제 해결은 어떨까요?다시 말씀드리지만, 아직
SRE의 이야기는 여기 있죠?우리는 여전히 할 수 있어야 합니다
애플리케이션 문제를 해결하고 애플리케이션을 이해하세요.
언제든지 건강을 유지할 수 있습니다.이것들은 여전히 이야기일 뿐이죠.
그것도 중요하지만 제품 개발은 또 다른 문제입니다.이러한 지표를 어떻게 도출할 수 있을까요?
관리하지 않는 비즈니스 사용자에게
매일 노력하는 애플리케이션
이 애플리케이션을 발전시키는 방법에 대한 전략을 이해하셨나요?특정 계층의 테넌트가 이러한 유형의 기능을 선호한다는 것을 특정 제품 소유자는 어떻게 이해할까요? 이것이 바로 그들이 사용하는 이유입니다.
애플리케이션 구매.어디에 있는지 어떻게 알 수 있을까요?
개발자의 시간인 소프트웨어 서비스에 투자해야 합니다.
이러한 새로운 기능에 대한 이해 없이
어떻게 사용되고 있나요?보안 및 규정 준수 사례결국에는 감사자가 사용할 데이터를 어떻게 내보내고 있을까요?각 데이터의 상태에 대한 데이터를 어떻게 내보내고 있나요?
인스턴스 중 하나와 해당 인스턴스가 적절한 위협 수준으로 패치되었는지 여부
우리 보안팀을 위해서요?우리는 어떻게 생각할까요?
성능 모니터링 맞죠?다시 말씀드리지만, 저희 이야기로 돌아가 보겠습니다.
SRE 이야기를 조금 들어볼게요.어떻게 예상하고 있나요?
무슨 일이 일어날지, 어떤 일이 벌어질지 이해해야
그 사용자 경험은?어떻게 하면 세부적인 내용을 끝까지 파고들어 이해할 수 있을까요?
임차인의 경험은?그럼 당연히 예측 유지보수를 하려면 어떻게 해야 할까요?왜냐면 이게 다음 차례니까요.
이건 세대 이야기죠, 그렇죠?궁극적으로는 제 애플리케이션이 저절로 발전하고 예방 조치를 취할 수 있게 하고 싶습니다.
유지 관리 조치, 적어도 SRE에 다음 사항을 알려주십시오.
뭔가 조치를 취해야 한다는 걸 알아차리기 전에 조치를 취해야 합니다.이제 활동을 표면화해 보겠습니다.
테넌트 컨텍스트가 모든 것의 핵심이라는 점을 고려하면
SaaS에서 옵저버빌리티를 활용합니다.절대 그럴 리가 없죠
우리가 내보내는 모든 것이 있다면 테넌트별 문제를 자세히 찾아낼 수 있을 거예요
저희 애플리케이션에서 말이죠.그게 로그든, 트레이스든, 이벤트든
당사의 애플리케이션 사용이나 비즈니스에 대해 설명해 주세요.
테넌시 없이 우리가 하고 있는 일의 기본 맥락.따라서 애플리케이션에서 생략하고 있는 모든 항목을 확인해야 합니다.
테넌트 컨텍스트가 있으면 잠금을 해제할 수 있습니다.
이러한 유형의 대시보드와 이러한 다양한 역할이 살펴볼 수 있는 운영 경험.이러한 테넌트 컨텍스트가 있고 FinOps 스토리를 구축하려는 경우 FinOps 사용자에게 다음과 같이 쉽게 표현할 수 있습니다. “이것이 정확한 상태입니다.
주어진 테넌트 중, 이 테넌트 계층은
이 세입자 지역.”뭐가 다르든
그들이 측정하려는 단위는 테넌트 컨텍스트가 있는 한, 그리고 우리가 가지고 있는 한
운영 컨텍스트와 옵저버빌리티 스토리를 잘 활용하면 이러한 문제를 해결할 수 있습니다.
단위별로 나눠서 말이에요.자, 실제로 보면
이걸 좀 더 나은 방법으로 만들어 보자면, 오늘 제가 볼 수 없는 것에 대해 좀 생각해 보고 싶었어요.제가 가진 것 중 하나는
보니까 사람들은 비교적 간단한 것부터 시작한다는 거예요.
운영 스토리.CloudWatch를 사용하고 있을 수도 있고 기본적인 것을 사용하고 있을 수도 있습니다.
Prometheus와 같은 AWS 스택이고 당분간은 괜찮을 수도 있습니다.하지만 제가 자주 발견하는 것은
저는 SaaS 고객들이 자신의 고객을 발견할 때 가끔 만나곤 합니다.
옵저버빌리티 스토리 스택이 필요한 모든 기능을 제공하지는 않습니다.이에 대한 한 가지 해답은 무엇일까요?그럼, 오픈텔레메트리는 어때요?OpenTelemetry에서 제가 좋아하는 점은 바로 사용할 수 있다는 것입니다.
같은 유형의 방출, 관측성 방출 방식이죠.
모든 유형의 스택에서EC2이든 아니든
EKS, ECS, 심지어 람다까지 모두 훌륭한 기능을 갖추고 있습니다.
오픈텔레메트리 스토리.오픈 버전 중 하나를 사용할 수 있습니다.
소스 오픈텔레메트리 임베더 또는 OTel을 사용할 수 있습니다.
AWS에서 제작한 버전입니다.여기서는 오픈 소스 버전을 사용할 거예요. 모두 내보내고 싶거든요
내 데이터를 S3로 내보내고 S3로 트레이스를 내보내려면 오픈 소스가 필요합니다.
이 시점의 버전입니다.가까운 미래에 꽤 많이 나타날 변화라고 생각해요.그래서 제가 할 수 있을지도 몰라요
아주 유연한 스택을 바로 만들어보세요.어쩌면 그냥, 당신일 수도 있습니다.
글루 좀, 아테나, 그 위에 QuickSight를 붙였는데 지금 저한테는 그게 맞을지도 몰라요.하지만 저는 OpenTelemetry를 사용해 보았고 모든 것이 S3에 전달되었습니다.그래서 이걸 발견하면
스택이 저한테는 잘 안 돼요. 다시 말씀드리지만
멀티 테넌트, 멀티 테넌트, 멀티 계정 OpenTelemetry에 관한 블로그.해당 특정 버전
참고로 저는 오텔을 사용합니다.그건 오픈 소스 버전을 사용하는 게 아니에요.또 다른 블로그가 준비될 예정입니다.
그 얘기 나와서 얘기해 보죠.하지만 OpenTelemetry는 유연성을 제공합니다.따라서 앞서 말씀드린 이 AWS 스택을 사용하고 있다면, S3이든, 프로메테우스이든 상관 없습니다.
CloudWatch, X-Ray, OpenTelemetry용 배포판을 비롯한 다양한 도구를 필요한 만큼 사용할 수 있으며 OpenTelemetry를 전송할 수 있기 때문에 여러 도구를 사용할 수도 있습니다.
여러 소스로 전송할 수 있습니다.하지만 이런 도구를 하나라도 사용할 수 있게 되면
효과가 없는 경우 타사 도구 중 일부를 살펴볼 수도 있습니다.
Datadog과 같은 당사의 파트너는 누구인가요?데이터독의 스토리는 무엇일까요?뭔가 뭔가가 있나요?
로그를 관리하는 방식이 더 좋을 것 같은데요
오늘 뭘 하고 있는 거지?다이나트레이스는 어때요?트레이싱이나 그 밖에 뭔가 다른 게 있나요?
우리가 더 좋아할 것 같은데요?허니콤은 아주 좋은 방법을 가지고 있습니다.
애플리케이션 디버깅.그게 제가 할 수 있는 일인가요?
특정 사용 사례에 사용하나요?뉴렐릭은 어때요?스모 로직은 어때?이 모든 것의 장점은
이러한 파트너 솔루션은 모두 탄탄하다는 것입니다.
OpenTelemetry는 이미 AWS와 통합되어 있습니다.이를 사용하여 시작할 수 있으며
원격 측정 여부에 대해서는 그다지 걱정할 필요가 없습니다.
지금 구축한 스택은 내년이나 5년 후에 필요할 것입니다.대신 다음과 같이 보낼 수 있습니다.
필요한 경우 여러 소스로 서로 다른 원격 측정을 수행하고 특정 사용 사례에 대해서도 이러한 다양한 도구를 사용하세요.이것이 제가 OpenTelemetry에서 정말 좋아하는 점 중 하나입니다.제 생각엔 만약 여러분이 그렇게 할 수 있다면
오늘 처음부터 새로 만들면 사용할 수 있습니다
OpenTelemetry를 스택에서 사용하면 정말 유용할 것입니다.
미래의 당신.그러니까 이게 함정인 것 같아요
투자하지 않아도 오늘도 피할 수 있습니다.
이 스택에 너무 많아요우리가 겪게 된 또 다른 함정은 애자일 가격 책정을 어떻게 관리할지 고민하지 말라는 것입니다.그래서 우리는 보통 가격 책정에 대해 생각할 때 고민하게 됩니다.
비즈니스 관점에서 보면, “아, 우리 제품의 가격을 어떻게 책정할지 비즈니스 담당자들이 결정하도록 할게요.”문제는 우리가 가지고 있다는 거예요.
건축학적 관점에서 이를 뒷받침할 수 있어야 한다는 것이죠.말이 안 돼요
우리 회사가 와서 “고객이 API를 호출할 때마다 요금을 청구할 거야”라고 말한다면, 어떻게 할지 세지 않는다면
API 호출이 많이 있습니다.그리고 흔한 것 중 하나는
제가 경험한 사용 사례는 올해에도 반복되었는데, 고객은
제품을 판매해 봤지만 실제로는 측정하지 않습니다.
해당 애플리케이션 사용.그들은 이렇게 말할 수도 있습니다. “이봐, 넌 그럴 자격이 있어.
이 서비스에 100번 전화해줘요. 하지만 그들은 그 수를 세지 않아요.아니면 그들은 이렇게 말하죠. “우린
사용량 기반 가격 책정을 하고 있는데, 사용량의 절반은
청구해야 할 비용이 바닥나고 있습니다.우리는 이것을 수익 누수라고 부릅니다.그리고 이건 뭔가
특히 우리가 자각하고 있는 이 시장에서는
순수한 성장뿐만 아니라 지속 가능한 성장에 대해 말이죠. 우리가 정말 해야 할 일이죠.
고삐를 죄십시오.그럼 이것이 관행의 관점에서 어떻게 보이는지 살펴보죠.
도구 측면에서도 마찬가지죠.간단한 예제부터 시작하겠습니다.요금 청구는, 알다시피 꽤 괜찮은 편이죠.
간단하죠. SaaS부터 시작하죠.결제 이벤트를 발생시키는 SaaS 솔루션이 있거나 결제 이벤트를 수동으로 생성하여 다음과 같은 청구 제공업체에 보내고 계실 수도 있습니다.
Stripe는 훌륭한 결제 서비스 제공업체이고, 알다시피 이벤트는 괜찮을 수도 있습니다.
그냥 이런 식이죠, 그렇죠?간단하게 설명하자면
테넌트 및 일부 용도.다시 말씀드리지만, 어쩌면 우리는
이걸 손으로 입력하는 거죠. 어쩌면 우리가 실제로 할 수 있을지도 몰라요.
애플리케이션에서 내보내세요.하지만 그건 중요한 게 아니에요
출발점 맞죠?고객에게 청구할 수 있어요.
인보이스를 생성할 수 있어요.나쁘지 않아요.하지만 뭐가 문제일까요?
이걸 보면 알 수 있을까요?진짜 문제는
우리가 직면하게 될 것은 우리가 구축하지 못한 탄력성과 유연성입니다.
이런 솔루션에 말이죠.어떻게 하면 이런 상황을 극복할 수 있을까요?자, 유연성 측면에서 이것이 무엇을 의미하는지 생각해 봅시다.다시 말씀드리지만, SaaS 솔루션을 갖는다는 것은 여전히
결제 이벤트를 내보내고 있지만 대신 삭제되고 있습니다.
EventBridge 또는 기타 유연한 대기열 기반 시스템으로 전달됩니다.이제 복원력이 확보되어 어떤 종류의 문제도 처리할 수 있습니다.
도중에 장애가 발생하면 배송 보장 서비스에 대기 상태로 올라가 청구하는 청구 서비스에 대기 상태로 남게 됩니다.그리고 이것은 DynamoDB에 기록하는 간단한 Lambda일 수 있습니다. 여기서 우리가 내보내는 데이터에 대한 계산을 시작할 수 있습니다.그래서 우리는 현재 데이터를 캡처합니다.
상태, 정확히 무엇을 내뿜었는지이제 이것들의 합계를 시작해볼게요. 그리고 그 내용이 무엇인지 알아보죠.
잠시만 지나면 될 것 같네요.하지만 물론 유연성은
제가 여기서 말하는 것 또한 상황에 따라 다릅니다.
요금 청구 서비스 제공자의 정보죠.그래서 저희는 여전히 Stripe를 좋아하고, 특정 고객에 대한 데이터를 Stripe로 보내고 싶지만, 일부 고객에 대해서는 그럴 수도 있습니다.
여기서는 다양한 사용 사례를 살펴보겠습니다.가격을 실험해 볼 수 있는 Amberflo와 같은 도구는 어떨까요?자, 이제 몇 개 보내볼게요
제 고객들은 Stripe로 떠나지만 저도 Stripe로 여행을 떠나고 싶어요.
제가 구축한 이 새로운 고객 계층에 대해 가격을 실험해 보세요.Amberflo와 같은 도구를 사용하여 가격을 조정하고 다양한 요금제를 사용해 보면서 Stripe와 통합할 수 있습니다.그러니까 제 모든 데이터는 궁극적으로는
Stripe를 사용했지만 이로 인해 약간의 오류가 발생합니다.이제 두 개쯤 가질 수도 있겠네요.
제가 실제로 데이터를 보내고 있는 다른 결제 서비스 제공업체들이죠.그리고 마켓플레이스는 어떨까요?기업 고객이 있다면 결국에는 마켓플레이스를 통해 구축해 보라고 하는 사람도 있을 것입니다.고객이 더 좋아할 수도 있을 뿐만 아니라
비용을 지불할 수 있는 단일 인터페이스
마켓플레이스를 통해 청구하지만 AWS에는 실제로 몇 가지가 있습니다.
그들이 지금 지출하는 것에 대한 인센티브
AWS와의 자체 EDP 약정.약간 내부적인 측면이긴 하지만, SaaS 제품을 판매한다면 그건 일종의 내부적인 문제입니다.
아마도 다음에 대해 알게 될 것이고 아마도 통합을 끝낼 수도 있을 것입니다.
언젠가는 마켓플레이스죠.따라서 유연한 시스템이 필요합니다.
그러면 이 텔레메트리를 캡처해서 여러 소스로 전송할 수 있습니다.전송에 대해 이야기하는 블로그도 있습니다.
타사 시스템에 원격 측정 기능 추가
다음과 많이 비슷해 보이는데 그 방법에 대해 설명합니다.
스트라이프와 통합하세요.이제 트래킹과 회피를 할 수 있습니다
수익 유출은 다시 데이터로 돌아갑니다.
제가 말씀드렸던 것이죠.내가 말했듯, 우린
이 데이터를 DynamoDB에 캡처하지만 그냥 캡처할 수는 없습니다.
원시 데이터를 캡처하세요.또한 계산을 수행하고 정확한 데이터를 이해할 것입니다.
저희 테넌트가 적용한 다양한 사용량에서 우리가 끌어내야 하는 수익의 현황입니다.이것이 의미하는 바가 될 수 있습니다.
모니터링 자격.그러니까 아마도 우리가 할 수 있는 일은
어떤 고객들은 경우에 따라서는 저희 애플리케이션을 일정량 사용할 수 있습니다.이 경우 테넌트 1이 전화를 걸 수 있어야 한다는 것을 알 수 있습니다.
주문 서비스는 10회, 제품 서비스는 100회.여기 빨간 글씨가 이미 보이시죠.그래서 그들은 이미 전화를 걸었습니다.
제품 서비스를 105번 받았으니, 초과했다는 뜻입니다.
그들의 자격.이런 일이 벌어지고 있다는 걸 알아야 합니다.하지만 이걸 문맥을 통해 살펴보죠.
특정 결제 서비스 제공업체.계약이 있는 AWS 마켓플레이스를 사용한다고 가정해 보겠습니다.따라서 저희 계약에서는 다음과 같은 사항을 허용합니다.
각 테넌트에 대한 자격을 설정할 수 있습니다.그러니까 이건 좀 더
전통적인 맥락 맞죠?여러 번 사용할 수 있지만 테넌트가 내 애플리케이션 사용을 중단하게 하고 싶지는 않습니다.
100명이 되자마자 말이에요.그걸 모니터링하고 싶어요.
그걸 이해한 다음 그 때 시작되는 프로세스에 대해 비즈니스 결정을 내립니다.고객에게 이 사실을 알리고 고객에게 알릴 수 있나요?
자격이 초과되었나요?제가 그들에게 CSR과 대화해서 CSR을 늘리라고 권할 수 있을까요?
제품 등급은 어떻게 되나요?다양한 방법이 있습니다.
이걸 감당하고 싶단 말이야제가 이 일을 감당하고 싶지 않은 방법은 청구서 서비스 제공업체를 이용하는 것입니다.
한도를 초과했으니 텔레메트리 수집을 그만두세요.그러니까 슬리피지를 없애고 싶어요
제 결제 서비스 제공업체와 제 애플리케이션 사이에
이 데이터를 분석하고 이를 기반으로 의사 결정을 내릴 수 있습니다.
제 비즈니스 룰에 따라 말이죠.물론 이제는 사용량 기반이 될 것입니다.
가격 책정도 마찬가지죠?모두가 이해합니다
사용량 기반 가격 책정이 점점 더 널리 보급되기 시작했습니다. 특히
GenAI 기능 소개.그래서 제 권한과 함께 사용량에 따른 가격 책정도 있을 수 있겠죠.제 테넌트 중 일부는 둘 다 가지고 있을 수도 있습니다.실제로 테넌트 2가 서로 다른 두 테이블을 가로지르는 것을 볼 수 있습니다.그리고 마켓플레이스에는 다른 유형이 있습니다.
계약+소비라고 하는 SaaS 제품을 제공할 수 있는데, 이를 통해 다음을 수행할 수 있습니다.
두 서비스 모두 이러한 사용 권한과 사용량을 함께 제공하기도 합니다.제가 말씀드릴 수 있는 건 여러분도 한 번쯤은
제품 콜을 100회 받을 수 있고 요금이 청구될 거야
그 이후로는 모두에게 1달러죠.그래서 이것들을 조합할 수 있습니다.
마켓플레이스에서는 두 가지 컨셉이 있습니다.보시다시피 테넌트 2는 실제로 계속 운영되고 있습니다.
그들의 제품 사용량을 사용하세요. 거기엔 제한이 없어요.
그냥 사용량에 따른 가격일 뿐이죠.이제 테넌트 3만
사용량 기반 가격 책정 (이렇게 부를 수도 있음)
AWS Marketplace에 있는 구독 유형 목록. 이렇게 하면 간단하게 할 수 있습니다.
사용량 기반 요금.제품을 보면 이런 경우를 자주 볼 수 있습니다.
AWS 마켓플레이스의 데이터독이나 스노우플레이크처럼
순전히 사용량 기반입니다.무언가를 할 때마다 눈송이 유닛을 사용하게 될 거예요.그게 뭐가 됐든, 그게 뭐냐면
스노우플레이크의 모니터링, 저건 스노우플레이크 유닛이죠?이것이 사용량 기반 가격이고, 물론 마켓플레이스도 마찬가지입니다.
이 또한 지원합니다.그리고 우리가 운영하는 블로그가 있습니다.
관심이 있으시다면 저희가 구축한 컨트롤 플레인인 SBT를 AWS Marketplace와 통합하는 방법도 알려드리겠습니다.
마켓플레이스에 대해 자세히 알아보십시오.제가 하지 못한 것 중 하나는
작년에 대해 조금 후회했던 얘기는 더 이상 얘기하지 않았어요.
요금에 무료 체험을 포함시키세요.자, 어떤 모습일까요?아마 표준 등급이 있고 몇 가지 기능이 있을 수도 있습니다.
켜져 있고 일부는 꺼져 있으며 표준 아키텍처를 사용할 수 있습니다.아마도 이렇게 가정해 봅시다.
사일로 아키텍처입니다.누구나 자신만의 EKS를 갖게 됩니다.
클러스터, 자체 데이터베이스, 자체 OpenSearch 인스턴스.이제 다음과 같이 생각해 봅시다.
무료 체험판 관점에서 보면 어떤 모습일까요?우리가 허락하고 싶다면
사용자들이 우리 제품을 사용해보고 우리 제품을 구매하도록 유도하세요. 어떤 생각이 드나요?글쎄요, 구체적인 기능이 있었나요?
예를 들어 표준 티어와 고급 티어 중 하나를 선택하도록 유도하는 기능을 켜고 끄는 중입니다.
비싼 등급 제품?그리고 이러한 기능 중 일부를 제한하여 사용해볼 수 있게 할 수 있나요?보시다시피 표준 등급에는 실제로 없습니다.
기능에 대한 액세스도 가능하지만 제한된 용도로는 아주 좋은 것처럼 사용하고 싶을 수도 있습니다.
GenAI 기능 허용, 한 달에 한두 번, 아니면 그냥 사용해볼 수 있도록
나가서 그들이 원하는지 여부를 결정했는지 알려주세요.
스탠다드 티어 또는 어드밴스 티어를 구매하세요.아키텍처는 아마도 그 이상일 것입니다.
저한테는 흥미로운 부분이에요.더 저렴하고 비용 효율적인 버전을 지원해 주셨으면 좋겠습니다.
귀사 인프라의 모습이죠.다음과 같이 전체 스택을 실행하는 경우
프리 티어로 제작하려면 엄청난 비용이 들 것입니다.어떤 선택을 할 수 있을까요?글쎄요, 고립에 대한 선택을 할 수도 있겠죠.네임스페이스 격리는 완전히 분리하는 것이 아니라 어떨까요?
사일로화된 EKS 인스턴스?모두 동일한 서비스를 사용하는 런타임 격리는 어떨까요?운영 비용이 훨씬 더 저렴할 수 있습니다.SLA를 리타겟팅하는 건 어떨까요?이렇게 말하는 대신, “이것들은
보장된 런타임을 원한다면 Neon DB처럼 할 수 있습니다.Neon을 사용해 볼 때
DB를 보면 “야, 프리 티어니까 좀 느릴 거야.” 라고 말할 거예요.1분 전일지도 몰라요
데이터베이스가 “시작”되는 것은 번개처럼 빠르다는 그들의 프로덕션 경험과는 완전히 다릅니다.
바로 시작하자마자 바로 그 사실을 미리 알려주죠.이것이 공정한 주식 고객들이 받아들일 수 있는 일인가요?아마도 그럴 수도 있겠죠그러면 그럴 수도 있겠죠.
흥미로운 선택이었어요. 할 수 있다는 뜻이거든요
사용자가 애플리케이션을 사용하지 않을 때는 0으로 축소하세요.데이터 레질리언스가 낮아집니다.이 프리 티어 데이터를 백업해야 하나요?이 데이터는 우리가 영원히 갖게 될 건가요?
프로덕션 데이터로 변환할까요, 아니면 그냥 쓰레기로 변환할까요?제가 할 수 있는 데이터인가요?
그냥 바닥에 엎드려?AZ를 여러 개 설치하고 싶지 않아요.더 낮은 수준의 결정을 내리세요
행 수준 보안과 같은 비용.테넌트당 하나의 인스턴스를 갖는 대신, 아마도 모든 인스턴스를 공유할 수 있을 것입니다.
우리가 그랬던 것처럼 그 데이터를 집어넣고 집어넣으세요.
DynamoDB를 동일한 테이블에 저장합니다.그리고 아마도 OpenSearch에서도 테넌트별 인덱스를 생성할 수 있을 것입니다.이 모든 것이 옵션입니다.아키텍처에 따라 다양한 종류가 있을 수 있습니다.
비용을 줄이기 위해 활용할 수 있는 레버의 종류
무료 티어를 계속 사용하면서 경험해 보세요
해당 경험의 품질은 펜던트가 구매 결정을 내릴 때 기대하는 수준에 달합니다.제가 라스트 마일 가격 책정이라고 부르는 또 다른 개념이 있습니다.제가 연구해 본 적이 있어요.
스케매틱이라는 팀이 있어요.그리고 둘 다 특집을 하는 다른 많은 팀들과는 달리
플래그, 가격 책정 등 이 두 가지 개념을 결합했습니다.따라서 애플리케이션 내에서 기능을 관리할 수 있습니다.하지만 다른 점은
LaunchDarkly 또는 앱 구성 또는 다음과 같은 기타 도구
순전히 기능 플래그 기반이므로 테넌트가 이러한 기능을 사용할 수 있도록 허용하고 사용량을 늘립니다.
이를 가격 책정에 반영했습니다.따라서 가격 책정 모델은 전적으로 고객이 이러한 기능 플래그를 사용하는 횟수에 따라 결정됩니다.애플리케이션 사용을 가격 책정 모델에 연결할 수 있는 편리한 방법입니다.물론 다음과 같은 방법도 가능합니다.
Schematic 내에서 이러한 가격 책정 모델을 생성하세요.그러니까 아무 것도 없잖아요.
애플리케이션 내에 있는 일종의 가격 책정 지식,
모든 것이 다운스트림에 있습니다.이를 통해 비즈니스 사용자는 이 다른 도구에서 가격을 관리할 수 있지만 개발자는 그렇지 않습니다.
심지어 어떻게 작동하는지도 완전히 생각해야 합니다.
이 두 개념을 분리한 것이죠.물론 그들은
Stripe이든 다른 것이든 결제 서비스 제공업체와 통합을 수행해 줄 것입니다. 그러면 결제 제공업체는 다음을 제공할 것입니다.
해당 고객에 대한 청구서.실패에 실패하는 것은
작년 강연 내내 각 섹션의 끝에 테스트를 진행했는데, 같은 슬라이드를 대부분 포함시켰어요. 다시 살펴보도록 하겠지만
충분히 깊이 들어갔는지 알아두세요.아직도 많이 듣고 있는 것 같아요
많은 SaaS 고객이 유닛 테스트를 가지고 저를 찾아오는데, 일부는
아주 기본적인 전체 테스트, 출시 직전에 실행하는 통합 테스트입니다.하지만 문화로서의 테스트는 여전히 제가 하고 있는 일입니다.
소프트웨어 전반에서, 특히 엄청난 문제를 안고 있는 SaaS 공급업체에서는 충분히 활용되지 못하고 있습니다.
상당히 극적일 수 있습니다.그럼 뭐가 문제였죠?
작년에 얘기 나눴어요?글쎄요, 정책이 어떻게 작용하는지에 대해 얘기했었죠.어떻게 생각해 볼까요?
한계를 뛰어넘을 수 있는 인공 임차인 만들기
우리 애플리케이션의?우리가 할 수 없는 것을 테스트할 수 있을까요?
이 인위적인 테넌트로 인해 이웃에 시끄러운 문제가 생겼는데, 이 인위적인 테넌트가 부하를 가하고 있습니다.
애플리케이션 엣지.해당 API가 있는지 테스트해 볼 수 있을까요?
게이트웨이 URL이 실제로 노출되어 있어 다른 사람이 뒤쳐질 수 없습니다.
애플리케이션의 엣지에서 API 게이트웨이를 공격하기 시작하면 트랜잭션이
초당 한도가 초과되면 다른 모든 테넌트에게 소음과 이웃 문제가 발생할 수 있습니다.그걸 우회할 수 있을까요? 노출된 람다 자체를 찾아서 공격할 수 있을까요?그리고 모조품을 가져가도 될까요?
제가 만든 페이로드 또는 제가 만든 페이로드
다른 테넌트로부터 가로채서 이를 사용하여 전달했습니다.
애플리케이션에?그리고 방법이 전혀 없을까요?
제 데이터가 노출될 수도 있나요?제가 확인했나요?
제 데이터가 잠겼는데 아무 것도 없어요
어떤 식으로든 외부 액세스?그리고 전부 테스트해보고 싶어요
제 다양한 릴리즈에서 이런 것들이 계속 나오고 있어요.그리고 우리의 SLA도
고객들과 약속한 내용인데, 조금 이해하기 쉬운 부분이긴 하지만
다양한 유형의 계층과 서로 다른 인프라.해당 인프라의 SLA
상황이 매우 다를 수 있습니다.우리가 약속한 사일로 인프라는
기업 고객 여러분, 응답하는 데 1초 정도 걸릴 수도 있지만 그건 완전히 공유되었습니다.
경험은 3초입니다.그걸 어떻게 테스트할 수 있을까요?
우리가 만드는 모든 릴리스가 이러한 SLA를 방해하지 않나요?실제로 제공하는 다양한 로드 프로필을 만들고 있습니까?
낮에도 극심한 부하가 발생할 수 있는 상황인가요?불안정한 테넌트가 한 명 있으면 어떻게 될까요?그 수가 늘어나면 어떻게 되나요?
5~10명의 스파이크 테넌트가 모두 애플리케이션에 영향을 미쳤습니다.
동시에?SLA가 아직 남아 있나요?
계속 성공할 수 있을까요?그렇지 않으면 어떤 벌금이 부과되나요?우리가 그 돈을 기꺼이 지불할 의향이 있나요?제대로 구성되어 있나요?
우리 애플리케이션에 적합한가요?그리고 우리의 제품을 테스트해 볼 수 있을까요?
개별 워크로드 파트?우리 제품을 실제로 가져갈 수 있을까요?
비동기식 워크로드를 깨우고 실행하여 동기식이라는 것을 증명하세요.
워크로드는 가해지는 부하의 영향을 받지 않습니다.
우리의 비동기식 워크로드?자, 이것이 제가 가장 많이 생각했던 영역 중 하나입니다.작년에 이야기를 나누었을 때, 저는 응용 프로그램이라는 것을 증명하기 위해 기능을 켜고 끄는 것에 대해 이야기했습니다.
모든 기능이 꺼져도 계속 작동할 수 있습니다.저는 여전히 이 기능이 좋다고 생각하지만, 이것이 실제로 증명하지 못하는 부분은 다음 슬라이드에서 다루도록 하겠습니다.이건 유효해요.기존 제품을 계속 사용하세요.
제품 기능 테스트 진행, 계속 청록색
테스트를 위한 배포의 수.훌륭한 패턴이죠.롤아웃이나 웨이브 기반 배포를 하고 있지 않다면
개선을 위한 훌륭한 패턴입니다.
시스템의 복원력.어쩌면 우리가 할 수 있을지도 몰라요
동일한 플래그를 사용하여 패키징과 가격을 실험해 보세요.어둡게 론칭할 수 있어요.
새로운 등급의 제품을 만들었으니 큰 혼란을 야기하지 않으면서 무대 뒤에서 계속 혁신하고 실험할 수 있습니다.
기존 애플리케이션에.제가 생각해왔던 것은
하지만 올해는 혼란스러운 일이 많아요.어떻게 하면 신뢰할 수 있을까요?그리고 한 가지 흥미로운 점이 있습니다.
제가 이야기하기 시작한 도구인데 커플에게 아주 잘 맞는 것 같아요.
다양한 측면에서 말이죠.먼저, 설정해 보겠습니다.
테스트 시나리오.간단한 응용 프로그램을 하나 만들었죠.
그렇게 간단하지 않을 수도 있습니다.API 게이트웨이가 생겼습니다.Lambda 권한 부여자가 있습니다.
테넌트를 인증할 수 있는 방법에 대해 논의하고 있었습니다.그럼 몇 개만 남았을 뿐이죠.
DynamoDB를 호출하는 다른 Lambda의 다른 비즈니스 로직입니다.일부 타사 서비스를 호출합니다.하나라도 있으면 어떻게 되나요?
이 조각들 중 고장이 난다고?그리고 여기가 바로
제가 전에 만들었던 기능 플래그 주장은 잘 풀리지 않습니다. 왜냐하면 그 기능 플래그는 아마도 다양한 기능을 다루기 때문이지요.
제 애플리케이션의 일부분이죠.그래서 저는 살펴보기 시작했습니다.
Gremlin이라는 툴은 SaaS 솔루션을 제공하는 카오스 엔지니어링 툴입니다.그렘린을 사용하면 다음을 수행할 수 있습니다.
실제로 실험을 설정해 보면 그 실험 안에 개념이 생겼습니다.
실패 플래그라고 부릅니다.사고의 관점에서 보면 멋진 혁신이라고 생각해요.
테스트를 하는 방법과 실패를 유발하는 방법에 대해 말하자면, 이러한 실패 플래그를 사용하여 특정 부분을 공격할 수 있기 때문입니다.
애플리케이션.이들이 구축한 Lambda 확장 프로그램은 SDK를 통해 연결되므로 애플리케이션은
각 장애 플래그의 상태를 모니터링하고 있습니다.물론 몇 가지 플로우 코드가 필요합니다.저는 여기서 보여드리는 게 아니에요.
가장 간단한 문장은 “이봐, 만약 이 깃발이
끄기, DynamoDB를 호출하지 마세요.”라고 설정하면 충분할 수 있습니다.
이 실패 상태를 설정하세요.하지만 우리는 이 모든 것을 테스트할 수 있습니다.
다양한 시나리오, Cognito를 사용할 수 없음, 특정 테넌트 사용 불가
권한을 부여할 수 있습니다.제가 좋아하는 점 중 하나는 컨텍스트를 전달하고 다양한 테넌트 시나리오를 공격할 수 있다는 것입니다.취하면 어떻게 되나요?
제 가장 큰 세입자가 쓰러졌나요?그들의 경험은 어떤가요?런칭 직후에 더 많은 하중을 가하면 어떻게 되나요?Lambda에 접속할 수 없는 경우 어떻게 되나요?사실 거의 다 됐어요.
진짜 테스트는 불가능해요. 정말 갈 수 없으니까요.
그리고 람다를 쓰러뜨리세요.그래서 이런 실패를 겪게 되다니
들어가서 “야, 이런 척 해보자”라고 말하는 함수들
비즈니스 기능이 다운됐어요.내 애플리케이션은 어떻게 반응하나요?완전히 다운되었나요?훌륭하고 우아하게 반응할 수 있을까요?
이러한 실패 상태에 대한 건가요?만약 우리의 경우는 어떻게 되나요?
데이터베이스를 사용할 수 없나요?타사의 경우 어떻게 되나요?
서비스를 이용할 수 있나요?”다시 말씀드리지만, 방금 말씀드린 청구 시나리오는 정말 비동기식인가요?대금 청구는 모두 완료했나요?
이벤트가 실제로 백업되었다가 성공적으로 진행되었습니다.
결제 서비스 제공업체에 문의하셨나요?매번 혼란이 닥칠 때마다
애플리케이션의 일부.제가 그렘린에서 정말 마음에 들었던 점은, 이 도구 말고도 말이죠. 왜냐하면, 이봐, 아마도
이런 도구도 직접 만들어보세요.그렘린이 좋은 예시인데요, 거추장스러운 일을 많이 덜어줍니다.제가 정말 좋아하는 점은 무엇인가요?
매주 이러는 거예요.그렘린은 실제로 그들을 공격합니다.
그렘린이 탑재된 자체 SaaS 시스템.완벽한 강아지 먹이 이야기.그리고 그들은 실제로 이렇게 해서 가장 많은 고객을 끌어내기도 했습니다.그리고 그들은 매주 만납니다.
CTO까지.이들은 자체 애플리케이션을 공격하면서 배운 점과 앞으로 더 잘할 수 있는 것에 대해 이야기합니다.정말 멋진 도구인 셈이죠.
또한 자신의 제품을 사용하는 아주 멋진 사례이기도 합니다.
제품을 테스트하기 위해서요.좋아요, 예상하지 못했어요
배포는 더 복잡하죠.이는 올해에만 한정된 내용입니다.팀에 합류한 이후로 고객 계정에 배포하는 방법에 대해 계속 이야기해 왔습니다.첫 고객 중 한 명이었어요.
저와 함께 일했던 Dremio는 그들의 일부에 대해 공개적으로 이야기한 적이 있습니다.
인프라가 고객 계정에 배포됩니다.우리는 그들과 함께 일했고,
그들에게는 중요한 전략이긴 했지만, 일종의 특이점이었죠.많은 SaaS 고객
모든 인프라가 자체 계정 내에 있는 Salesforce 모델을 여전히 따랐습니다.무엇이 바뀌었나요?AI가 바뀌었기 때문에 AI가 변했습니다.
고객 데이터에 대한 액세스.이로 인해 더 많은 것이 요구되고 있습니다.
인프라를 확장하려는 SaaS 제공업체가 점점 더 많아지고 있습니다.
엣지를 향해 나아가세요.그게 무슨 뜻이고
어떻게 대처해야 할까요?음, 중요한 질문이네요.왜냐하면 당신이 가장 큰 사람이라면
고객이 여러분에게 와서 이렇게 말합니다. “알다시피, 저는 당신의 신청서가 마음에 듭니다.기꺼이 사용하겠지만, 사용하지 않을 거예요.
우리 계좌에 넣지 않으면 되잖아.”그냥 그 사람들한테는 안 팔아요?당신은 이렇게 말하죠. “뭐, 어쨌든 고마워요.그 10달러는 필요 없어요
우리에게 백만 달러를 지불할 거예요.우린 괜찮아.고마워요.우리는 그 모델이 마음에 들지 않아요.”아니, 아마 가지고 계실 거예요
어떤 식으로든 지지하기 위해서요그래서 제가 생각해보고 싶은 것은 무엇이 다른가입니다.
보안이 우리를 한계까지 밀어붙이고 있기 때문에 이를 지원하기 위해 우리가 사용할 수 있는 모델을 사용할 수 있습니다. 하지만 그 한계에는 미묘한 차원이 있습니다.시작해보죠. 간단하죠.
우리 자신을 어떻게 보호할 수 있는지에 대한 전통적인 모델이죠.이건 정말 간단합니다.고객 관리 키를 예로 들어 보겠습니다.
S3 버킷이 있다고 가정해 보겠습니다.고객이 데이터를 우리에게 전달해도 여전히 우리에게 전달될 수 있습니다.이 키로 데이터를 해독할 수 있어요.작업이 끝나고 사용하려 하지 않는 즉시
우리 애플리케이션이 더 이상 그 키를 망가뜨릴 수 있어 데이터를 더 이상 사용할 수 없게 되죠.이것은 어느 정도 효과가 있는 모델입니다.일부 기능을 제공할 수 있습니다.
고객에 대한 신뢰.좋아요, 이제, 알다시피, 제가 당신의 애플리케이션을 사용하고 싶지 않을 때는 키를 깨뜨릴 수 있어요. 하지만 만약 당신이 그렇게 했다면 어떻게 될까요?
이미 데이터를 복호화했는데 데이터가 CloudWatch 내부에 있거나 데이터 내부에 있습니다.
데이터베이스가 다른 곳에 있나요?따라서 모든 문제가 해결되는 것은 아닙니다.다른 범위의 해결책도 있습니다.그 중 하나가 니트로 엔클레이브입니다.꽤 복잡한 해결책이죠.이에 대해서는 다른 슬라이드로 설명하겠습니다.하지만 니트로 엔클레이브를 사용하면 데이터를 보호하고 보호할 수 있습니다.
특정 상황에서만 데이터가 저장될 수 있습니다.
해당 컨텍스트 내에서 해독되었습니다.데이터 프라이버시 볼트를 사용할 수도 있겠죠.그럼 제가 하나 드릴게요
데이터 프라이버시 볼트인 스카이플로우가 어떻게 허용하는지 보여주는 예시
데이터를 익명화하여 고객을 확보할 수 있습니다.
PII가 없어도 고객 데이터를 공유할 수 있습니다.물론 원격 에이전트도 사용할 수 있습니다.이런 현상은 오래 전부터 흔해왔고, 어느 정도
드레미오의 작동 방식처럼요.애플리케이션의 일부를 배포합니다.애플리케이션은 데이터를 수집하며 Dremio가 비즈니스 인텔리전스 도구로 사용하는 데 실제로 필요한 관련 데이터만 내보냅니다.전체 원격 시스템을 배포할 수도 있습니다.
학습 환경을 고객 계정에 저장한 다음 내보내기만 하면
비즈니스 인텔리전스, 아시다시피 파생된 데이터, 그렇지 않은 데이터
PII는 민감하지 않습니다. 그걸 우리 애플리케이션으로 내보내세요.아니면 그냥 던질 수도 있습니다.
우리의 AI 애플리케이션 전체를 벽 너머로 배포하세요.
고객 계정으로 가서 이렇게 말하세요. “네, 됐어요.아직 컨트롤 플레인이 있고, 옵저버빌리티를 확보하고 싶지는 않지만, 그래도 할 거예요. 여러분들이 이걸 관리해야 할 거예요.소프트웨어 운영의 부담을 여러분에게 전가했습니다.” 이상적이지는 않을 수도 있지만 솔직히 말씀드리자면 뭔가
SaaS 제공업체와 대화를 하고 있는 지금 이 순간에도 그런 일이 벌어지고 있습니다.그 중 일부는
이 모델에 억지로 집어넣었죠.이건 흥미롭네요
오픈소스에 관한 대화.점점 더 많아지는 걸 봤어요.
소프트웨어에 더 익숙한 기업의 수
오픈 소스인 경우그래서 이 대화도
슬라이딩 스케일은 실제로 어떻게 배포하고 있는지, 어떤 코드를 배포하고 있는지, 오픈소스인지 아닌지에 따라 영향을 받을 수 있습니다.이는 의사 결정자가 될 수도 있고 아닐 수도 있고 선택 사항이 아닙니다.
모든 SaaS 제공업체에 적합합니다.그냥 제가 할 수 있는 일이에요.
레이더에 올려놓고 싶은데이 정도 규모를 줄이면 오픈소스라면 어떻게 될까요?기업이 그럴까요?
다음과 같은 경우 고객은 해당 코드를 신뢰할 의향이 있습니다.
계정에서 실행 중인데 오픈 소스인가요?자, 내가 하겠다고 말했잖아
비교적 간단한 개념인 데이터 프라이버시 볼트에 대해 말씀드리죠.아직 SaaS 애플리케이션이 있고 SAS 테넌트가 해당 애플리케이션을 직접 사용하기를 바랍니다.물론 그들의 데이터도
그들은 자신의 계좌에 살고 있습니다.여기서는 DPC를 줄여서 사용하고 있지만, 이것들은 DPC의
그들이 소유한 계정.그들은, 알다시피, 몇 개 가지고 있잖아요.
S3 버킷, 일부 데이터베이스그럼, 데이터 프라이버시는 뭐죠?
저장소를 통해 우리가 할 수 있는 일은 이 저장소를 다음과 같이 배포하는 것입니다.
테넌트 소유의 리소스.여기서 데이터는 익명화되지 않습니다.데이터가 통과할 때
데이터 프라이버시 볼트는 PII, Bill을 추출합니다.
Tarr는 XYZ 123으로 대체되었으며 지속적으로 대체되고 있습니다.따라서 동일한 데이터 패턴을 사용할 수 있고 XYZ 123이 사람이라는 것을 이해할 수 있습니다.빌 타르라는 사람이 아니에요.이제 언젠가는 이런 도구를 이용한 재식별과 재식별도 도입할 수 있을 것입니다.
역할 기반 제어가 가능합니다.그러니까, 를 가진 사람이
예를 들어, 의료진이 와서 이렇게 말하죠.
“좋아요, 환자 데이터가 필요해요. 그래야 실제로 갈 수 있으니까요.
이 도구를 통해 데이터를 재식별하거나 다른 역할을 통해 데이터를 재식별하세요. 콜센터 담당자가 볼 수 있는 내용만 볼 수 있는 경우처럼요.
그들이 살고 있는 주, 그리고 아마도, 아시다시피
주소의 일부.그리고 스카이플로우는 정말
이에 대한 좋은 예시죠.여기서 어려운 부분은 암호화와
역할 기반 액세스 제어.그리고 또 다른 것은
스카이플로우가 지금 하고 있는데, 사실 제가 정말 기대하는 것은 그들이 GenAI를 사용한다는 것입니다.
사설 데이터가 무엇인지 이해할 수 있도록 이 모델들을 실제로 훈련시키세요.그래서 그들이 하는 일은
모든 데이터를 살펴보면서 개인 데이터라고 생각되는 정보를 제공하거나
보호하고 싶은 IP, 그리고 자신이 보호할지 여부를 선택할 수 있는 IP
보호하고 싶은지 아닌지일부를 제거해 줍니다.
차별화되지 않은 무거운 물건.이것이 이 모델의 단점인데요, 실제로 가지고 계신
PII가 무엇인지 파악하고 그 모든 것을 없애는 거죠.그리고 그건, 알다시피,
여전히 인간의 과정입니다.누군가 실수를 할 수도 있어요.그리고 우리에겐 블로그가 있어요.
스카이플로우에 관한 몇 개의 블로그예제 중 하나가 여기에도 있습니다.자, 이걸 사용할 수 있는 또 다른 방법은 실제로 푸시할 수 있다는 것입니다.
머신 러닝 워크로드를 고객 계정으로 이전하세요.이 방법이 더 익숙합니다.
작년에 했던 브레이크아웃을 포함하여 과거에 이야기했던 SaaS Anywhere 모델이죠.이제 SaaS 애플리케이션은 지금과 거의 비슷해 보일 수 있지만 SageMaker를 예로 들어 보겠습니다.
우리의 머신러닝을 붙여서 그 속에 집어넣으세요
고객 계정.그곳에서 데이터에 액세스하고 필요한 모든 처리를 수행하며 비즈니스를 운영합니다.
인텔리전스를 활용하세요.그리고 BI를 가져와서 테넌트 사용자가 있는 SaaS 계정으로 다시 전달할 수 있습니다.
실제로 액세스하고 있습니다.Dremio가 하는 것과 약간 비슷하지만, 머신 러닝 측면이 꽤 흥미롭다는 점만 빼면 말이죠, 그렇죠?계정에서 탈퇴할 수 없는 테넌트 데이터가 있다면 머신이 필요합니다.
데이터를 처리하는 방법을 배우면 효과가 있을 수도 있지만 여전히 많은 작업이 필요합니다.
운영상의 오버헤드가 심하죠.모든 것을 관리해야 합니다.
이 모든 것은 순조롭게 진행하거나 실제로 임차인 자체를 관리해야 합니다.
이 전체 스택을 관리할 수 있어야 하죠.물론 반복해서 말씀드리죠.
이는 많은 테넌트에 적용되었습니다.우리가 여기서 하고 있는 모든 일을 사일로 모델에만 국한시킬 수 있는 거죠.마지막으로, 니트로 엔클레이브는
아마 이 대화의 가장 최근에 나온 부분일 겁니다.
아직 완벽하진 않더라도 흥미로운 이야기죠.
모든 시나리오에 맞는 솔루션.니트로 엔클레이브에서 마음에 드는 점
데이터가 정확한지 확인할 수 있나요?
계정에 유입되는 정보는 매우 제한된 창에서만 확인할 수 있습니다.그래서 니트로 엔클레이브가 제대로 작동합니다.
EC2를 만드시겠습니까?그 EC2 내에서는 실제로 일부를 기부하는 셈입니다.
EC2의 일부를 저희에게 돌려드리겠습니다.따라서 AWS에서 일부를 관리할 것입니다. 액세스 권한이 없는 도커 컨테이너처럼 상상해 보십시오.이 도커 컨테이너는
트래픽을 허용하는 단일 VSoC 파이프가 있습니다.
그리고 여러분이 만든 이 엔클레이브 밖에서도 말이죠.그래서 여러분은 거주지를 만들게 됩니다.
흐름의 일부로 서명을 생성합니다.아시다시피, 생각해 보세요.
이건 TLS와 많이 비슷하죠?이 시스템에서만 사용할 수 있는 시스템 서명을 생성하여 고객과 공유합니다.여러분은 이렇게 말합니다. “이봐, 이건
KMS로 데이터를 암호화하는 데 사용할 키입니다.이 키는 키의 일부여야 하고, 이 키는 키에 포함되어야 합니다.
KMS에서 사용하는 서명”이제 제가 가진 모든 것이
KMS로 S3 버킷에 로그인한 경우 이를 통해서만 해독할 수 있습니다.
제가 만든 니트로 엔클레이브그래서 엔벨로프 기반의 제품을 통과시켰어요.
암호화를 다시 시작하죠.암호화의 심층적인 부분을 모두 이해하지 못해도 괜찮습니다.아시다시피, 데이터를 암호화할 때 키가 생성되었다는 점을 이해하세요.
암호화된 데이터를 가지고 있는데, 둘 다 다시 넘겨버렸어요.
암호화된 데이터인 니트로 엔클레이브와 니트로 엔클레이브 교환을 합니다.
증명 문서.자, 이게 문제예요.
그게 뭐냐고 물었죠. “이게 뭐죠?제가 바로 이 존재예요.”그리고 KMS와 그걸 주고받는데, KMS는 이런 기능을 하죠.
꼬마 춤은 이렇게 말합니다. “좋아, 네가 누군지 알겠어. 이 데이터를 해독하도록 해줄게.”그리고 유일한 건
이 데이터를 해독할 수 있는 건 니트로 엔클레이브 자체입니다.흥미로운 패턴이네요.여기에는 몇 가지 잠재적인 대안이 있습니다. 그 중 하나는 여러분이 할 수 있다는 것입니다.
실제로 데이터를 니트로 엔클레이브 밖으로 내보냅니다.사실 이 VSoC도 가능하죠.
열려 있으면 데이터를 내보낼 수 있습니다.그러니까 좀 가져야 돼요
여기서 실행할 코드를 고객들과 합의하세요. 보통 이렇게 작동하죠.제가 말할게요. “이봐, 이 코드를 니트로 엔클레이브 안에서 실행해 볼게.동의하세요?
너한테 민감한 건 안 내보낼 거야?”그러니까 이걸 가지고 계실 수도 있어요.
뭘 할 건지 그들과 쌍방향 대화
그들의 데이터를 가지고 그 데이터가 방출되지 않을 거라는 걸 증명하고 어떤 식으로든 방출되지 않을 거라는 걸 증명하세요. 아니면 정말 생각해야 돼요
그 데이터가 무엇인지에 대해서요.자, 반대편은
이건 그냥 EC2입니다.따라서 전체 애플리케이션 측면에서 볼 수 있는 범위가 제한됩니다.단일 EC2 내부에 거대한 설치 공간이 있는 것을 원하지 않을 수도 있습니다. 그렇죠?따라서 방법이 제한될 수 있습니다.
애플리케이션과 실행 방식을 설정했습니다.그래도 매우 흥미로운 모델입니다.그리고 고객이 있다면
그들의 유일한 관심사는 데이터를 어떻게 그리고 어디서 읽을 수 있는가입니다. 이것은 우리가 고객의 우려를 어느 정도 해소하고 고객의 이의를 없애고 운영하도록 하는 데 도움이 될 수 있습니다.
사용자 계정에서 애플리케이션을 사용하세요.그리고 제가 이 모든 모델에서 강조하고 있는 것 중 하나는 관찰성을 확보해 보라는 것입니다.이것들을 내버려 두지 마세요. 예전처럼 벽에 던지지 마세요.
소프트웨어를 패키지화하면서 “음, 모든 것이 잘 돌아갔으면 좋겠어요.” 라고 말하세요.소프트웨어에 행운을 빕니다.아니요, 꼭 확인하세요
이 소프트웨어에 대한 운영 데이터 및 해당 소프트웨어가 제공하는 기능에 대해 알아보고 있습니다.이게 CloudWatch인지, 우리가 그냥 가져가는 건지
우리의 모든 CloudWatch를 종합해서 적용하고 있습니다.
중앙 대시보드든 아니든.이제 거의 다 됐네요.잠깐 시간을 내서 그걸 꺼냈는지 확인하고 싶었어요.
내일 전에 얘기했던 세션이 몇 개 있어요.너무 많진 않아요 왜냐면
벌써 수요일이에요.하지만 그 SBT 세션은 브레이크아웃이고, 토드 골딩이고, 멋진 강연이에요.가능하면 꼭 참석해 주세요.대부분의 다른 강연은 거기서
안타깝게도 흰색 부분은 이미 지나갔지만 브레이크아웃은
이미 YouTube에 올라와 있습니다.그 중 두 개를 이미 이번 주 초부터 봤어요
오늘 아침 유튜브에서그리고 워크숍도 있어요.
그리고 빌더 세션도 있고요.여전히 반복되는 부분이 있습니다.
내일 일어날 거야.그러니까 기회가 된다면
가서 확인해 보세요.그걸로 감사하다는 말을 전하고 싶어요.제발, 설문지를 작성해 주세요.이건 정말 중요합니다.더 많은 SaaS 주제를 보고 싶다면, 이것이 SaaS 주제가 무엇을 결정하는지입니다.
주제는 re:Invent에 있습니다.그러니 계속할 수 있다면 좋은 말을 몇 가지 해주세요.
저, 정말 고마워요.아니면 적어도 SaaS에 대해 좋은 말을 해주시고 SaaS 주제를 더 보고 싶다고 말씀해 주시면 더 많은 SaaS를 보게 될 것입니다
내년에도 다시 찾아뵙겠습니다.좋아요, 모두들 고마워요.(청중들의 박수)