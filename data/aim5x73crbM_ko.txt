[분위기 있는 음악] 하나 가져가세요.그리고 액션.베르너, 오늘은
우리는 복잡성이 어떻게 증가하는지에 대한 개념을 탐구하고 있습니다.
단순한 기원에서 말이죠.더 자세히 설명해 주실 수 있나요?당사의 오리지널 서비스 중 상당수
S3처럼 '단순'이라는 이름을 붙여야 하는데
심플 스토리지 서비스.단순해요, 이름에서 보자면
하지만 현실은, 일을 단순하게 만들면
정말 복잡할 수 있습니다.이번 심플렉시티 에피소드에서는
세계 속의 한 곳에 대한 이야기를 들려드리겠습니다.
최대 규모의 스토리지 시스템과 혁신가 팀
단순함을 유지하기 위해 노력하고 있습니다.아시다시피, 다시 돌아왔어요.
2000년대 초반이었죠.제 생각에는 네 개가 있었던 것 같아요.
아마 우리 다섯 명일 거예요. 저, 베르너, 알, 그 외 몇 명
그들이 더 이상 여기 없을 뿐이라는 거요이건 REST API였어요.
그리고 몇 가지 기능이 있습니다.알렉스는 많은 영감을 주었죠.
S3의 단순함, 맞죠?알렉스, 피자 전문가?-알?
-알.-알렉스?
-액스, 알렉스알렉스?
헤이, 어이, 어서 오세요.늘 그렇듯, 베르너, 뭔가 봤어요
그에게서 다른 누구도 해내지 못했던 일이었죠.제 생각에 그는 정말 고마워하는 것 같아요.
제 접근법이요저는 단순하게 하는 게 가장 중요해요.그냥, 아시죠?어느 날 밤, 우린 주문을 했었지
피자 몇 개, 그리고... 그가 들어왔어요그는 이 스택을 들고 있어요
피자 박스가 많아요. 높이가 20피트 정도죠.오, 맙소사!이게 뭔지 알 것 같아요.뭔가 다른데요, 이게 뭐죠?그는 땅에 쓰러지고,
대부분의 피자를 떨어뜨립니다.아, 아, 그리고 그 말을 꺼냈는데
팀당 피자 두 판인 것 같아요.피자 두 판을 구할 수 있었죠.잘됐네그리고 팀당 피자 두 개를 만들었죠.피자 두 판 팀, 맞아요.우리는 우리의 기능을 세분화했습니다.
계층 구조를 만들고 조직을 재구성했습니다.
우리가 먹여 살릴 수 있을 만큼 작고 자율적인 팀으로
각 팀마다 피자가 두 개밖에 없었어요.우리는 함께 피자 한 개를 만듭니다.아, 게다가 제프와 케빈.팀당 피자 두 판.방법을 찾아보던 시절에
스토리지 비용을 줄이기 위해... 저는 아주 간단한 계획을 고안했습니다.그리고 알렉스가 방금 나타났어요.
피자 커터를 들고 시작하죠.
슬라이스 샤딩.지금은 일하고 있어요
프랑켄 피자에 대해 말이에요프리짜예요.붐.어서 오세요, 이레이저 코딩.우리는 다시 작성해야 했습니다.
전체 스토리지 엔진이었죠.글쎄요, 그럴 수밖에 없었죠.네.들어 보셨나요?
빙하 사고?알렉스는 계속 사람들을 만들었지
피자의 절반을 냉동실에 바로 넣었더니 음식이 너무 많았고, 너무 많이 남았어요.말씀해 주실 수 있나요?
글레이셔 사고에 대해?글레이셔 스토리지 클래스 말이에요?다양한 비용 등급
다양한 액세스 패턴에 적합합니다.저희는 항상 데이터를 보관하기 위해 노력하고 있습니다.
복잡성에 상관없이 고객이 쉽게 이용할 수 있습니다.
우리에게 도움이 됩니다.이건 그냥 뭔가일 뿐이야
우리는 함께 살고, 포용하고, 소중히 여기고, 심지어 소중히 여기는 법도 배웠습니다.알렉스가 스파크를 터뜨렸는지 누가 알겠어요
이 모든 혁신이 있었나요?그는 가구의 일원이 되었죠.오, 짜증나네요.그게 2016년이에요.그는 여기 있어요.이 사람이 바로 그 사람이에요.-이 사람은 당신을 사랑해요.
-뭐, 제가... 뭐라고요?무슨 일이에요, 알렉스?그래서 이 모든 성공이 원동력이었죠.
소박한 피자 덕분이죠.피자?내 생각엔
복잡성과 단순성에 관한 다큐멘터리였나요?네, 물론이죠. 사실,
자네의 오랜 협력자인 이단아, 네가 고용한 이단아
단순함을 고취하기 위해서요알렉스?베르너.오, 좋아요, 이거 환상적이에요.이 사람은 도대체 누구야?알렉스를 고용하지 않았나요?그는 피자 두 판 팀에 영감을 줬어요.-알렉스?
-알렉스.알.알 데려오라고 했잖아Al V., 메인 개발자
초창기에는 S3에 있었습니다.저기 잘라주실래요?[강렬한 리듬 음악] [오케스트라 음악] [오케스트라 음악 종료] 부통령님을 환영합니다
그리고 Amazon.com의 CTO인 베르너 보겔스 박사.[음악 재생] [음악 페이드] 좋은 아침입니다.매년 더 많이 받아요
당신의 열정에 겸손해졌습니다.여기 줄서기에 대한 여러분의 열정을 만날 수 있었으면 좋겠습니다.
아침 6시, 벌써
와서 제 이야기를 들어보려고.잘 살 수 있으면 좋겠어요
그 기대에 부응할 수 있겠네요올해는 좀 그랬어요.
특별한 해였어요.알다시피, 20년 전엔
45살의 어린 아이가 포기하기로 결심했습니다.
그의 학문적 경력은 바로 가서 일하는 것이었습니다.
서점에서 말이에요.네, 그리고 만약 당신이 그랬다면
그 당시에 제게 20년 동안 일할 수 있냐고 물었죠.
같은 고용주였다면 당신을 데려갔을 거예요
정신 나간 정신병원에 갔어요네, 하지만 아마존에서 20년 동안 일했는데
정말 놀라울 따름이죠.매년 달라졌어요.그리고 기술의 양은
저희가 이룬 성과들
그 20년 동안은 그냥... 모르겠어요.
아직도 믿기지 않아요.그리고 저도 아직 안 끝났어요.자, 한 가지 더 말씀드리자면
지난 20년 동안 계속 배워왔습니다.
그리고 학습과 학습.사실 저는 학자로서 잘 몰랐거든요.
제가 어떤 분야에 빠져들었는지라고 생각했을지도 몰라요
학계에서는 시스템을 만들고 있었어요.
실제 사람들을 위한 것이지만 솔직히 말씀드리자면
저는 고객을 상대할 필요가 없었어요.정말 어렵게 배운 것도 몇 가지 있었습니다.
그에 관한 교훈.정말 머리를 숙이고 싶었어요
주변을 돌아다녔죠.하지만 배움과 배움은
그리고 배움은 확실히 제가 지난 20년 동안 해왔던 일이었어요.저는 정말 대단했고, 에너지가 넘쳤어요.
너무 독단적이고 너무 오만해서
솔직히 말하자면, 그 당시에는하지만 제 학문적 배경은 정말
앞으로 다가올 일에 대비해 저를 제대로 준비시키지는 못했었죠.알다시피, 럭셔리함
기계가 멈춰서 고장난다거나 고장이 상관관계가 없는 것과 같은 학문적 가정은
완전히 비현실적이죠.그리고 일을 시작한 지 몇 달 됐을 때
제프 베조스와 릭 달젤이 저에게 원하는지 물었습니다.
CTO로 일하고 싶었죠.알다시피, 저는 정말 그럴 수 없었어요.
세계를 건설할 기회를 놓쳐버리세요
사용될 예정이었던 최대 규모의 분산 시스템
거의 모든 사람들이 말이죠.알다시피, 알 베르뮬렌
그 당시 CTO였던 사람은 그 일을 원하지 않았어요.그는 그 일을 원하지 않았어요.
그리고 그는 정말로 다시 엔지니어로 돌아가 손으로 코드를 작성하고 싶었습니다.
차세대 기술이죠.그리고 우리는 그래야 합니다
알에게 정말 고마워요. 왜냐하면 그는 건물을 지었으니까요.
AWS의 토대입니다.이면에 숨겨진 모든 하드코어 기술
그 장면들은 그의 손에 달렸어요.그리고 AWS 내부의 기술 문화는 확실히 여러분도 알 수 있는 것입니다.
알의 지문이 여기저기 널려 있어요.그래서 저는 정말 큰 신발을 신고 다녀야 했는데 그걸 감안하면 사실 아무도 없었어요.
CTO가 어떤 일을 맡는지 정말 잘 알았어요.
제 오만함이 저를 더 낫게 만들었죠.그리고 제가 그 일을 맡았죠.자, 그 20년 동안
많은 하이라이트가 있었죠.네, 그 중 하나는 물론이죠.
최초의 re:Invent였죠.기회를 얻었으니까요
여러분과 이야기를 나누고 원칙을 정하기 위해서요.
다음 세대의 발전이 될 거라고 생각했던 것이 무엇인지, 우리가 앞으로 어떻게 나아갈 것인지에 대해
완전히 다른 점은 이러한 애플리케이션을 다음과 같은 방식으로 구축한다는 것입니다.
만들고 싶다는 생각은 항상 알고 있었지만, 그럴 수 없었죠.그래서, 아시다시피
첫 번째 프레젠테이션에서는 다음과 같은 내용을 제시했습니다.
제가 생각하는 네 가지 다른 범주는
제가 조언을 드렸는데요.자, 그럼 잠깐 얘기해 볼까요?
다시 한 번 보세요. 얼마나 잘했는지 아시죠?
이 모든 게 밝혀졌나요?그 중 몇몇은 있는 것 같아요.
정말 잘 나갔어요.많은 분들이 프로덕션을 운영하고 계셔서 정말 자랑스럽습니다.
적어도 두 개의 AZ에 워크로드가 있는 것 같아요.
아시다시피, 지속적 통합과 지속적 배포
이런 것들은 그냥
오늘 다들 그렇게 하고 있어요.꼭 그렇지는 않습니다.
내가 말했으니까, 하지만 만나서 정말 행복해
그런 것들이 모두의 것으로 이어졌다니,
개발 패키지.그럴 수도 있는 것들이 몇 가지 있었습니다.
조금 더 논란의 여지가 있거나 시간이 좀 더 걸렸죠.자, 이제 작게 분해해볼까요?
빌딩 블록들은 느슨하게 결합되어 있고 스테이트리스 (Stateless) 였는데... 아마존에서는 이런 것이 있습니다.
늘 그래왔고, 이를 통해 규모를 확장하고, 안정성을 높이고, 부품을 발전시킬 수 있었습니다.
독립적으로, 그런 것들도요.하지만 한 걸음 더 나아가고 있었습니다.
어떤 형태로든
종교에 대해서요, 그렇죠?모노리스를 사용하든 말든
또는 서비스 또는 마이크로서비스
나노 서비스를 예로 들자면, 이 모든 것이
정말 논란의 여지가 많죠.하지만, 아시다시피, 건축은
요구 사항에 따라 수행하는 작업입니다.
여러분이 가지고 있거나, 때로는, 알다시피, 다음과 같은 것들을 기반으로 하는 것들이죠.
사용하기로 결정한 기술.나노를 만드는 것은 매우 어렵습니다.
또는 레일을 넘어서 실행하는 경우 마이크로서비스를 통해 자동으로
모놀리스를 선택하세요.그래서 이 글을 썼습니다.
배포된 모든 것에 대해 제 생각을 정리하는 것과 같습니다.
모놀리스와 마이크로서비스의 차이점과 여러분이 하는 일은 무엇인가요?
이 특정 시나리오에서요.제가 제안한 또 다른 건
당신이 하는 일은 사업과 협력하는 것입니다.결국 우리는 건물을 짓지 않습니다.
기술은 오직 우리 자신을 위한, 기술자인 우리를 위한 것입니다.우리는 고객을 위해 개발합니다.그리고 그 고객들이 있든 없든
내부적으로 여러분의 사업인가요, 아니면 정말 그렇습니다.
외부적으로는 어떤 이유에서든 고객을 구축합니다.따라서 다음을 수행해야 합니다.
비즈니스와 긴밀하게 협업하고 아키텍처를 구축하세요.
그들이 통제할 수 있는 방식으로
어떤 식으로든이제 헤어지라는 조언을 드렸잖아요
애플리케이션을 계층별로 분류한 다음 대화를 나누세요.
예를 들어, 현업 부서에서는 얼마나 신뢰할 수 있어야 하는지를 예로 들 수 있습니다.
각 계층은 그래야 합니다.물론 이제 회사에서는 이렇게 말할 것입니다.
모든 것이 100% 신뢰할 수 있어야 합니다.그런 다음 그들에게 설명해 주세요.
비용이 얼마나 드는지, 그러면
대화.그리고 확실히 그 요점은
제가 말씀드렸듯이, 이제 아키텍처를 설계할 수 있습니다.
비용을 염두에 두고 모두가 노골적으로 무시했습니다. 갑자기 갑자기
이 모든 걸 할 수 있어요.너무 빨리 움직일 수 있어요.더 이상 제약을 받지 않으셨군요
자체 데이터 센터에 있는 물리적 하드웨어의 종류를 기준으로 말이죠.그리고 작년이 되어서야 가능해졌습니다.
비용에 대해 생각하고 통합하려는 욕구가 정말 생겼다는 걸 알게 됐죠.
여러분의 아키텍처에 말이죠.그리고 작년에도 그랬으면 좋겠어요
검소한 건축가가 실제로 줬잖아요
거기에 대한 몇 가지 지침이 있습니다.사실, 우리는 개조 작업을 하고 있습니다.
Frugal Architect 웹 사이트에는 많은 새로운 콘텐츠와 깊이 있는 콘텐츠가 있습니다.
여러 엔지니어의 지원 방식에 대해
그들의 작업은 검소했고, 팟캐스트도 많았습니다.그럼 다시 들여다보면
회복력이 있는 부분에 대한 유명한 인용문이 있습니다.
그 말은 항상 제 탓이에요.안타깝게도 그 인용문은
항상 불완전합니다.그냥 전부가 아니에요.
항상 실패합니다.가장 중요한 부분은
사실 두 번째 문장이죠.그러니까, 실패에 대비해서 계획을 세우세요.
그리고 아무것도 실패하지 않을 거예요알다시피, 생존이란 게 아니에요.
그건 운에 맡기는 거지계획을 세워야 합니다.자, 돌이켜보면
첫 번째 발표는, 제 생각엔, 아시다시피
많은 원칙이 여전히 유효합니다.제가 아마 덧붙이고 싶지만
오늘까지 몇 가지 말씀드리죠.자, 진화성은
확실히 변화를 수용할 수 있는 능력이죠.
시간이 흐르면서, 아마도
데이터베이스를 어떻게 선택하시나요?제 말은, 2012년에는 그런 게 없었다는 거죠.
다양한 선택이 가능했지만, 지금은 전체 제품군으로
용도에 맞게 구축된 데이터베이스의 경우 아마도 다음이 필요할 것입니다.
이에 대한 몇 가지 지침, 무엇을 사용해야 하는지,
어떤 특별한 경우에 말이죠.하지만, 있었습니다.
2012년에 제가 분명히 구체화하지 못한 것이 하나 있습니다.그 당시에 제가 그걸 발표했었죠.
너한테는 오캄의 면도기처럼 말이야.오브젝트를 곱해선 안 됩니다.
필요 이상으로, 그렇지 않은 분들을 위해
고등학교에서 라틴어를 배웠어요.그게 실제로 의미하는 바는
일을 단순하게 하는 거였죠. KISS의 원칙은
단순하게, 멍청아왜 그렇게 멍청한지 모르겠어요
그 끝이야, 왜냐면 넌 아닌 것 같거든
단순함을 유지할 수 없다면 멍청한 짓이죠. 왜냐하면 복잡하기 때문이죠.
항상 몰래 들어오는데, 그게 바로 당신이 하는 일이에요
정말 통제가 필요해요.생각해 보셔야 할 게 있어요
복잡성, 그리고 사실 복잡성을 관리하는 방법
우리 중 대다수는 피할 수 없는 일이죠.이런 시스템들은
시간이 지날수록 더 복잡해지는데, 이는 좋은 일입니다.
왜냐하면 일반적으로 우리는 다음을 추가하고 있기 때문입니다.
여기에 더 많은 기능이 추가되었습니다.확장이 필요해요.보안 문제를 해결해야 합니다.
이런 모든 것들이요.그리고 AWS, 기억하세요. 많은 AWS가
서비스는 여전히 단순한 SimpleDB라고 불립니다.
심플 스토리지 서비스, 심플 큐잉 서비스,
단순 알림 서비스.이러한 서비스 중 어느 것도 간단하지 않습니다.
더 이상 비밀에 부쳐요.모두 정말 복잡해요.하지만 우린, 어떤 이유에서인지
그걸 잘 해냈고, 복잡성을 관리할 수 있었죠.그리고 이들 중 다수가 성과를 거두었습니다.
이 복잡성은 매우 성공적이었죠.몇 가지 걸림돌이 있습니다.
하지만 그 과정에서 이겨냈지만 우리는 해낼 수 있었습니다.
복잡성은 어렵죠.그리고 저는 오늘 시간을 보내고 싶어요.
사실 여러분께 진화에 대해 말씀드리자면
아마존에 있는 이런 복잡한 시스템들을 어떻게 안전하고 안전하게 처리하는지
간단히 말씀드리자면, 단순함이죠.단순성 원칙에 기반하여 구축된 복잡한 시스템
관리 용이성을 위해.이러한 맥락에서 매우 관련성이 높은 법률입니다.
테슬러의 법칙이 맞죠?복잡성 보존.복잡성은 만들어낼 수 없습니다.
파괴할 수도 없습니다.다른 곳으로만 이동할 수 있어요.사실 흥미로웠던 건
제가 아마존에 입사했을 때 래리 테슬러가 아마존에 있었다는 건
그리고 저는 래리에게서 많은 것을 배웠습니다.그는 주로 다음 사항에 대해 걱정했습니다.
사용자 인터페이스와 그 이면의 기능,
고객에게 공개하는 내용.하지만 생각하는 건 정말 근본적이었어요.
그 복잡성은 당연하죠.하지만 복잡성이 전부는 아닙니다.
창조는 평등하죠, 그렇죠?분명히 의도된 복잡성이 있습니다.그런 게 꼭 필요한 거죠.시스템 확장에 도움이 되고
새로운 기능에 적응하고, 변화하는 고객 요구를 충족하고,
네, 의도적인 것이며 분명한 목적에 부합합니다.하지만 의도치 않은 것도 있습니다.
몰래 들어오는 복잡성,
기술의 변화나 아키텍처의 부재로 인해 발생하는 경우가 많습니다.
감시.그러면 속도가 느려지고
시스템을 유지 관리하기가 더 어려워집니다.핵심은 두 유형을 모두 인식하는 것입니다.만약 그렇지 않다면, 시스템들은
유연한 것에서 깨지기 쉬운 것으로 빠르게 전환하세요.그렇다면 의도치 않은 징후는 무엇일까요?
복잡성이 몰래 들어온다고요?우리 모두 알고 있죠.
내 말은, 우리 모두 여기 와봤다는 거지.기능 속도가 점점 떨어지고 있습니다.
확실히 뭔가입니다.아마존을 보면, 우리가 갔을 때
모놀리스에서 서비스로, 서비스에서 마이크로서비스로, 마이크로서비스로
공유 서비스 인프라에 도달할 때마다 핵심은 그 원동력이었습니다.
그 혁신은 더뎌지고 있었지만, 어려운 일들은
무대 뒤에서 우리가 해야 하는 일들 때문에 더 어려워졌습니다.
다음 기능을 구현하기 위해서요.하지만 이제 알게 되실 겁니다.잦은 에스컬레이션,
티켓이 점점 더 많아지고 있습니다.코드 베이스가 너무 커서 실제로는
무슨 일이 벌어지고 있는지 아무도 몰라요.그래서, 이 모든 패턴들은
실제로 발전하는 데 방해가 되죠.
시스템을 유연하면서도 동시에 안정적으로 유지하는 것이죠.그 방법을 보여주는 좋은 예가 하나 있습니다.
복잡성은 이리저리 움직이기 때문에 피할 수 없습니다.
이게 특별한 예죠.이것은 일종의 추상적인 방법입니다.
저는 고객과 AWS를 생각합니다.따라서 고객은
애플리케이션 라우터.특정 도메인이 많이 있습니다.
그 아래에 있는 앱과 이 모든 것이 AWS에서 실행됩니다.자, 대부분의 고객들이 실제로
몇 가지 기본 서비스를 구현했고
일부 공유 서비스는 실제로는 도메인에 따라 다르지만
각 애플리케이션에서 공유합니다.우리는 항상 고객과 협력하여 복잡성을 검토합니다.
공유 서비스 계층에서 말이죠.우리가 성공하지 못했기 때문에 그들이 해야 할 일들이 있나요?
그들에게는 충분히 간단할까요?자, 그 중 하나가
Amazon S3에서 일관성이 보장되는 것은 당연한 일입니다.이제 이를 기반으로 출시했습니다.
왜냐하면 2006년에 이런 생각이 널리 퍼졌기 때문이죠.
그게 우리가 시스템을 만들 수 있는 유일한 방법이었어요.
신뢰할 수 있고 실패를 견뎌낼 수 있습니다.하지만 많은 고객들이
이 문제를 해결하기가 매우 어려웠습니다.버킷을 만들었을지도 몰라요.
그런 다음 즉시 버킷에 쓰기를 시도했는데, 그 결과 버킷이
아직 사용할 수 없을 거예요.네, 좋은 고객 경험은 아니죠.그래서 많은 고객들이 시도했습니다.
S3에 강력한 일관성을 구현하는 것은 위험했지만 구현하기 때문에 위험했습니다.
강력한 일관성은 무엇보다도 어렵습니다.하지만 확실성을 높이는 것도 중요하죠.
모든 엣지 케이스를 파악할 수 있다는 것이죠.그래서 여기서 해야 할 일은 옳은 일입니다.
그 복잡성을 없애는 게 아니라 원래 있어야 할 곳으로 옮기는 거였어요.그래서 Amazon S3를 구현했습니다.
S3 내부의 강력한 일관성.복잡성이 증가하고 있습니다.
필요한 곳에.그런데,
이곳은 적절한 곳이기도 합니다. 자동화를 사용할 수 있기 때문이죠.
그 사실을 스스로 증명할 수 있는 추론은,
사실 모든 것이 정확했어요.모든 엣지 케이스
처리 중이었어요.물론 저만 그런 건 아니죠.
아마존에서 복잡성을 실제로 처리하는 것은 아마존뿐만이 아닙니다.
그 특별한 방식으로 말이죠.여러분은 모두 복잡성을 다루고 있습니다.
거기에는 이유가 있습니다. 왜냐하면 우리의 애플리케이션은
시간이 흐르면서 계속 발전하고 있습니다.그럴 필요가 있습니다.자, 우리 중 많은 사람들이, 정렬을 보면
이러한 복잡성 신호 중 한 가지 신호가 있는데, 그 중 자주 나타나는 신호가 하나 있습니다.
네, 많은 사람들이 생각하는 것처럼 잘못 이해되고 있습니다.
그 복잡성은 구성 요소의 개수라고 할 수 있습니다.
시스템에서 말이죠.그렇지 않아요.절대 그렇지 않아요.
왜냐하면, 네, 구성 요소의 수를 세는 것이 반드시 의미하는 것은 아니기 때문입니다.
시스템이 얼마나 혼란스러운지, 네, 아주 좋은 비유가 있습니다.
제가 좋아하는 콤 맥카르테이의 작품이죠.자전거 타기를 생각해 보면
네, 이런 경우에는 가장 단순한 형태의 사이클링을 생각해 보세요.
외발자전거처럼 말이죠.단순하고 매우 제한적입니다.
컴포넌트 개수.그리고 라이딩을 마스터할 수 있다면
정말 놀라워요.그 자리에서 전원을 켤 수는 있지만 타기가 정말 힘듭니다.그리고 숫자만 세어보면
구성 요소의 수는 척도가 아닙니다.
시스템의 전반적인 단순성.이제 세발자전거를 탈 수도 있습니다.
아주 쉽게 탈 수 있죠.그렇게 쉽게 넘어지지는 않겠지만 사실 우리 대부분은 배웁니다.
세발자전거로 자전거 타는 법.하지만 그걸 알려주진 않아요.
유연성이 뛰어나죠. 코너를 돌면 되니까요.
사실 하나에겐 꽤 어려운 일이죠.그래서 사이클링을 위한 이상적인 해결책은
자전거의 경우 좀 더 복잡할까요?
부품 수는 많지만 유연성이 뛰어납니다.이제는 마스터하기가 더 어려워졌습니다.
세발자전거를 타는 것보단 훨씬 쉬워요
외발자전거를 타는 것보단 말이에요.이것이 전반적인 경험입니다.
이는 복잡함을 나타냅니다.자전거는 부품이 더 많지만 가장 단순한 형태입니다.
전체론적 관점에서그리고 저를 믿으세요, 보시면
제가 자란 곳에는 자전거가 어디에나 있어요.네, 택배 배송도 해드립니다.
암스테르담에서는 자전거를 이용하는데 우편 서비스가 실제로 배달을 합니다.
집에서 자전거를 이용해 편지를 쓰세요.단순함을 생각한다면
이건 우연이 아니에요.추가하는 동안 단순하게
복잡성에는 규율이 필요합니다.설계가 팀에 적합한지 여부
원래 디자인 팀의 일원이 아니에요.
정말 좋은 징조예요.자, 한 회사가 있습니다.
저는 엄청 숨기면서도 단순함을 유지한다는 점에서 정말 감탄합니다.
복잡성은 겉으로 드러나지 않아요.이제 그 회사의 이야기를 들어보죠.Canva의 CTO를 환영해 주세요.
브렌던 험프리스.[음악과 박수] 감사합니다. 좋은 아침이에요.Canva는 설립 이후 설립되었습니다.
10년 전, 사명을 가지고
전 세계가 디자인할 수 있도록 힘을 실어주는 것이죠.우리는 제품을 만들었습니다.
이를 통해 기술 수준에 상관없이 누구나 멋진 시각적 콘텐츠를 쉽게 만들 수 있습니다.
규모에 맞게오늘날 더 많은 사람들이 Canva를 사용하고 있습니다.
190개 국가의 2억 2천만 명 이상의 사용자
프레젠테이션부터 모든 것을 만들고 협업할 수 있습니다.
비디오, 화이트보드 등에 이르기까지, 여기선 우리 모두가 엔지니어입니다.그러니까, 제발 허락해 주세요.
몇 가지 허영심 측정 기준.저희 플랫폼은 다음과 같은 사항을 처리합니다.
초당 120만 건의 요청.우리는 162페타바이트가 넘습니다.
관리 중인 미디어의 양은 점점 늘어나고 있습니다.
매일 약 230테라바이트입니다.지금까지 우리는 300억 개가 넘었습니다.
디자인이 만들어지고 사용자들이 늘어나고 있습니다.
매 초마다 450개의 새로운 디자인이 새로 생겼지만, 제가 소개해 드릴게요
맨 처음 이야기로 돌아가서
이 여정에서는 이 숫자의 대부분이
거의 0에 가까웠죠.저는 2014년에 Canva에 합류했는데
우리 수가 소수에 불과했을 때였죠.여기에서 대부분의 백엔드를 볼 수 있습니다.
그 당시의 엔지니어링 팀이었죠.그리고 이 무렵에는
저희는 싱글룸에 있어요. 월세가 싸고
그리고 의심스러운 퓨즈 박스가 있네요.그리고 겨울에는 선택할 수 있겠죠.
난방기를 사용하나요, 아니면 외부 모니터가 있나요?당연히 모니터를 선택했죠.
그리고 우리는 적응했습니다.그리고 저는 이 사진을 찍었습니다.
제가 말 그대로 코딩을 하고 있는 이 무렵에
손가락 없는 장갑을 끼고 있었어요. 너무 추웠거든요.자, 이 점에 대해 가장 먼저 떠올렸어요.
시간이 건축학적 난제였죠.어떻게 하면 무언가를 빨리 만들 수 있을까요?
그리고 그것을 시장에 내놓으면서 어떤 식으로든 만들어보세요.
이를 통해 우리는 빠르게 발전할 수 있습니다.
아키텍처를 확장할 수 있을까요?결국에는 어떤 형태로든 필요하리라는 걸 알고 있었습니다.
마이크로서비스 아키텍처.이를 통해 궁극적으로 구성 요소 수를 확장할 수 있습니다.
우리가 독립적으로 가지고 있던 것이었고, 이를 통해 확장이 가능했을 것입니다.
생산적으로 일하는 엔지니어의 수
저희 플랫폼에서 말이죠.그래서 계획을 세웠습니다.
마이크로서비스의 미래를 위해, 우리는
그리고 모노리스를 출하했습니다.하지만 이 모노리스에 녹아들었죠.
디자인은 확장의 통로였죠.완전히 무국적이었기 때문에 가능했죠.
탄성 하중을 사용하여 수평적으로 확장할 수 있었습니다.
밸런싱 및 오토 스케일링그리고 이를 중심으로 신중하게 모델링되었습니다.
우리가 파악한 주요 실체들이죠.그리고 우리는 이 모델을 구현했습니다.
분해할 수 있게 만드는 몇 가지 간단한 규칙으로
미래에는 말이죠.각 개체가 캡슐화되었습니다.
서비스 인터페이스와 당사의 서비스 인터페이스를 통해
정말 단순한 세트를 중심으로 일관성을 유지하려고 노력했습니다.
CRUD 동사들이죠.모든 비즈니스 오케스트레이션
이 서비스 추상화를 넘어서야 할 일이죠.이러한 규칙을 통해 우리는 놀릴 수 있었습니다.
이 모노리스를 제외하면 비교적 쉽게
규모가 커질 필요성이 대두되었을 때죠.당사의 서비스 인터페이스
RPC 스텁과 하나의 실행 유닛이 되었습니다.
서비스당 1개로 발전했습니다.자, 우리의 초기 아키텍처는
단일 RDS MySQL 데이터베이스를 기반으로 했습니다.
하지만 스키마를 설계할 때도 비슷한 시도를 해봤습니다.
규모를 예측하기 위해서요.우리는 엄격한 격리를 유지했습니다.
엔티티 관계에 대해.일부 작업을 수행해야 하는 경우
관련된 비즈니스 오케스트레이션
둘 이상의 엔티티, 다음을 사용하여 구성해야 합니다.
서비스에 대한 CRUD 작업매력적이긴 했지만, 도메인 간 가입은 지속적이었죠.
레이어는 엄격히 금지되었습니다.이것은 우리의 유일한 MySQL이라는 것을 의미했습니다.
인스턴스는 쉬웠어요
필요에 따라 여러 MySQL 인스턴스로 분해
확장성이 필요했습니다.그리고 각 MySQL 인스턴스는
규모를 더 추가할 수도 있고, 확장할 수도 있습니다.
읽기 전용 복제본을 통해 확장할 수 있습니다.
즉각적인 크기 조정을 통해 말이죠.그리고 마지막으로, 우리의 지수로서
많은 서비스가 폭발적으로 성장했습니다.
DynamoDB를 통해 마이그레이션했으며, 이를 통해 지속적으로 이점을 얻을 수 있습니다.
글로벌 규모.자, 이제 말씀드리고 싶은 게 있어요.
우리의 끈기를 발전시키는 이 과정은 언제나 순조로웠다는 것을.그렇지 않았습니다.기하급수적 성장에 관한 것은
인간, 심지어 엔지니어들도 이해하기 어려울 수 있다는 거죠.그리고 우리는 이 사실을 절실히 느꼈습니다.
저희 미디어 서비스에서 말이죠.Canva의 폭발적인 인기
저희 미디어 서비스 MySQL이 갑자기 이렇게 변했다는 뜻이었어요.
우리에게 정말 큰 영향을 미쳤죠.우린 극복해야 한다는 걸 알았어요.
DynamoDB로, 그리고 엔지니어링을 위한 시간을 벌기 위해서요
원활한 전환을 위해 우리는 장애물 레이어를 만들기 위해 경쟁했습니다.
우리의 끈기 때문이죠.그리고 동시에 우리는 착유를 했어요.
MySQL의 모든 마지막 순간은, 그 단계에서
테이블의 무게로 인해 신음하고 있었습니다.
행 크기는 수억 개에 달하고 수천만 행이 늘어났습니다.
매일 행이 늘어나며 새롭고 흥미진진합니다.
RDS는 정기적으로 한도를 제한합니다.그리고 Canva를 제작하면서 얻는 즐거움도 느껴지죠.
호주의 시드니는 미국의 교통량이 가장 많은 곳입니다.
시드니 시간 기준 오전 1시 직후입니다.그래서 우리는 종종 이런 한계를 발견하곤 했습니다.
한밤중의 안개 속에서
온콜 알림.이제 MySQL의 용량을 확장해 보겠습니다.
데이터베이스와 다크 아트가 많이 사용되었습니다.우리는 먼저 모든 외래 키를 제거했습니다. 외래 키가 외부 키를 차단하기 때문이죠.
다운타임이 전혀 없는 스키마 마이그레이션.그런 다음 비정규화를 시작했습니다.
스키마가 잔뜩 들어갔어요. 그 정도 크면 조인까지 하기 때문이죠.
엄청나게 비싸지죠.그리고 마침내 통합을 시작했습니다.
데이터를 텍스트 열의 JSON 블롭으로
스키마 관리를 해제할 수 있도록
애플리케이션 레이어까지전환할 준비가 되었을 무렵에는
DynamoDB로 넘어갔을 때, 우리는 제 SQL을 의심스러운 것으로 바꿔버렸습니다.
KV 스토어, 그리고 한밤중에 깨어나는 시간
전화가 꽤 지루해졌어요.하지만 도착했어요. 해냈어요.그리고 오늘은 DynamoDB를 사용합니다.
기반 미디어 서비스는 930억 개의 항목을 관리합니다.
매일 약 9천만 개의 항목이 증가하고 있습니다.그리고 우리는 정말 인상적입니다.
성능 및 안정성.진화의 기본
Canva는 규모를 확장하기 위해 신중하게 투자하고 있습니다.
아키텍처 내에서 제공하는 추상화에 대해서요.우리는 그것들을 강력하게 만들기 위해 노력하고 있습니다.
일관되고 구성 가능합니다.이제 우리는 이러한 집중과 관심을 이어갔습니다.
누구나 사용할 수 있는 강력한 API를 개발하는 데 앞장서겠습니다.
Canva에서 기능을 구축하세요.앱을 빌드할 수 있는 앱 SDK를 제공합니다.
Canva에 내장된 기능과 Canva를 임베드할 수 있는 Connect API
플랫폼 내 기능.현재 수천 명의 개발자가
120개 이상의 국가에서 Canva를 기반으로 개발하여 기여하고 있습니다.
300개 이상의 앱이 있고 그 수가 계속 늘어나고 있으며 이러한 앱이 사용되고 있는 시장입니다.
사용자가 10억 번 이상 사용했습니다.화면은 제가 가장 좋아하는 것 중 하나입니다:
크리키 3D 애니메이션 앱.Canva에서 서비스를 시작한 첫 달 동안
Crikey를 사용해 본 Canva 사용자 중 전환율이 10% 에 달했습니다.허락해 주셔서 감사합니다.
Canva의 엔지니어링 여정을 살짝 공유해 주세요.창립자인 Mel은 Canva를 도입하려고 합니다.
82억 명 모두의 손에 있습니다.
지구상의 사람들.그녀는 이렇게 말하는 걸 좋아해요.
아직 겨우 1% 밖에 안 됐어요.자, 저는 불평하고 싶지 않아요.
Mel과 함께했지만 월간 활동 횟수가 2억 2천만 명이라는 것을 계산해보면 우리가 실제로
거의 2.72% 에 가까워요.다음엔 뭐가 나올지 정말 기대되네요
10년은 그 이후가 될 거예요. 여러분이 그렇게 되길 진심으로 바랍니다.
우리와 함께 그 여정에 동참해 주세요.감사합니다.[음악과 박수] 고마워요, 브렌던.정말 놀라운 이야기 아닌가요?알다시피, 그런데 보시면
무대 뒤에서 볼 수 있는 진화는 뭔가
우리 중 많은 사람들이 겪는 일이죠.그들은 비교적 놀라운 것을 가지고 있습니다.
간단한 앱, 간단한 응용 프로그램이지만 뒤에서 점점 더 발전하고 있습니다.
시간이 지날수록 고객에게 서비스를 제공하는 것이 점점 더 복잡해지고 있습니다.
추가 기능 포함.제 생각엔 그게 뭔가가 있는 것 같아요.
우리 모두 통과하죠.진화는 기본입니다.다윈도 이미 그 방법이 유일한 방법이라는 것을 알고 있었습니다.
복잡한 유기체는 여러 번 연속해서 성공했습니다.
약간의 수정.그리고 헤라클레이토스는 훨씬 전에
기원전 500년 전, 이미 이 유명한 곳이었죠.
변화는 계속된다는 진술.이제 멈출 수 있다는 생각은
우리 세상, 그리고 다시는 아무것도 바뀌지 않아요
그냥 환상일 뿐이야.현실 세계는 항상 변합니다.그리고 디지털 시스템
그 대상도 마찬가지입니다.헤라클레이토스에도 이런 유명한 사람이 있었습니다.
인용문을 인용하자면
세계는 끊임없이 변화하고 있습니다.절대 밟지 않잖아요
같은 강에서 두 번그리고 변화는 끊임없이 일어납니다.
우리의 환경, 우리의 요구 사항에서
그리고 우리의 구현.사실 이건 전혀 새로운 것이 아닙니다.
토론이라든가 뭐 그런 거요.자, 이미 60년대에 리먼은 계획을 세웠습니다.
법과 관련된 일련의 법들이
소프트웨어 진화에 관한 것이죠.이제 할 일이 없습니다.
분산형 시스템이나 현재 우리가 만드는 방식을 통해서요.왜냐하면 그는 생각하고 있었으니까요.
메인프레임에 대해서요.하지만 이것이 바로 소프트웨어 법칙입니다.소프트웨어는 무의미해집니다.
발전시키지 않으면 말이죠.새로운 기능이 없다면 고객들은 우리 시스템을 알아차릴 것입니다.
품질이 떨어진다고 생각해서 지금은
우리는 디지털 시스템에서 끊임없이 직면하고 있습니다.
우리는 진화해야 한다는 사실과 함께요.그래서 우리가 그걸 할 수 있게 도와드리자면
저는 여섯 가지 교훈을 종합해 봤는데, 제 생각엔
아마존에서 배운 기본적인 교훈이죠.그리고 그들이 여러분에게 도움이 되기를 바랍니다.
관리 방법에 대해서도 생각해 볼 수 있습니다.
복잡성이 통제 불능 상태가 되는 것을 방지하기 위한 환경.하지만 단순함을 기억하세요.
규율이 필요합니다.제작을 시작한 첫날부터
디자인에 대해 생각하기 시작해야 합니다.
첫날에는 간단할 수도 있지만 언젠가는
시간이 지날수록 더 복잡해집니다.첫 번째 교훈은
사실 늘 그렇듯이 제 생각에는 이게 가장 중요한 것 같아요, 그렇죠?진화성을 필수 요건으로 삼으세요.시스템이 무엇인지 알아야 합니다.
시간이 지남에 따라 규모가 커질 것이므로 아키텍처 선택을 다시 검토해야 할 수도 있습니다.
여러분이 만든 것이죠.제 생각엔 우리가 정말 한 가지 일을 했다면
첫날 Amazon S3를 정말 잘 사용하면서 알게 되었습니다.
일 년에 같은 아키텍처를 실행하지 못했다는 사실
거기서부터인가, 아니면 2년 뒤부터요.제 생각에는 초창기에 종종
변할 때마다 그렇게 생각했었죠.
규모가 몇 배나 되니 다시 방문해야 할 것 같습니다.
여러분의 아키텍처.다음과 같은 아키텍처 구축
제어 가능한 방식으로 발전할 수 있다는 것은 매우 중요합니다.
복잡함에서 살아남고 싶다면 말이죠.그리고 저는 진화성을 다음과 같이 정의합니다.
미래의 변화를 쉽게 수용할 수 있는 소프트웨어 시스템의 능력.자, 이건 달라졌어요.
유지보수성과는 다릅니다.발전성은 장기적입니다.
굵은 입자가 굵고 급진적이고 기능적이며
또는 구조적 개선 (유지 보수성이 있는 경우)
세분화된 단기적 지역적 변화입니다.대개 수정 조치를 취하기도 합니다.
적응형이거나 예방형일 수도 있고, 그냥 만들고 싶을 수도 있습니다.
시스템이 더 완벽해요.하지만 이것들은 유지보수성이죠.
진화성은 아니죠.진화성은 장기적입니다.
대처 방법에 대한 전략 수립
시간이 지날수록 복잡해집니다.우리가 건물을 지을 때 그랬던 것 같아요.
진화 가능한 시스템에는 여러 종류가 있습니다.
우리가 배운 하드코어 교훈자, 이제 빌드할 수 있는지 확인하세요.
주요 컴포넌트.즉, 모델링을 해야 한다는 뜻이죠.
비즈니스 콘셉트. 내부 세부 정보 숨기기
그 위에 세밀한 인터페이스가 있습니다.그런 다음 스마트 엔드포인트를 구축하고, 탈중앙화를 사용하고,
독립적으로 배포하여 이러한 부분을 허용할 수 있습니다.
별도로 진화하기 위해서죠.높은 진화성, 높은 관찰성
다양한 패러다임의 지원을 통해 통찰력을 얻고
그리고 실제로 구현하는 방법도 유연합니다.
우리 시스템의 다양한 부분들이죠.저는 종종 Amazon S3에 대해 얘기하는 것을 좋아하는데, 심지어 여기에서도
비디오 업프론트에서는 S3가 중요한 역할을 했습니다.그렇게 생각하기 때문이죠.
간단한 서비스가 얼마나 좋은지 보여주는 놀라운 예죠.
시간이 지날수록 점점 더 복잡해지고 있습니다.
하지만 고객이 쉽게 사용할 수 있도록 하세요.S3를 보면 정말 놀랍지 않나요?이게, 지금은 뭐죠?
18년 전, 알다시피
클라우드 스토리지의 진화.단순한 API일 뿐이죠.
원래는 내구성, 가용성, 비용 효율성에 초점을 맞췄지만 원래의 원칙은
이러한 모든 새로운 혁신의 토대를 마련했습니다.
그 이후에 일어난 일이었죠.그건 어찌됐든 추진된 거예요.
고객에 의해, 또한 요구 사항에 따라
대대적인 재작성그 높은 가용성
내구성은 그대로 유지했습니다.
시스템이 진화하는 동안이었죠.한 가지 좋은 비유가 있습니다.
예전에 어떤 분이 말씀하셨어요.아시다시피, S3의 진화는 마치 우리가 시작한 것처럼요.
단 하나의 엔진으로 Cessna는 737로 옮겼고 결국 결국 끝났습니다.
380대의 전체 차량으로 고객의 이동을 이끌었습니다.
고객이 눈치채고 공중에서 연료를 보급하지 않았는데, 그게 바로 그런 기분이었어요.
S3를 만들면서 말이죠.매년 볼 수 있잖아요.
아무런 영향 없이 새로운 기능을 추가했습니다.
우리가 제공하던 기능에 대해
고객을 위해서요.이러한 강력한 일관성은 우리가 더 이상 존재하지 않았다는 것을 의미합니다.
핵심 특성에 대한 타협모듈성 덕분에 실험을 할 수 있었습니다.
Rust와 같은 언어로 말이죠.자, 처음부터
복잡성에 대한 매우 명확한 전략, 마이크로서비스 아키텍처죠.마이크로서비스의 진화를 살펴보면
그 아래에는 정말 장관을 이룹니다.처음에는 여섯 명부터 시작했어요.
마이크로서비스는 첫날부터 시작됐습니다.지금은 300개가 훨씬 넘습니다.
시간이 흐르면서 점점 더 커졌죠.그리고 우리 모두는 S3가 복잡하다는 사실을 모른 채 S3를 사용합니다.
엄청난 성장세를 보였습니다.그나저나, 그뿐만이 아니라
소프트웨어는 진화하기 쉽습니다. 왜냐하면
완벽하게 제어할 수 있죠.그 중 하나는
사실 우리가 정말 바꿔야 했던 것은
하드웨어 인프라.네트워크 디바이스를 생각해 보면
일반적으로 모든 기능은
ASIC에 내장되어 있습니다. 변경해야 할 때마다 완전히 변경해야 하는 경우가 많습니다.
네트워킹 디바이스를 교체하세요.확실히, 2006년이었죠.
일종의 상식이죠.하지만 고객들은 구성을 바꾸고 있었습니다.
네트워크가 항상 그랬고, 사실 저희 네트워크 박스는
그런 용도로 만들어지지도 않았죠.그래서 우리가 찾아야 했던 건
우리가 발전할 수 있는 토대를 만들기 위해서였죠. 알고 있었기 때문이죠.
2006년에 제공하던 네트워킹 기능은 무엇이든 상관 없습니다.
2010년에도, 그리고 2020년에도 완전히 달라졌습니다.그래서 우리는 만들었습니다.
혁신의 토대입니다.우리는 그것을 블랙풋이라고 불렀습니다.이건 기본적으로 장치였어요.
원래는 리눅스 커널이었던 라인 카트들이 잔뜩 들어 있었습니다.
사이트에서 말이죠.하지만 덕분에 우리는 진화할 수 있었습니다.
시간이 흐르면서 쌓인 네트워킹.아마도 가장 빠른 기기가 우리에게 줄 수 있을지도 모릅니다.
초당 10기가비트의 회선 속도죠.이제 우리는 수백 개에 달합니다.
그리고 여러분은 초당 수백 기가비트에 달하죠.
이러한 장치를 발전시키고 보안을 발전시키면서
시간이 흐르면서 우리 네트워크도 마찬가지죠.그러니 토대를 마련하세요.
진화를 위해서요.호스트의 경우도 마찬가지입니다.어느 순간 우리는 깨달았습니다.
우리가 호스트를 구축하던 방식이 실제로는 그렇지 않다는 것을
진화를 위한 좋은 플랫폼이죠.숫자 구분하기
다양한 기능을 카트가 달린 별도의 상자에 담았습니다.
니트로와 마찬가지로 우리가 할 수 있는 것은 매우 중요했습니다.
호스트 시스템을 발전시키기 위해서요.아시다시피, 그 초창기 시절에는
프로세스가 너무 빨라져서 가상화나 가상화가 가능해졌습니다.
시스템이 방해가 되고 있었습니다.그래서, 네트워킹을 박스에서 꺼내서
예를 들어, 계속할 수 있게 해주었죠.
액세스 권한을 얻으면서 가상화를 하려면
회선 속도를 최대로 높일 수 있습니다.그리고 실제로 할 수도 있겠죠
회선 속도로 암호화를 하면 구축할 수 있습니다.
EBS에 액세스하기 위한 PCIe 인터페이스.다시 한 번 말씀드리지만, 진화가 가능합니다.
이는 의식적인 결정입니다.환경을 만들어야 합니다.
진화할 수 있는 곳이죠.직접 만들어야 합니다.
진화성은 필수 조건입니다. 왜냐하면 진화는 전제 조건이기 때문입니다.
복잡성 관리를 위해서요.자, 생각해 보면
시간이 지남에 따라 복잡성이 어떻게 증가하는지, 다시 한 번 말씀드리지만, 이 비유가 마음에 듭니다.
하나는 Colm이 만든 건데요, 개구리를 넣으면
끓는 물이 담긴 냄비에 넣으면 뭔가 잘못됐다는 걸 알게 될 거예요
그리고 바로 뛰어내리세요.하지만 개구리를 넣으면
찬물에 넣고 천천히 데우면
여전히 편안합니다.작은 경고 표지판이 보이는데요,
하지만 무시당하고 있어요.그냥 잘 적응할 수 있을 뿐이야
보온성 증대.개구리가 깨달을 즈음엔
위험이 도사리고 있다는 거, 도망치기엔 너무 늦었어그건 그렇고, 개구리는 없었어요.
이 비유를 들자면 해를 입었죠, 그렇죠?여기서 얻을 수 있는 교훈은 하지 말라는 것입니다.
경고 신호는 무시하세요.작은 변화는 감당할 수 있을 것 같지만
처음에는 쉽게 흡수할 수 있습니다.하지만 경고 신호를 무시하면 시스템이 점점 더 복잡해지고 복잡해집니다.
관리 및 이해가 더 어렵습니다.그렇게 할 수 있으려면
그걸 정말 잘 관리해야 돼요
복잡성을 여러 조각으로 나눕니다.좋은 예가 있습니다.
아마존 클라우드워치.지금은 모두 CloudWatch를 사용하고 있지만, 오늘날에는 이 서비스가 대용량입니다.정말, 수백, 수백
하루에 수조 건의 지표 관측이 이루어지죠.아시다시피 거의 반 엑사바이트에 달합니다.
매일 수집되는 로그의 양입니다.이건 아주 중요해요.
AWS의 기본 서비스.하지만 그렇게 시작하진 않았어요.아시다시피 초창기에는 CloudWatch가 매우 간단한 서비스였습니다.이런 모습이었어요.
방금 출시했을 때는, 네, 그냥 보관을 위한 서비스였어요.
그리고 메트릭 데이터를 수신하면, 백엔드 서비스 몇 개만 있으면
이해한 소규모 엔지니어 팀
시스템의 모든 부분.하지만 시간이 흐르면서
시스템이 성장하기 시작하고 콘텐츠도
사실 모두가 구현하고 있던 곳이었죠.
새로운 기능이죠.그리고 시간이 흐르면서 이 기능이 커졌죠.그리고 우리는 점점 더 복잡해졌습니다.
그리고 복잡하고 실제로는 일종의 안티패턴이 생겼습니다.
제가 메가 서비스라고 부르는 것이죠.메가 서비스는 안티패턴입니다.
그 점에서는 해체를 시작하는 데 필요한 복잡성이 뒤따릅니다.이제 프런트엔드는 처리만 합니다.
핵심 기능, 그리고 전체 시스템의 복잡성
개별 부품으로 이동합니다.우리가 사용하는 원칙은
몇 번이고 반복해서 시스템을 세분화해야 합니다.컴포넌트를 빌드해야 합니다.
응집력은 높지만 다른 부품과 느슨하게 결합되어 있는 부품
API가 잘 정의되어 있습니다.클라우드워치는 이렇게 생겼습니다.
요즘은 아주 간단한 프론트엔드 서비스입니다.사실, 아마도 유일한 코드일 것입니다.
초창기부터 남은 것은 처리에 관한 것입니다.
원래 요청들.하지만 나머지는 다 끝났어요
시간이 지남에 따라 다시 작성되고 다시 작성되었습니다.그리고 새로운 기능이 처리됩니다.
항상 그렇죠.그리고 여러 가지 이유가 있습니다.
새로운 기능을 추가하는 것뿐만 아니라 시스템을 바꿔야 하는 이유는
하지만 예를 들어, 우리가 겪고 있는 복잡성 문제 중 하나는
엔지니어링은 여기요.당사의 대용량 제품 중 상당수
CloudWatch의 데이터 스토어는 C로 작성되었습니다.
프로그래밍 언어.실제로 운영할 수 있는 C 프로그래머를 고용하는 것은 매우 어렵습니다.
이 특정 수준에서요.그래서 우리는 실제로 그때부터 시작하고 있습니다.
생각해 보면, 아시다시피, 어떻게 할 수 있을까요?
모든 것을 세분화시켰죠. 이 작은 구성 요소들이죠.
그건 개인적이에요.그건 별로 중요하지 않아요.
어떤 프로그래밍 언어를 선택하시는지요.그래서, 이 특별한 경우에는
우리는 구현을 시작하기 위해 Rust를 사용하기 시작했습니다.
이 대용량 인터페이스들.다시 말씀드리지만, 이런 것들 중 하나입니다.
시스템을 분해하면 할 수 있는 일이죠.
더 작은 빌딩 블록으로 말이죠.시간이 지나면서 진화할 수 있습니다. 존중하는 측면에서만이 아닙니다.
기능성뿐만 아니라, 예를 들어
라이브러리 및 프로그래밍 언어와 관련하여
사용하는 것.자, 질문 하나 할게요
제가 항상 받는 것은, 생각해보면
조각으로 나누면 얼마나 커야 할까요
그런 서비스가 있을까요?일반적으로, 알다시피, 그런 건 없잖아요.
선택의 폭이 넓습니다.사물은 외부에서 오는 경우가 많습니다.
그게 결정하죠, 그렇죠?우리 팀은 몇 개야?얼마나 많은 성공을 거두었는지 아시죠?
CloudWatch에는 고객의 요구가 있습니까?
우리는 많은 마이크로서비스를 보유하고 있으며 각 마이크로서비스의 크기는
사실 경로에 따라 달라지죠. 유기적입니다.그래서 딱히 좋은 조언이 없네요
말씀드리자면, 이게 얼마나 커야 하는지입니다.이제 두 가지 옵션이 있습니다.
여기서 새 기능을 사용할 수 있습니다.기존 기능을 확장할 수도 있습니다.
또는 새 마이크로서비스를 만들 수도 있습니다.확장이 더 빠른 경우가 많습니다.코드를 재사용하므로 위험을 감수할 수 있지만... 이 모든 위험을 감수해야 합니다.
이런 메가 서비스 안티패턴.새로운 것을 만들면 서비스를 쉽게 관리할 수 있습니다.
하지만 선행에는 더 많은 노력이 필요합니다.따라서 경고 신호는
마이크로서비스가 너무 커집니다
엔지니어의 멘탈 모델에 대해서요.머릿속에 간직할 수 없다면
일반적으로 서비스 규모가 너무 커지고 있습니다.자, 어려움을 겪는 사람이 있어요
앤디 워필드는 매일 이런 어려움을 겪고 있습니다.그러니 제발 저와 함께 하세요.
앤디를 환영하며 이야기를 나눠줄 앤디를 환영합니다.
Amazon S3가 이러한 복잡성을 처리하기 위해 스스로를 조직하는 방법앤디?[음악 재생] 안녕하세요, 여러분.저는 앤디예요.저는 S3 팀의 엔지니어입니다.
오늘 잠깐 이야기를 나눠볼게요
조직과 복잡성, 그리고 우리가 어떻게 구조화하는지에 대해
우리 팀과 조직은 복잡성을 다루어야 합니다.Werner가 말했듯이 이제 S3는
출시된 지 18년이 지났는데 정말 놀랍습니다.이건 정말 멋진 일이에요.
제 커리어에서 계속 노력해봤는데, 싱글이라는 건
분산형 시스템과 단일 팀이 실제로
18년 동안 지속적으로 운영되고 있습니다.그래서 만들고 싶은게
제가 생각하는 몇 가지 사항에 대해 몇 가지 관찰을 해보죠.
조직의 운영 방식에 대해 흥미롭고 성공적이었죠.하지만 우선 면책 조항부터 말씀드리자면, 팀이 정말 싫을 것 같아서
오늘 이 자리에 올라와서 우리가 그랬다고 말한 것 같은 기분이 들기 때문이죠.
이걸 알아냈고, 우리가 문제를 해결했다는 걸
조직의 복잡성 때문이죠.사실 아직 안 해본 것 같은데 아직 배워야 할 게 많은 것 같아요
그리고 우리는 매일 배우고 있어요.시스템은 계속 진화하고 있습니다.
팀은 계속 커지고 있습니다.하지만 우리가 최선을 다했을 때, 저는 우리가 최선을 다할 수 있다고 생각합니다.
몇 가지가 맞아요. 공유할 가치가 있다고 생각해요.그러니까, 말씀드리기 전에
제가 생각하는 두 가지 사항에 대해 말씀드리자면
질문 하나 할게 있어요.이게 뭔지 아는 사람 있어요?이거 본 사람 있어요?앞쪽에 바퀴가 없어요.이건 트랙터 폴에서 나온 썰매입니다.제가 어렸을 때
저는 캐나다 오타와에서 자랐어요.우리에겐 가족이 살고 있었습니다.
시내에서 한 시간 정도 떨어져 있어요.그리고 여름이 끝날 무렵
매년 우리는 차를 몰고 나가서 다른 나라로 가곤 했어요.
퀘벡주 팔웰에서 열리는 박람회그리고 박람회에서는, 아시다시피
이 모든 것들이 컨트리 페어에 관한 멋진 점들인데
가장 큰 채소 경연대회와 미드웨이, 그리고 물론
트랙터 견인차.그리고 트랙터도
참여한 농부들이 트랙터를 꺼내는 걸 끌어내고
이 썰매에 이걸 달아주면 트랙이 생길 거예요.특히 최고였어요.
비가 오면 진흙투성이였으니까요.그리고 그 조합을 통해
트랙터의 힘과 운전자의 기술이 합쳐져 썰매를 멀리 당길 수 있었습니다.
선로를 따라 내려갈 수 있는 한 말이죠.하지만 썰매가 당겨질 때
위에 있는 양동이에 무게가 가득 차면
썰매는 더 무겁고 무겁습니다.자, 이건 좀 이상한 도표인데요,
하지만 기본적으로 제 생각은 이렇습니다.
소프트웨어 개발.이건 정말 대단한 일이에요.
트랙터 견인과 개발 사이의 공통점
대규모 분산 시스템.공통점은, 뽑아보면
점점 무거워집니다.첫날,
저 빈 버퍼를 쳐다보면, 지금이 가장 멋진 시간이에요.
개방성과 가능성, 그리고 부담감이 없다는 점에서요.하지만 당길수록 무거워집니다.
그리고 점점 더 무거워지죠.복잡성이 쌓이고
순전한 힘으로 일정한 거리를 갈 수 있죠.
그리고 의지의 힘.하지만 궁극적으로는
썰매의 무게를 인정하세요.그래서 일종의 것 같아요.
일반적인 관찰로 말씀드리자면, 우리는 인정할 필요가 있습니다.
우리 조직은 적어도 그만큼 복잡하다는 것을
우리가 만든 소프트웨어로서 우리는 그 소프트웨어를 제공해야 합니다.
같은 관심을 기울이세요.첫 번째 관찰은
제가 만들고 싶은 건 S3 팀인 것 같아요.
꽤 잘하는 편인데, 성공하는 팀은 보통
적어도 항상 조금은 겁에 질려있긴 하죠.
그들이 틀리고 있다는 거요그들은 항상 물건을 찾고 있어요.
그건 옳지 않아요. 그리고 상황이 맞을 때
정말 잘 지내고 있어요. 그때가 바로 여러분이 가장 잘할 수 있을 때죠.
뭔가를 놓쳤다는 게 무서워요그래서 조금 겁이 난다는 건
그리고 질문을 던지고 개선하려고 노력하죠.
제 생각에 S3 팀이 잘하는 일이죠.한 가지 예를 들어볼게요.약 6년 전,
우리는 무럭무럭 성장하던 이 시기를 보내고 있었습니다.우리는 많은 것을 가져왔습니다.
팀에 새로운 엔지니어들이 많이 들어왔어요.그리고 S3는 절대 놓칠 수 없어요
내구성에 관해서요.내구성이 매우 중요합니다.
엔지니어링 팀과 우리가 사물에 접근하는 방식에 대해서요.하지만 우리가 걱정했던 것은
이러한 집중력과 이런 투자를 유지하기 위해서요.
내구성 면에서도 새로운 인재를 많이 영입했습니다.
훌륭한 엔지니어들이었는데 일을 해본 적은 없는 사람들이었죠.
전에는 이런 환경이었죠.그래서 다른 PE 중 한 명과 저는
세스 마클은 앉아서 많은 이야기를 나눴습니다.
이걸 어떻게 할 건데.그래서 프로그램을 만들기로 결심했죠.
보안 엔지니어링에서 아이디어를 빌렸는데
위협 모델이라는 개념, 직접 적어두면
보안 위협, 그리고 다음을 평가합니다.
모델이 방어 체계와 일치합니다.우리가 아이디어를 생각해 냈어요
내구성 위협 모델을 만들고 팀이 언제 어디로 갈지 구조를 만들었죠.
S3를 변경하기 위해 내구성 위험을 기록했습니다.
예상할 수 있었으며 이를 보완하기 위해 무엇을 하고 있었는지
그들을 위해, 그들에게 맞서기 위해서요.그러면 좀 더 작은 걸 가져갈 수 있겠네요
팀에 있었던 엔지니어의 수가 많았습니다.
오랫동안 엄청난 운영이 가능했었죠.
내구성에 대한 엔지니어링 경험, 그리고 우리는 그들이 행동하도록 이끌었습니다.
내구성 리뷰어로서 말이죠.그리고 우리는 앉아서 할 거예요.
내구성 위협 모델에 관한 이 멋진 대화들은
구멍을 뚫고 물건을 찾을 수 있는 곳이었죠.
실력이 향상될 수도 있지만, 다음과 같이 가르칠 수도 있습니다.
그 일의 결과죠.한 가지 예시죠.알다시피, 수백 개가 있잖아요.
아마도 우리가 만든 메커니즘의 예시일 것입니다.
팀의 규모를 늘리기 위해서죠. 하지만 결론은
우리는 의식적으로 질문을 하도록 독려하고 있습니다. 맞아요.
현상 유지에 도전하고 명언을 빌려보자면
그레이스 하퍼의 말인데요, 맞아요, 이런 것들이 보이기 시작하면
사람들은 이렇게 말하죠. 우린 항상 그래왔으니까요.
이런 식으로 해봤어요. 한 가지 예죠.
경고 신호는 아마도 그래야 할 것 같은데요
더 많은 질문을 던져보세요. 그러면 질문을 해야 할 수도 있겠죠.
조금 더 무서워졌죠.자, 그거 하나.두 번째 관찰은
제가 말씀드리고 싶은 것은 소유권이라는 개념입니다.제 생각에 소유권은 절대적인 의미라고 생각해요.
S3는 흥미롭지만 AWS 엔지니어링은 최고죠, 그렇죠.
아마존이 구축하는 방식이죠.그리고 소유권은 정말 어렵습니다.
설명해 드리자면그래서 한번 해볼게요
간단한 연습을 통해 말씀드리죠.잠깐 시간을 생각해 보셨으면 좋겠어요.
경력에서, 일했던 삶에서
당신이 정말 하는 일에 대해
정말 좋아했고, 신경 써주었죠.그리고 그 경우에는
그 일을 하는 것에 대해 생각해 보셨으면 좋겠어요.
얼마나 열심히 일했는지, 품질에 얼마나 투자했는지, 그리고 실제로 얼마나 많이 투자했나요?
이 제품을 제공하게 되어 정말 기뻤습니다.자, 이제 뒤집어 보셨으면 좋겠어요.
그리고 무언가를 작업하던 때를 생각해 보세요.
하라고 했으니까요.뭔가 작업 중이었잖아
이해했다고 반드시 느끼지는 못했다고 생각했던 것
의 이점이나 그에 따른 결과, 하지만 해야 할 일이었죠.
하라는 지시를 받았기 때문이죠.그리고 생각해 보셨으면 좋겠어요.
그 작업에 얼마나 많은 노력을 기울였는지, 얼마나 열성적으로 작업했나요?
착륙 예정이었는데 품질은 어땠나요?
그거 하나면 잘 됐어이 둘의 차이는
제가 보기에 이 두 가지는 일종의 소유권입니다.자신이 작업하고 있는 것을 소유하는 팀입니다.
on은 첫 번째 범주에 속합니다.그리고 제가 가장 많이 봤을 때
저와 함께 일하는 유능한 리더들은 정말 대단해요.
주인의식을 높이는 데 있어서요.그리고 저는 그들이 두 가지 일을 하는 것을 봅니다.첫 번째는 건물을 짓는 것입니다.
팀 내에서의 주체성
함께 일하는 사람들 말이에요.에이전시는 팀이 느낄 수 있게 하는 것을 의미합니다.
팀이 실제로 제공할 수 있는 폭넓은 역량과 지원을 갖추고 있다는 것이죠.자, 첫 번째 단계는
에이전시 구축에서 팀에게 알리지 않는 것이 관건입니다.
뭘, 어떻게 해야 하죠?팀에 문제를 일으키기 위해서죠.
중요성을 설명하고, 팀을 참여시키기 위해
그리고 궁극적으로 그들을 신뢰하고 그들에게 소유권을 주기 위해서죠.
그들이 만들고 있는 것에 대해서요.그리고 그걸 주면서 우리는 사실
아이디어를 직접 소유하게 하고 승리를 축하하게 하는 거죠.
그건 그들의 것이니까요.그래서, 그게 첫 번째예요.
저는 리더들이 아주, 아주 효과적인 일을 하는 것을 본 적이 있습니다.에이전시가 있는 팀이 있다면
두 번째로, 정말 유능한 리더란
제가 함께 일해본 적이 있는데, 특히 S3에서는
이런 것들이 긴급성을 유발하나요?왜냐하면 최고의 팀이라도
속도를 늦출 방법을 찾을 거야그들은 놀라움을 발견할 거예요.그들은 다음과 같은 것들을 찾게 될 것입니다.
배송이 걱정돼요.그리고 넌 항상, 항상
선적할 때 결정을 내리고 타협을 해야 합니다.따라서 리더로서 빠르게 움직여야 합니다.
소유권을 확립하고, 한 걸음 물러서서, 팀을 운영하는 것을 의미합니다.
하지만 가스 상태를 계속 주시하고, 점검하고 있는지 확인해보세요.
참여하여 문제 해결을 돕고 팀의 기분을 느끼도록 돕습니다.
해결해야 할 필요성은 있지만, 이를 실현할 수 있도록 지원한다는 것이죠.그러니까, 실제로 소유권은 이것입니다.
선택의지와 긴급성의 결합이죠.그게 전부입니다.제가 논의한 두 가지 사항은 여러분이 그래야 한다는 것이었습니다.
조금 겁이 나서 소유권을 넘겨야 한다는 생각이 드네요.
레벨까지 내려가세요
피자 두 팀으로 구성되어 있고 그 팀들은
그들이 제공하는 음식을 정말 잘 알고 있어요.그들이 자신의 일을 사랑하면서도 원동력이 되도록 하는 데 집중하세요.
지원을 통해 성과를 내기 위해서죠.정말 고마워요.[음악과 박수] 고마워요, 앤디.AWS가 어떻게 진화했는지에 대한 놀라운 이야기들, 뿐만 아니라
아키텍처적인 관점뿐만 아니라,
조직적 관점 말이죠.이런 이야기들이 많이 있습니다.
그리고 앤디는 우리의 저명한 인물 중 한 명입니다.
엔지니어들도 정말 집중했어요.시간이 지나면서 이런 것들이 많이 생겼으면 좋겠어요.
훌륭한 스토리를 가진 저명한 엔지니어들
여러분께 말씀드리고자 합니다.우리가 할 수 있으면 좋겠어요
시간이 지나면 여러분 앞으로 데려오세요.네 번째 교훈은 이제 막 모든 것을 세분화했다는 것입니다.
더 작은 구성 요소로 나누고 우리가 원하는 방식으로 조직을 조정했습니다.
우리의 아키텍처는 비슷해 보이지만 요점을 찾게 되죠.
우리가 실제로 필요로 할 뿐만 아니라
일종의 빌드를 하기 위해서죠.실행도 해봐야겠네요.그걸 어떻게 확인할 수 있을까요?
운영상의 복잡성 또한 여전히 처리되고 있나요?아마존에서는 조직화를 통해 이 작업을 수행합니다.
이러한 응용을 우리가 세포라고 부르는 것으로
셀 기반 아키텍처.애플리케이션을 구축했습니다.프런트엔드가 있고 컨테이너가 있을 수도 있습니다.
중간에는 데이터 저장소가 있습니다.
백엔드에서 시작한 다음
더 성공하기 위해서요모든 것이 성장하기 시작하죠.그리고 어떤 형태의 방해도
이러한 운영은 모든 고객에게 영향을 미칠 것입니다.성능에 영향을 미칠 것입니다. 네,
고객이 불만을 느끼거나, 어딘가에 장애가 생겼을 때
전체 서비스, 모든 고객이 서비스를 중단시킬 수 있습니다.
영향을 받을 것입니다.그래서 이걸 관리하는 게 사실
이 아키텍처에서는 매우 복잡합니다.다시 말씀드리지만, 물건을 부수고 분해해야 합니다.
각각 작동하는 더 작은 구성 요소로
독립적으로 말이죠.여기서 목표는 실제로 줄이는 것입니다.
영향의 범위는 매우 중요합니다.
복잡한 시스템에서 말이죠.시스템을 정의하는 셀 기반 아키텍처
분리된 독립 셀에서 다음을 선택합니다.
고객을 매핑하는 결정론적 알고리즘 (주로 해시 함수)
특정 셀로 이동하면 해당 셀이 순서를 생성합니다.
복잡한 시스템에서 말이죠.문제를 분리합니다.
영향을 주지 않고 특정 장치에
다른 유닛들.그래서 구현할 수 있으려면
물론 이건 좀 필요하겠죠.
일종의 단순한 라우터죠.그리고 이 라우터는 아주 간단합니다.
필요한 것은 요청을 전달하는 것뿐이기 때문입니다.
알맞은 셀로 보내죠.그나저나, 아주 멋진 알고리즘이네요
셀에 고객을 할당하는 것을 셔플 샤딩이라고 합니다.그리고 좋은 기사가 하나 있습니다.
관심이 있으시다면 빌더 라이브러리에서 확인하실 수 있습니다.최대한의 효과를 낼 수 있는 독특한 방법이죠.
전체 셀의 가용성.이제 세포의 모양에 따라 달라집니다.
무엇을 가지고 시작했는지에 따라 조금씩 달라지죠.자, 지역 서비스를 이용할 수 있다면 휴대폰을 이용하세요
지역도 유지하세요.그냥 작은 빌딩 블록일 뿐이죠.지역별 서비스를 받으셨다면
결국 이런 세포들이 더 많아지지만 그래도 분해가 되긴 하죠.
더 작은 블록으로 나누면 복잡해집니다.
관리가 쉬워집니다.자, 몇 가지를 보시면
다른 AWS 서비스들은 셀을 어떻게 사용했을까요?ID의 종류는 무엇입니까?
라우팅하고 있는 거요?CloudFront는 이 작업을 수행합니다.
배포 ID에서.Route 53은 호스팅 영역 ID에서 이 작업을 수행하고 하이퍼플레인은
일종의 EC2의 백엔드와 로드 밸런서 같은 것들이죠.
예를 들어, 고객 ID로 하세요. 그런데
가지고 있다면 아주 좋은 기본값이죠.또한 약간의 개발이 필요합니다.
그 옆에 컨트롤 플레인이 있는데, 일종의 관리가 가능하죠.
서로 다른 세포들이죠.그리고 신규 고객이 들어오면
새 셀을 만들거나 분리할 수 있습니다.
기존 셀 위에이 모든 게 다 뭔가예요
당신이 통제할 수 있어요.자, 서비스와 마찬가지로
서비스의 규모가 얼마나 커야 하는가에 대한 질문은 이것입니다.
세포는 얼마나 커야 할까요?음, 세포는 이렇게 커야 돼요
아시다시피 가장 큰 작업량을 처리할 수 있다는 것이죠.
상상할 수 있는 일이지만
실제로 테스트할 수 있을 만큼 충분히 작아야 합니다.
풀 스케일 워크로드 포함그리고 아마도, 아시다시피, 맞을 것입니다.
답은 중간 어딘가에 있습니다. 대부분 혜택을 받고 싶기 때문이죠.
규모의 경제 덕분입니다.서비스 규모가 클수록
가능성이 높을수록 고객 수가 더 많을 수 있습니다.
문제의 영향을 받습니다.그리고 크기를 작게 만들수록 영향도 줄어듭니다.
규모의 경제가 가능하죠.그래서, 늘 그렇듯이
균형을 잡는 행동이죠.하지만 한 가지, 우리가 더하든 말든
물론, 생각해보면 복잡성이 더 커지죠.
셀 기반 아키텍처죠. 이제 이걸 관리해야 하기 때문이죠.이것은 여러분이 해야 할 일입니다.
미리 말씀드리지만 기억하셔야 합니다.
시스템을 구축하는 데 걸리는 시간은 시간에 비해 매우 적은 경우가 많다는 것을
여러분이 시스템을 운영할 거라는 것을요.그러니까, 투자는
필요한 것처럼 초기 관리도 매우 중요합니다.
보안에 선투자하려면 투자가 필요합니다.
선불 비용 관리 가능.세포로 분해되는 건 뭔가요?
이는 시간이 지나도 신뢰성을 유지하는 데 도움이 될 것입니다.
그리고 고객을 위한 보안.에 훌륭한 기사가 있습니다.
실제로 모든 내용을 다루는 잘 설계된 프레임워크 리뷰
빌드하려는 경우, 다양한 종류의 내부 및 외부 기능을 제공합니다.
셀 기반 아키텍처죠.관심이 있으시다면
꼭 읽어 보시기 바랍니다.그래서 우리는 세포로 조직했죠.
시스템이 복잡하기 때문에 그 영향을 줄여야 합니다.
발생한 모든 문제에 대해우리가 배운 또 다른 교훈은 문제를 제거해야 한다는 것입니다.
시스템의 불확실성, 그 이유는 불확실성
다루기가 매우 어렵습니다.따라서 디자인을 해야 합니다.
복잡성 감소를 염두에 두고 시스템을 미리 준비하세요.임무를 맡았다고 상상해 보세요.
하이퍼플레인 같은 것을 위한 구성 시스템을 설계할 때, 네,
모든 로드 밸런서, 그리고 고객들은 항상
로드 밸런서 재구성특히 수백만 명이 있는 경우
그리고 수백만 명의 고객이 항상 이런 일이 일어납니다.일반적인 접근 방식은 다음과 같습니다.
이벤트 기반 아키텍처.일종의 구성 변경
데이터베이스에 저장되고 있습니다.알다시피, 우리는 이벤트를 전송합니다.
대기열일 수도 있고요.그럼 Lambda를 가동시키면
로드 밸런서를 재구성합니다.하지만 이런 일이 계속된다면
이런 일이 일어나면 예측이 거의 불가능해집니다.
이러한 로드 밸런서에 소요되는 재구성 로드의 양플롯 트위스트, 이건 우리가 한 일이 아니에요. 왜냐하면 처리 과정 때문이죠.
로드 밸런서에서는 예측이 완전히 불가능해집니다.우리가 한 일은 정말 대단합니다.
더 간단한 접근법이죠.기본적으로 모든 변경 사항을 푸시합니다.
우리는 그것들을 보관하고 파일에 기록합니다.
S3와 로드 밸런서에 저장하세요.
고정 루프에서 몇 초마다 S3에서 새 구성을 가져옵니다.그리고 이 파일에는 수정 사항이 있습니다.
일련의 항목으로 구성되며 항상 처리됩니다.
모든 엔트리.따라서, 재구성
완전히 예측 가능합니다.아주 간단합니다.자, 이건 정말 단순함을 사용하는 거예요.
매우 예측 가능한 시스템을 구축하는 것이죠.자, 이건 좀 별로인 것 같지 않아요.
마법과도 같은 아키텍처 변경이지만 단순함이 도움이 될 것입니다.
예측 가능한 프로세싱을 만들기 위해서죠.이런 패턴을 우리는 지속적인 작업이라고 부릅니다. 즉, 지속적으로 파일을 가져오는 것이죠.
S3에서는 스파이크 방지, 백로그 방지,
S3를 사용할 수 있기 때문에 병목 현상을 피할 수 있을 뿐만 아니라 자가 복구도 가능합니다.
타의 추종을 불허합니다.이제 한 가지 예를 들어보죠.
지속적인 작업을 활용하는 또 다른 서비스인 Route 53을 예로 들 수 있습니다.
그리고, 알다시피, 헬스 체커.그래서 우리는 전체 함대를 보유하고 있습니다.
구성한 헬스 체커
노드가 사용 가능한지 여부에 관계없이 직접 확인하십시오.그래서 푸시를 하는 대신
변화가 일어날 때마다
주기적으로 헬스 체커들이 완료 결과를 발표합니다.
구성 파일을 모든 노드의 애그리게이터에
그 사람들이 책임지죠.애그리게이터들은
이 모든 요청을 병합한 다음 푸시합니다.
더 큰 테이블로 가져와서 Route 53으로 푸시합니다.
아무 소용이 없습니다.도착하자마자 아무 일도 일어나지 않습니다.
몇 초마다 그 테이블이 나옵니다.DNS 요청이 도착하여 해결되고 있는 경우에만
IP 주소 집합에 대해 이 표를 확인하십시오.
호스트의 사용 가능 여부이 시스템에서의 처리는
더 이상 이벤트에 의해 구동되지 않습니다.예측이 매우 쉬우므로 복잡성이 줄어듭니다.
창 밖에서도 여전히 단순합니다.하지만 다시 말씀드리지만 이것은 의도적입니다.단순함에는 규율이 필요합니다.이제 예측 가능한 설계를 해야 합니다.
시스템은, 대부분, 실제로
불확실성의 영향을 줄이세요.이제 복잡성을 관리하는 방법에 대한 이 영역의 마지막 강의입니다.
복잡성을 자동화하는 것입니다.관리에 필수적입니다.
복잡한 대규모 시스템.AWS는 자동화를 사용합니다.
내구성과 용량을 위해 실제로 새 지역을 구축하는 작업이 완전히 자동화됩니다.사람은 거의 없습니다.
예시들이 전혀 관련되어 있거나
네트워킹에 대해 말씀하셨잖아요.고객은 지속적으로 재구성합니다.
그들의 네트워킹 능력.따라서 우리에게는 다음이 필요합니다.
그걸 완전히 자동화하기 위해서죠.이제 질문은 다음과 같습니다.
무엇을 자동화해야 할까요?잘못된 질문이네요.올바른 질문은 다음과 같습니다.
자동화하면 어떨까요?사람이 할 수 있는 결정만
정말 상황을 파악해야 하고 명확해야 합니다.그 밖의 모든 것을 자동화하죠.우리가 무엇을 자동화하는지 생각해 보면 일반적인 것과 훨씬 비슷합니다.
그리고 반복되는 사람이 아니라 표준적인 행동도 있죠.이제 자동화입니다.
표준이 되어야 하고 예외가 있어야 합니다.
인간이 한꺼번에 몰려 있는 곳이죠.수동 입력만 가능해야 합니다.
정말 필요한 분야에서는 필수입니다.
인간의 높은 판단력.사실 일반적인 관행이죠.
아니면 정말 실용적인 접근법도 있겠죠.
사람이 한 가지 유형의 명령을 내립니다.항상 다른 사람에게 맡기세요
실제로 양쪽 어깨 너머로 살펴보면서 우리가
인간으로서 실수를 하지 마세요.우리가 하는 한 분야는
많은 자동화, 많은 자동 처리,
그게 보안 문제인가요?물론, AWS에서는
누구에게나 보안 관련 직업이 있습니다.우리는 모두 보안 엔지니어입니다. 보안이 필요하기 때문이죠.
보안을 원하신다면 가장 먼저 생각하시는 것이
귀사의 고객.그리고 보안을 설계함으로써
우리는 처음부터 보안을 서비스에 포함시킵니다.
쏟아붓는 대신 생성되는 대로
나중에 그 위에 뭔가가 있네요.그래서 저희 보안팀뿐만 아니라
안전한 서비스를 구축할 수 있도록 도와주세요.또한 기술을 개발하기도 합니다.
그 자체로는, 예를 들면 자동화를 중심으로
위협 인텔리전스.이제 거대한 네트워크가 생겼습니다.
전 세계에 걸쳐 우리는 엄청난 영향력을 행사하고 있습니다.그런 영향을 볼 수 있잖아요.
거기 있는 변화에 대해서요.말 그대로 조 달러에 달하죠.
하루에 DNS 요청이 들어오고 우리는 쉽게 식별할 수 있습니다.
매일 100,000개 이상의 악성 도메인이 발생합니다.이게 다 끝났어
자동화된 프로세스 맞죠?신경망은 다음과 같습니다.
요청이 푸시되고 나면 자동으로 감지합니다.
어떤 것들이 실제로 악성인지.그러면 해당 정보가 자동으로
GuardDuty로 유입되어 데이터를 보호할 수 있습니다.
우리 고객들.이걸 손으로 만든다면
어마어마한 과정이 될 거예요. 정말 벅차죠.
자동화는 이런 문제를 해결하는 데 도움이 됩니다.
계속 증가하는 데이터의 양은 데이터를 제공할 수 있습니다.
이 인텔리전스가 GuardDuty에 전달되었습니다.자, 또 다른 영역인데요,
분명 제가 안에서 본 적이 있는 것이죠.
보안팀은 우리 모두가 집중하고 있는 분야입니다.우리 모두 지원 티켓을 가지고 있어요.
글쎄요, 적어도 우리 대부분은 그랬을 거예요.
저도 그랬습니다. 그리고 대부분의 지원 티켓은 실제로 의도된 것이었습니다.
사람이 처리할 수 있도록 말이죠.하지만 저는 그런 것 같아요.
새로운 기술을 활용하면 실제로 많은 자동화 작업을 수행할 수 있을 것입니다.
이러한 지원 티켓의 처리에이전트 워크플로를 구현할 수 있습니다.
이러한 프로세스 중 일부를 다음과 같은 방식으로 자동화하려는 경우
티켓 해결의 복잡성에이전틱 워크플로가 된 것 같습니다.
이런 식이죠.운영되는 시스템입니다.
독립적으로 작업을 수행합니다.에이전트는 전문화되어 있습니다.
매우 잘 정의되고 좁은 사용 사례에 적합합니다.계획을 세우고, 반복하고, 도구를 사용할 수 있고,
일종의 자동화를 위해서죠.이것은 우리가 어떻게 사용하는지를 보여주는 일종의 예시입니다.
에이전트 티켓 분류 시스템.기본적으로 상담원의 목표는 효율성을 높이는 것입니다.
지원 티켓을 해결하고 그 다음 프로세스를 진행합니다.
티켓을 읽고, 도구를 사용하고,
반복하고, 분류하고, 티켓의 우선 순위를 정합니다.
분석을 기반으로 행동을 결정합니다.해결해야 할 수도 있습니다.
자동으로, 아니면 에스컬레이션될 수도 있습니다.
사람의 검토를 위해서죠.자, 몇 번이나 했냐고요?
실제로 티켓을 열고 다양한 것을 살펴보자면
꼭 보셔야 할 정보들,
데이터베이스는 여기, 다음에 대한 정보
저기 있는 고객.실제로 할 수 있을 거예요
세상에 대한 완전한 그림을 보여드리죠.
인간으로서 높은 판단력을 발휘해야 한다면
이 티켓을 해결하기 위해서요자, 관심이 있으시다면
이 에이전트 워크플로우에서는 클레어 리구오리가
아주 흥미로운 GitHub 저장소가 있는데, 이를 통해 다음을 수행할 수 있습니다.
이런 종류의 서버리스를 할 수 있는 정말 좋은 기반을 제공하기 위해서죠.
프롬프트 체이닝.게다가 대단한 것도 있어요.
서버리스 제작에 관한 자체 학습 과정
Bedrock을 통한 에이전트 워크플로도 제공됩니다.집중할 수 있게 해줍니다.
자동 문제 해결에 중점을 둡니다.정말 대단하네요, 아시다시피
왜냐하면 이러한 작업 중 상당수, 특히 티켓 해결은
좀 지루하죠.네가 하는 이런 힘든 일 중 일부는
꼭 해야 할 일인데, 하고 싶지 않은 일이죠.따라서 더 빠르게 할 수 있습니다.
높은 판단력을 발휘해서 이걸 만드세요. 완벽해요.그러니 복잡성을 자동화하세요.모든 것을 자동화하세요.
높은 판단력이 필요하지 않습니다.그러니까, 이것들은
제가 아마존에서 보낸 20년을 생각해보면
몇 가지 교훈이 있긴 하지만 확실히
복잡성에 대한 교훈그리고 이것들은
가장 중요한 것들이죠.확실해요, 얘기해 보시면
아마존의 저명한 엔지니어들, 여러분은 더 많은 교훈을 얻을 수 있을 거예요. 왜냐하면 우리 모두가
이 주위에는 흉터가 있고, 우리는 이것을 어렵게 배웠지만, 단순함을 통해 우리는
시간이 지날수록 더 복잡해지도록 시스템을 확장하기 위해서요.
안전한 방식으로 말이죠.따라서 진화성을 필수 요건으로 삼으세요.
복잡성을 여러 조각으로 나누세요.조직을 조율하세요.
아키텍처를 통해 셀로 구성하고,
예측 가능한 시스템을 설계하고 복잡성을 자동화하세요.그래서 여기서 제 교훈을 공유했는데요, 확실합니다.
여기서도 레슨을 받으실 수 있습니다.그리고 저는, 언제나처럼, 사실 정말
관중석에 계신 영웅들을 칭찬하고 싶습니다.영웅들은 집단이기 때문이죠.
자신의 교훈을 지속적으로 공유하는 사람들
전 세계와 함께 커뮤니티를 구축하세요.영웅들이여, 할 수 있을까요?
제발 일어서세요.어디 계세요?제발요.이쪽.[박수] 이제 257명의 영웅이 있습니다.
53개국에서 활동하고 있습니다.그들은 다른 모든 사람들을 돕는 지상의 발입니다.
저희 플랫폼에서 성공하세요.제발, 들어보세요.그들과 교류하세요. 왜냐하면
그들은 여러분에게 가치 있는 교훈을 알려줄 수 있습니다.
자신만의 시스템을 구축할 때 말이죠.이제 그들은 자신들의 교훈을 공유하고 있지만, 기술을 사용하는 회사는
좋은 일을 많이 하기 위해서요. 특히 음식 문제를 다루기 위해서요.
이 세상의 쓰레기는 회사라고 불립니다.
가기엔 너무 좋아요그들의 부사장을 환영하고 싶습니다
로버트 크리스티안슨 엔지니어링 부서에 대해 말씀드리자면
그들의 진화.로버트?[음악과 박수] 안녕하세요, 여러분.잠깐 손 내밀어 보여줘손을 들어보신 적이 있다면 손을 들어보세요
좋은 음식을 쓰레기통에 버렸어요, 제발요글쎄요, 당신은 혼자가 아니에요.40% 라는 거 알고 계셨나요?
전 세계에서 생산되는 모든 식품 중 쓰레기가 되고 있나요?마치 가는 것과 같습니다.
가장 좋아하는 피자 가게, 상자에서 네 조각을 꺼내면
바닥에 떨어뜨리기도 하고, 걸어가기도 하고
썩게 놔둬요음식물 쓰레기는 전체 온실의 10% 를 차지합니다.
전 세계 가스 배출량, 전체 배출량의 4배
항공 산업.환경 관련 모든 것 중에서
우리가 함께 직면한 문제들, 음식물 쓰레기
단연코 가장 멍청한 짓이죠.Too Good to Go가 설립되었습니다.
2015년 코펜하겐에서 젊은 기업가들에 의해 설립되었습니다.그리고 그들은 비전을 가지고 있었습니다. 바로 해결책을 찾는 것이었습니다.
선호하는 식당들이 낭비하는 엄청난 양의 음식.사람들이 더 좋아한다는 걸 알았죠.
음식을 구경하는 것보다 할인된 가격에 사는 게
버려졌어요.그 단순한 아이디어가 떠올랐어요.
세계 최대의 마켓플레이스
잉여 식량을 위해서요처음 몇 주 동안
출시 후 수백 개의 기업이
남은 식량을 마켓플레이스 앱에 올렸어요.
수천 명의 사용자가 깜짝 가방을 모았습니다.
팔리지 않은 잉여 식품, 지구에 윈-윈
그리고 그들의 주머니.우리 창립자들은 기업가들이었어요
그 시작은 강한 신념으로 시작되었습니다.
그리고 똑똑한 아이디어지만 한 가지는
그들은 분명히 개발자가 아니었습니다.앱의 기술적 토대가 가장 탄력적이지는 않았습니다.
옛날엔 말이지요.이로 인해 문제가 생겼습니다.
우리가 성장하면서 빠르게 성장했죠.첫 입사 이후인 2018년에
백만 명의 등록 사용자, 이 플랫폼은 어려움을 겪기 시작했습니다.저희 애플리케이션은 고전적이었어요.
단일 MySQL 인스턴스가 있는 PHP 애플리케이션.우리 시스템은 매일 과부하가 걸렸습니다.우리는 건물을 짓고 싶지 않았어요.
우주 왕복선.우리가 하고 싶었던 건 규모를 확장하고 일을 단순하게 하는 것뿐이었어요.
10명의 엔지니어를 위해서요그럼, 우리가 뭘 했냐고요?처음에는 쉬운 것부터 시작했어요.
옵션을 사용할 수 있습니다.활주로를 많이 살 수도 있어요.
Amazon Aurora에 내장된 지원 기능을 사용하면요.
최대 15개의 리더 노드.읽기 전용 사용 사례를 파악하고 별도의 연결을 사용했습니다.
이러한 경우의 도구.그런 다음 다시 작성하기로 결정했습니다.
애플리케이션을 스프링 애플리케이션으로
한 번에 한 엔드포인트씩그래야 이점을 활용할 수 있습니다.
더 나은 리소스 관리, 연결 풀링, 캐시, 메시지 큐 통합,
그리고 처리.우주선을 만들 필요가 없었어요.부품만 가져갈 수 있었죠.
기성품이죠.주로 확장성을 높이기 위해 약간만 사용자 지정하면 됩니다.
고성능 엔드포인트, 특히
이는 결국 일관성이 있는 것으로 간주될 수 있습니다.
트래픽이 많죠.사용자 수가 100만 명일 때
우리는 거의 압도당했습니다.하지만 이러한 작은 개선으로
등록된 사용자 수가 천만 명에 달했습니다.
출시한지 4년만에 말이죠.사용자 성장은 계속되었습니다.
가속화하면서 동시에
이 회사는 새로운 기능을 원했고, 이로 인해 새로운 과제가 생겼습니다.개발자들이 직면했을 때
동일한 규모 조정 요구 사항을 받아들이길 원했습니다.
중앙 툴박스에서 말이죠.기억하세요, 우리가 원했던 건
일을 단순하게 하기 위해서였죠.우리는 언어에 초점을 맞춘 아키텍처를 사용했습니다.
프레임워크도 고쳐졌죠.일반적인 패턴은
트랜잭션 처리, 캐싱, 메시징, 보안 등
그리고 백그라운드 프로세스에는 요구 사항이 주어졌습니다.
저희 서비스도 마찬가지입니다.언어 수정
그리고 이러한 경우 아키텍처는 기술적 복잡성을 낮췄습니다.이것이 인생을 결정지었습니다.
우리 엔지니어들은 훨씬 더 쉬워졌습니다.이 시점에서 우리는 서비스를 제공하고 있습니다.
대부분의 트래픽은 최종적으로 일관된 소스에서 나옵니다.
캐시, 아마존 오픈서치, 보호
대량의 당사 트랜잭션 데이터베이스
재트래픽.그리고 그게 우리가 성장할 수 있게 해주었죠.2020년까지 우리는 2,400만 명에 달했습니다.
16개 시장에서 사용자를 등록했지만 음식이 낭비되고 있습니다
이 지구 어디에서든 말이죠.우리에게 더 큰 영향을 미칩니다
더 큰 성장을 의미했죠.유럽 이후 우리는 사업을 확장했습니다.
2020년에 첫 신대륙인 북미로 향했습니다.파트너도 다르고 습관도 다르고
시간대가 다릅니다.저희는 현지인이 되고 싶었어요.
첫날부터 지연 시간이 짧고 고객 경험이 훌륭했지만 새 앱을 만들고 싶지는 않았습니다.
미국의 인프라도 중요하죠. 단순하게 사용하세요.AWS를 사용하면서 가능했습니다.전 세계에 지역이 있으므로 처리할 수 있습니다.
북미 현지에서 말이죠.하지만 된다는 것은 무엇을 의미할까요?
여러 지역에서?모든 것을 복제할 수 있나요?우리가 가진 것을 더 확장하고 싶었어요.
단순하게 유지했지만, 그렇다고 해서 그런 뜻은 아니었어요.
정말 쉬웠어요.우리는 우리의 접근 방식을 택했습니다.
이를 통해 고객 또는 파트너의 거래가 해결됩니다.
거주 지역에서그리고 우리가 사용한 데이터를 널리 퍼뜨렸죠.
재트래픽의 대부분을 처리하기 위해서죠.Amazon SNS를 연결해야 했습니다.
업데이트를 배포하기 위한 주제 및 Amazon SQS 대기열
데이터가 로컬에서 업데이트될 때마다 해외 지역으로 전송하여 추가 패턴 생성
우리 개발자들이 사용할 수 있습니다.아주 잘 작동했고,
하지만 많은 작업이 필요했고, 시작해보셨겠지만
지역이 늘어나면 어떻게 보일지 상상해 보세요.이를 통해 우리는 계속해서 사업을 확장해 나갔습니다.
북미 전역에 걸쳐 디트로이트 피닉스에 론칭하여
몇 가지 예를 들자면 올해 클리블랜드도 마찬가지죠.우리는 사용할 수 있었습니다.
출시할 계획과 동일한 청사진
또 다른 대륙, 호주, 이번에는 최소한의 노력으로 말이죠.그리고 오늘은
우리는 그 이상을 갖춘 번창하는 커뮤니티입니다.
1억 명의 등록 사용자와 175,000명의 활성 비즈니스 파트너.지금까지 Too Good to Go는 4억 달러 이상을 절약하는 데 도움이 되었습니다.
식사가 낭비되는 것을 막고, 우리는 만들고 싶습니다.
훨씬 더 큰 영향을 미쳤죠.올해 우리는 신제품을 출시합니다:
Too Go To Go 소포.식료품을 살 수 있어요.
유통 기한이 거의 다되어 음식을 먹지 마세요
제조 수준에서.스타트업으로서 원하는 것은 성장입니다.
하지만 기술적인 관점에서 보면 난관에 봉착할 수도 있습니다.한 가지 확실한 것은 Too Good to Go를 통해 음식을 절약한다는 것입니다.
단순하게 말씀드려야 합니다. 바로 지금 우리가 저축하고 있기 때문이죠.
1초에 네 끼를 먹죠.하지만 1초마다 8만 달러가 낭비됩니다.앞으로 엄청난 기회가 기다리고 있습니다.지구의 건강
그거에 달렸어요그럼 질문 하나 남길게요.어떻게 하면 식량을 더 절약할 수 있을까요?
쓰레기로 가는 건 어때?고마워요.[음악과 박수] [재치 있는 음악] 그럼, 베르너 박사님, 다음은 뭐죠?고객은 어떤 혁신일까요?
지금 찾고 계신가요?자, 이제 막 일을 끝냈어요
지금 흥미로운 데이터베이스를 가지고 있는데, 정말 멋지네요.
그 복잡성 때문이죠.다중 지역, 다중 활성,
분산형이지만 동기식 지원
데이터 손실이 전혀 없는 간편한 데이터 복제세 단어: 피자, 친구, 채즈.멍청아!어쩌면 더 쉬울지도 몰라요
설명해 드리면좋아요, 좋아요.고객의 의견을 듣는 게 좋아요.
로버트나 투 굿 투 고처럼 말이죠.그는 정말 명료했습니다.
그들이 직면한 복잡성, 성장, 확장, 데이터 처리
여러 지역에 걸쳐 있습니다.늘 그렇듯, 제 생각에는, 아시다시피
우리는 이런 종류의 회사들과 그들이 직면하고 있는 문제들을 살펴봅니다.
회사의 아키텍처를 발전시키는 과정을 살펴보겠습니다.
만들기 위해 어떤 기술을 만들어야 할까요?
이게 훨씬 쉬워졌어요.자, 생각해보면
복잡성에 대한 부담은 우리가 항상 원하잖아요.
아시다시피 우리가 더 많은 일을 해낼 수 있도록
그리고 여러분이 실제로 직면하고 있는 복잡성에 대한 부담은 더 커요.
간단한 시스템을 직접 만드세요.목표는 다음을 만드는 것입니다.
데이터베이스를 다루는 고객 경험, 예를 들면
가능한 한 간단합니다.하지만 보시면
시간이 지남에 따른 복잡성 부담은
처음 AWS를 시작했는데 아마도 실행 중이었을 것입니다.
자체 데이터베이스, 또는, 아시다시피, 꽤 자주
고객들은 여전히 아키텍처에 따라 변화하고 있습니다.
온프레미스에서 클라우드로 전환한 후 계속 운영될 예정입니다.
EC2에 있는 자체 데이터베이스 및 읽기 전용 복제본 실행
다른 AZ와 비슷한 것들에서도 말이죠.복잡성 부담
정말 고객 부담이었어요.첫 단계는 저희가 해낸 것입니다.
실제로 RDS를 통해 이러한 데이터베이스를 대신 관리하는 것인데, 그 결과 비용이 크게 줄었습니다.
운영상의 복잡성.더 이상 패치를 할 필요가 없습니다.
업그레이드, 백업, 읽기 스케일링그리고 확실히 처리할 수 있습니다.
유지 관리의 복잡성
예를 들어 가용성이 높고 단순화되었습니다.
복구 프로세스.하지만 우리는 여전히 실행 중이었습니다.
RDS 내부의 표준 데이터베이스인데 솔직히 말해서 그렇지 않았습니다.
혁신을 위한 정말 훌륭한 토대입니다.
데이터베이스 작업에서 말이죠.그러니까, 아시다시피
대부분의 데이터베이스는 매우 어려운 하나의 거대한 모놀리스로 구축됩니다.
변화를 주기 위해서죠.그래서 우리가 제일 먼저 한 일은
사실 컴퓨팅을 분리해서 Aurora를 구축하기 시작했죠.
스토리지에서 말이죠.갑자기 로그가
데이터베이스가 되었고, 그게 우리가 할 수 있게 해줬어요.
훨씬 빠르게 이동하려면 스토리지를 분리해야 합니다.
엔진에서 가져온 것이므로 확장할 수 있습니다.
걱정 없이 더 매끄럽게
스토리지에 대해그러면 할 수 있게 되죠.
이 세상에서 Aurora 서버리스와 같은 혁신을 이루기 위해서요.
그리고 오로라 리미트리스.그리고 그들은 이걸 골고루 가져갔죠.
한 걸음 더 나아가서 말하자면, 기본적으로 온디맨드 스케일링, 용량 제거를 들 수 있습니다.
선행 요구 사항, 그리고 이제 능력
또한 0으로 축소할 수도 있습니다.하지만, 그리고 화요일에는
매트가 차세대 오로라 시대인 아마존 오로라 DSQL을 발표했습니다. 그렇죠?DSQL은 애플리케이션을 지원합니다
이를 통해 전 세계 고객에게 서비스를 제공할 수 있습니다.
Too Good to Go가 해결해야 했던 것은 아키텍처 때문이었습니다.
만약 그랬다면 다르게 생겼을 텐데
DSQL을 사용할 수 있으며 페일오버가 가능합니다.
운영 중단 없이그리고 당신도 할 수 있는 게 있어요.
성능 측면에서 모두 최적화된 데이터 배치
규정 준수뿐만 아니라네, 제공합니다.
전 세계적으로 구축할 수 있는 도구 포함
서비스에 필요한 복원력을 갖춘 분산 애플리케이션
수억 명의 고객.자, 저는 여기에 대해서는 다루지 않겠습니다.
DSQL의 모든 특징과 기능, 그 외에도 제가 말씀드린 내용을 어떻게 적용하는지에 대한 예로 DSQL을 사용하겠습니다.
초기 단계부터 복잡성을 미리 관리할 수 있도록 말씀드리겠습니다.
DSQL을 설계할 때는 그것이 올바른지 확인하기 위함입니다.
시간 경과에 따른 진화의 토대계층 구조입니다.
각각 분산되어 있는 독립 구성 요소
탄력성이 뛰어나죠.그리고 우리도 같은 원칙을 사용했습니다.
앞서 말씀드린 것은 시스템 분리, 디커플링입니다.
더 작은 빌딩 블록으로, 각각의 빌딩 블록으로
응집력이 높고, 특정한 한 가지 작업을 수행할 수 있고
결합력이 낮아 개별적으로 사용 가능
해당 구성 요소를 확장하고 매우 잘 정의되어 있습니다.
둘 사이의 API가 필요하죠. 왜냐하면
이들이 통신하는 방식.이렇게 하면 입자가 아주 세밀해집니다.
시스템을 제어하면 다음을 수행할 수 있습니다.
다양한 구성 요소를 개별적으로 확장할 수 있습니다.
요구 사항에 따라또한 맞춤 제작도 가능합니다.
각 구성 요소의 보안은 특정 구성 요소에 따라 다릅니다.
해당 요구 사항.자, 상위 레벨을 보면
DSQL의 구성 요소에는 프론트엔드가 있습니다.
실제로 대부분의 작업을 처리하는 쿼리 프로세서가 있습니다.
일종의 SQL 프로세싱이죠.심판관이 있어요
이는 거래 여부와 관련하여 조정됩니다.
실제로 커밋할 수 있습니다.제공하는 일지가 있잖아요
단기 보관.크로스바가 하나 있습니다.
사실 이건 장기 보관에 합쳐지는 거죠.각 구성 요소들은
다양한 방식으로 확장하세요.쿼리 프로세서가 확장됩니다.
세션 수 포함.심사위원 척도
거래 건수에 따라저널은 금액에 따라 크기가 조정됩니다.
실제로 확보할 수 있는 처리량
이러한 스토리지 시스템 중 하나에서다시 말하지만, 크로스바는 저널 수에 따라 확장됩니다.
가지고 계신 데이터베이스의 크기도 그렇고,
스토리지를 통해서도 사용됩니다.자, 각 구성 요소들은
개별적으로 확장하세요.두 개를 함께 묶었더라면
기존 데이터베이스처럼 하나의 거대한 모놀리스로 모든 것을 확장해야 할 것입니다.
이러한 구성 요소 중 가장 큰 규모로 보면
엄청난 규모의 과잉 확장과 극도의 비효율화
관리하기도 훨씬 더 어려워요. 지금은 다음과 같은 구성 요소가 있기 때문이죠.
또한 우리는 독립적으로 발전할 수도 있습니다.그럼, 어떤 것들이 있는지 살펴보죠.
이 구성 요소들은 함께 작동합니다.먼저 해보죠.
간단한 읽기 트랜잭션입니다.찾고 있는 사용자를 상상해 보세요.
여기 동네 식당에서 피자를 주문하려면
여기 라스베가스에 있어요.모두 글을 쓰셨군요.
이 SQL 쿼리요?다음과 같은 레스토랑 중에서 선택하세요.
평점이 4점 이상입니다.그럼, 무대 뒤에서 무슨 일이 벌어지나요?
이 시점에서요?여러분의 애플리케이션은
실제로 할당하는 프런트엔드와의 연결
쿼리 프로세서.쿼리 프로세서는 매우 작지만
우리가 할당하는 독립 구성 요소
각 세션마다SQL이 도착하면
처음에 입력할 타임스탬프를 얻게 됩니다.
트랜잭션의 내용이죠.로컬 시계를 읽습니다.
그런 다음 이러한 요청을 전송합니다.아, 아니, 먼저
다른 역할을 하죠.실제로 뭔가를 참고하는 거죠.
샤드 맵이라고 불렀죠.왜냐하면 창고에서는
예를 들어, 스토리지는 실제로 샤딩됩니다.
데이터베이스 키.따라서 샤드로 이동해야 합니다.
맵핑을 통해 어떤 스토리지 엔진을 사용하는지 알 수 있습니다.
실제로 이 데이터를 보관하고 있습니다.그리고 이게 읽은 거라는 점을 감안하면 굳이 옮길 필요는 없습니다.
트랜잭션 경로를 통해서요.스토리지로 바로 이동합니다.
실제로 데이터를 검색하기 위해서요.이제 DSQL의 스토리지는 그렇지 않습니다.
일반적인 데이터베이스 스토리지입니다.일반적인 데이터베이스 스토리지
기본적으로 페이지를 검색하고 해당 페이지에서
실제로 데이터가 들어 있을 겁니다.DSQL의 스토리지는 데이터베이스입니다.
인식한다는 것은 할 수 있다는 뜻입니다. 예를 들어
필터링 같은 걸 하세요.그 말은
스토리지 엔진으로 가서 이 특정 행을 요청하면 해당 행만 반환됩니다.
혹은 그 행들의 집합이라던지, 사실 그런 종류는 아니죠.
이 모든 데이터를 담을 수 있는 전체 페이지,
그리고 나서 데이터를 잠글 필요가 있다는 것이죠. 그게 가장 큰 문제 중 하나입니다.
기존 데이터베이스의 병목 현상.그래서 이들이 상호 작용하는 방식은
스토리지와 관련해서요.그러면 이러한 결과가 합쳐집니다.
사용자에게 반환되었습니다.그럼 다음은 어떻게 될까요?이 시점에서 사용자는 알아낼 수 있습니다.
그들은 실제로 피자를 사고 싶어하는데, 우리는 이것을 이렇게 부릅니다.
대화형 거래죠.그리고 SQL 개발자라면
대화형 트랜잭션에 대해서는 이미 잘 알고 계실 것입니다.거래를 시작하면
데이터를 얻고, 클라이언트에서 작업을 하고,
결정을 내리고 SQL을 좀 더 작성하고
다시 고객에게 돌아가서 결국에는
실제로 커밋을 하는 셈이죠.이건 아주 다른 유형이에요.
여러분이 가지고 있는 거래의 종류에 비추어 보면
예를 들어 DynamoDB에서는 다음을 수행해야 합니다.
모든 작업을 한 번에.그러면 쿼리는 다음과 같이 보일 것입니다.
이런 식이죠.조금 더 길어질 거예요.네, 레스토랑을 선택하고 아이템을 고르면 됩니다.
메뉴에서 말이죠.그런 다음 주문을 하면, 무엇을 해야 할까요?
완료하면 커밋을 누르게 됩니다.그러면 SQL이 전체 패키지로서 쿼리 프로세서로 전송됩니다.
사용자에게 할당되면 실제로 병합됩니다.
모두 합쳐서 DSQL에서는 쿼리 프로세서입니다.
저장 탱크 역할을 합니다.스냅샷 아이솔레이션을 사용합니다.따라서 실제로 읽을 수 있습니다.
로컬 메모리에 있는 데이터에 씁니다.그리고 전체 트랜잭션을 전송하기 전에 커밋을 기다립니다.
심사관들한테심판관들도... 네?그럼, 기본적으로 무슨 일이 벌어지는건지
모든 종류의 간단한 SQL 문은 한 지역 내에서 처리됩니다.
쿼리 프로세스가 있는 곳이자 유일한 크로스 리전
상호작용은 실제로 일어날 때 일어납니다.
커밋을 실행하고 있습니다.다음과 같은 심사관이 있는 경우
다른 지역에서 운영한다면 그들을 참여시켜야 할 수도 있습니다.즉, 읽고 쓸 수 있다는 뜻이죠.
그리고 업데이트도 마찬가지로 빠릅니다.
단일 지역 데이터베이스에 저장될 수 있습니다.이제 쿼리 프로세서는 매우 유용합니다.
그런 점에서 정말 독특한 녀석이죠. 그래서 프로세서가 실제로 돌아가는 거죠.
작은 Firecracker 가상 머신 안에서 쿼리에 배치됩니다.
프로세서 호스트는 베어메탈이고, 말 그대로 수천 개를 실행할 수 있습니다.
이러한 마이크로 VM 내부의 쿼리 프로세서
베어메탈 호스트에서클라이언트 간의 연결인 경우
고객과, 고객 간
쿼리 프로세서는 실제로 한동안 휴면 상태가 됩니다. 왜냐하면 고객은
결정을 내리지 않고 있기 때문에
아직 커밋을 보지 못하셨을 텐데요. 실제로 일시 중지할 수 있습니다.
이 마이크로 VM이요.그러면 고객이 다시 시작하게 됩니다.
이 조치를 취하면 실제로 복구할 수 있습니다.
마이크로 VM의 스냅샷, 그리고 우리가 할 수 있는 일이죠.
몇 밀리초 안에 말이죠.이제 정말 최적화할 수 있습니다.
장기 트랜잭션에 적합합니다.앞서 말했듯이 쿼리에서
프로세서는 스냅숏 격리를 사용합니다.
각 트랜잭션은 일관된 스냅샷에서 작동합니다.
기존 데이터베이스 그대로의 데이터베이스
트랜잭션이 시작될 때이렇게 하면 읽기를 진행할 수 있습니다.
쓰기를 차단하지 않고, 그 반대도 마찬가지입니다.트랜잭션이 시작되고 진행됩니다.
SQL 실행 단계를 거쳐 읽은 내용을 참조하십시오.
이 일관된 스냅샷그리고 쓰기 작업이 발생하면
삽입이나 업데이트처럼 즉시 처리되지 않을 수도 있습니다.
스토리지에 적용됩니다.대신 이러한 쓰기를 스풀링합니다.
로컬에서 일종의 비공개를 만드는 거죠.
트랜잭션의 작업 공간.이를 통해 예를 들어,
읽기, 쓰기 기능, 후속 읽기
동일한 트랜잭션 내에서 보류 중인 모든 변경 사항을 확인할 수 있습니다.자, 실제로 트랜잭션은
쓰기 세트 둘 다 완전한 포스트 이미지입니다. 즉, 행에 대한 리뷰입니다.
이 모든 업데이트 이후에 데이터베이스에서
적용되었습니다.그래서, 쓰기 세트는
이미지 뿐만 아니라 심사관들에게도 전송되고 있습니다. 게다가 시간도 더 걸려요.
그 부분에 대해 말씀드리도록 하겠습니다.그러면 재판관들이 자리에 앉습니다.
DSQL의 쓰기 경로이며 트랜잭션 여부를 결정합니다.
커밋할 수 있는지 여부를 결정합니다.심사관의 직무
갈등을 감지하고 해결하는 것입니다.
트랜잭션 간 및 쓰기 확인
일관성이 있습니다.자, 이 작업을 위해, 아시다시피, 생성 프로세서가 만들었습니다.
심사관에게 보낼 페이로드입니다. 이 페이로드에는 모든 정보가 들어 있습니다.
결정을 내려야 돼요페이로드에는 쓰기 세트가 포함되어 있습니다. 네,
트랜잭션으로 수정된 모든 항목
그리고 포스트 이미지 세트는 기본적으로 복사합니다.
이펙트에 적용되는 모든 테이블 행 중
트랜잭션의 결과입니다.이제 페이로드에도 다음이 포함됩니다.
트랜잭션 시작 시간, T-start는 중요한 요소입니다.
트랜잭션을 커밋하거나 중단할 때이제 두 개의 동시성을 살펴봅시다.
트랜잭션이요.둘 다 심사관에게 보내지고 대략 처리될 예정입니다.
동시에 말이죠.거래 A가 다음 주소로 전송되었지만
트랜잭션 B보다 약간 먼저 커밋하면, 이 경우에는 어떻게 될까요?심사위원들이 페이로드를 비교합니다.
쿼리 프로세서에서 트랜잭션을 검사합니다.
시작 시간 및 쓰기 세트모든 쓰기를 찾고 있습니다.
T-start 이후, 테이블 행에 대해 제안, 인덱싱됨
겹치거나 일치하는 키를 사용하여두 트랜잭션이 모두 보이면
키 3으로 식별되는 행을 업데이트하려고 합니다.따라서 둘 다 행을 변경할 수는 없습니다.
동시에 말이죠.따라서 트랜잭션 A는 커밋할 수 있습니다.트랜잭션 B는 중단되어야 합니다.이제 쓰기가 설정되면
거래 내역이 서로 교차하지 않도록 심사관은
진행을 커밋할 수 있습니다.이 경우에는 트랜잭션이
진행이 허용되고 할당됩니다.
커밋 타임스탬프, T-commit자, 아까 말씀드렸던 거 기억나요?
전통적인 데이터베이스에서는 내구성이 중요합니다.
스토리지 계층에서 말이죠.트랜잭션은 안정적으로 작성되면 커밋된 것으로 간주됩니다.
스토리지 레이어로 이동하면 그렇게 될 것으로 예상됩니다.
복구 커밋과 같은 모든 종류의 것들
실패 이후의 트랜잭션, 그리고 이를 보관해야 합니다.
메모리와 스토리지가 일종의 동기화 상태
물건을 복구할 수 있도록 말이죠.정말 힘든 일이에요.그리고 우리는 이걸 만들기로 결심했어요.
훨씬 더 간단하죠.DSQL에서는 저널이 담당합니다.
단기적인 내구성을 위해.거래가 고려됩니다.
트랜잭션이 작성되면 커밋됩니다.
학술지에, 그리고 학술지에
수평적 확장이 가능하며, 실제로 척도는 다음을 기반으로 합니다.
이들 각각의 처리량 능력을 기준으로
스토리지 엔진이 가질 수 있습니다.네, 하지만 우리가 보는 건
커밋된 트랜잭션의 전체 주문 흐름
저널에그리고 이 순서는 매우 중요합니다.
시스템 전반의 일관성을 유지하기 위해서죠.그러면 실제로 크로스바가 당겨지기 시작합니다.
저널의 트랜잭션들이 실제로 움직이게 하죠.
스토리지 엔진으로자, 이제 보시죠.
여기 심사위원들이 있어요. 일지를 훑어보세요.바로 그 순간, 우리는 보낼 수 있습니다
고객에게 확인 메시지를 보냅니다.
거래가 완료되었음을 알립니다.보시다시피, 각각
이 시스템의 구성 요소는 독립적으로 작동합니다.자, 이건 정말 대단한 일이죠.
원칙을 따르는 아키텍처의 예시입니다.
복잡성 관리.자, 여기 뭔가가 들어있었어요
그걸 좀 미루고 넘어갔어요.이 두 가지를 기억하세요.
T-스타트와 T-커밋은 다음과 같은 놀라운 예시입니다.
이 복잡한 작업을 실제로 수행하면서도 실제로 조정을 수행하는 방법은 매우 단순합니다.
구성 요소가 서로 다르죠.T-스타트 및 T-커밋
로컬 시계를 읽었지만 분산 시스템에서는
그건 거의 불가능해요.시계는 사용할 수 없어요.
분산 시스템에서는 말이죠.그리고 기억하세요, 시간의 개념
우리 삶의 기본입니다.이제 제가 시작했다는 것을 여러분 모두 알고 계실 겁니다.
8시 30분에 여러분 모두 시계를 보고 계실 거예요
이제 끝날 것 같으면따라서 시간은 기본입니다.우리 모두, 거의 대부분
손목에 시간을 갖고 다니세요.그리고 우리에게는 어느 정도 시간이 정확해도 괜찮습니다.대략적인 수치도 괜찮습니다. 시간을 사용하고 싶으면
분산 시스템에서는 항상 이 점을 고려했습니다.
불가능하다는 거죠.놀랍고 놀라운 광경을 봤죠.
일관성을 유지하기 위해 시간이 지남에 따라 알고리즘이 개발되고 있습니다.
리더 선출, 2단계 커밋, 이런 모든 것들이죠.
우리가 해야 할 일이었어요. 시간을 쓸 수 없었으니까요.그리고 아주 유명한 논문이 하나 있습니다.
70년대 말 레슬리 램포트가 쓴
사실 아주 유명한 논문이죠.튜링 어워드를 받았어요.
이 분야와 관련된 일을 해줘서 말이에요타임 클록 및 오더
분산 시스템의 이벤트, 기본적으로
우리는 시간을 사용할 수 없어요. 사실 이 모든 걸 가지고 있죠.
생각해 봐야 할 다른 종류의 능력들은
왜냐하면 우리는 시간을 사용할 수 없기 때문이죠. 그리고 보시면
이 모든 다른 알고리즘들, 분산형 잠금,
벡터 클록, 이 모든 메커니즘
시간이 흐르면서 발명된 거죠. 시간을 사용할 수 없었기 때문이죠.몇 년 후, 정말 흥미로웠어요.
91년 또 다른 튜링 어워드 수상자인 바바라 리스코프는
실제로 이 논문은 실제 사용자를 대상으로 작성했습니다.
동기화된 클록에 대해서요.정말 놀라워요. 왜냐하면 그녀가 시작했으니까요.
여러분이 할 수 있는 이 모든 알고리즘에 대해 설명해 주세요.
접근 권한만 있다면 훨씬 더 간단하게 구축할 수 있습니다.
시계와 시간에 맞춰 말이죠.그녀는 신문에도 이렇게 썼습니다. 그래서 최근에서야
분산된 시계, 동기화된 시계
사용 가능한 시스템에서 사용할 수 있게 되었습니다.음, 가장 최근의 방법은
30년 후, 그렇죠?30년이 지난 지금, 마침내
정확도가 높은 싱크로나이즈드 클럭.이를 통해 우리는 조립을 할 수 있습니다.
우리의 시스템, 복잡한 알고리즘,
훨씬 더 간단한 방식으로 말이죠.이제 완성된 것이 있습니다.
다른 인프라, 세 번째 중추
데이터센터 내부는 전용 데이터센터입니다.
단 한 가지, 정확한 서비스를 제공하기 위해서입니다.
동기화된 시간, 그리고 우리가 하는 일, 그리고 실제로 실현됩니다
인공위성에서 그걸 동기화시키려면
이걸 가져와, 완전히 분리된 이 백본
Nitro에 있는 카트에 꽂히면 바로 사용할 수 있습니다.
아마존 타임 서비스를 통해 정확한 시간을 얻을 수 있습니다.그리고 이 시계의 정확도가 정확합니다.
마이크로초 단위입니다.작년, 피터는 벌써
그의 기조 연설에서 이 문제를 어떻게 개선했는지에 대해 이야기했습니다.
마이크로초 단위의 클록, 그리고 이것이 가능한 방법
각 Amazon EC2 인스턴스에서이것은 일종의 그래픽입니다.
이게 어떻게 생겼는지 말이에요.그래서 인공위성이 도달하게 되죠.
원자시계.그리고 이걸로 완성되었죠.
세 번째 레벨의 백본은 FPGA 하드웨어를 사용합니다.
그리고 특수 니트로 카트를 사용하면, 아시다시피,
드라이버와 네트워크 버퍼, 그리고 항상 NTP에 부담을 주던 것들
네트워크 타임 프로토콜로는 할 수 없었지만
정렬을 제외하고는 어떤 정확도라도 얻을 수 있습니다
수십 밀리초 정도죠.이 클록의 정확도는
마이크로초 범위, 단일 마이크로초 범위 내에 있습니다.자, 이 시점에서 보신 것은
사실, 아시다시피
T-커밋과 T-start가 검색되었습니다.
이 하드웨어 시계에서 말이죠.즉, 할 수 있다는 뜻이죠.
거래가 시작된 시점을 정확히 비교하세요
그리고 언제 커밋되었는지도 말이죠.정말 특별하죠.자, 환경은 거의 없습니다.
이걸 얻을 수 있는 이 세상에서는
단, AWS에서는 예외입니다.그나저나 솔직히 말씀드리죠.제가 증명할 수 있는 건 이 시계들은
매우 정확하고 매우 정확한 시계입니다.
실제로는 존재하지 않습니다.항상 약간의 변화가 있을 수 있습니다.약간은 있을 수 있습니다
의사소통의 차이.어딘가에 약간의 지연이 있고, 그에 못지않게 오류가 발생할 수 있습니다.
시간이 날 때마다 말이죠.그리고 우리는 자체적으로 시스템을 구축했습니다.
클락 바운드라고 하죠.실행되는 데몬입니다.
EC2 인스턴스에서.그리고 라이브러리가 있습니다.
GitHub에서 사용할 수 있는 것은 이뿐만이 아닙니다.
정확한 현재 시간이지만 잠재적 오류
그걸 우회하는 거죠.그리고 당신도 활용할 수 있습니다.
그 에러바운드에 대해서요생각해 볼 수 있겠죠.
가장 빠른 시간은 언제이고, 이게 정확한 시간이라면
사실 우리가 생각하는 것과 같지만, 어떤 변화가 일어날 수 있을까요?
가장 빠른 시간, 또는 가장 늦은 시간은 언제일까요?
이 시점에서요.이 시계 중 어떤 시계를 선택할지는 여러분이 결정합니다.
실제로 가져가실 겁니다.그러니까, 이건 사실 그렇지 않아요.
마이크로초를 주면 되죠.실제로 여러분께 드릴 수 있습니다.
나노초 시계.그리고 한계도 알 수 있죠.
우리가 생각하는 곳에서, 아시다시피
이 문제의 잠재적 오류는 무엇일까요?그리고 그건 나쁘지 않아요.이걸 실제로 활용할 수 있잖아요.
실제로 다음과 같이 생각할 수 있는 오류가 있을 수 있습니다.
이런 일이 일어났을 가능성이 가장 높은 가장 늦은 시간은 언제일까요?
그리고 가장 빠른 시간은 언제인가요?이제 두 Aurora DSQL을 모두 사용할 수 있으며, 매우 간단해졌습니다.
자세히 살펴보자면, 우리가 사용할 수 있기 때문입니다.
동기화된 시간에 대해서요.우리가 사용하는 것과 같은 기술이죠.
Amazon DynamoDB 글로벌 테이블에 사용되고 있으며, 이제는 이 테이블도 제공합니다.
강력한 일관성.훨씬 간단하게 할 수 있습니다.
액세스 권한이 있기 때문에 전 세계적으로 강력한 일관성을 유지할 수 있습니다.
동기화된 시간으로.정확한 클럭은 감소합니다.
상당히 복잡합니다.이 모든 알고리즘을 보세요.저는 이 중 많은 것들을 연구해봤지만
시간이 없었기 때문이죠.분산 거래, 분쟁 해결,
리더 선출, 알다시피, 2단계 커밋
팍소스, 래프트이 모든 것이 훨씬 더 간단할 거예요
시간만 사용한다면 말이죠.그리고 매트도 시작했다는 거 알아요
화요일에 있었던 그의 프레젠테이션은 우리가 항상 원했던 방식에 대해 이야기하면서
건물을 짓기 위한 기본 요소를 제공하고자 합니다.
차세대 시스템.네, 그리고 원래는
정말 컴퓨팅, 스토리지, 데이터베이스였죠.
네트워크, 보안.그게 원본이었어요.
빌딩 블록.하지만 이제 좀 더 근본적인 것을 추가했습니다.
이 모든 것의 기본 요소입니다.그리고 기본 건물은
블록은 시간입니다.여러분 모두 한 번 살펴보길 권합니다.
여러분이 사용하는 알고리즘과 매커니즘은
애플리케이션 내 구축, 시간 동기화 여부
실제로 시간을 크게 줄이는 데 도움이 될 수 있습니다.
시스템의 복잡성.뭐, 제 교훈은 거의 없습니다.
오늘 당신을 위해서요.들어주셔서 감사합니다.
이 모든 것에 대해서요그리고 아시다시피
우리 모두에겐 시간을 할애할 시간이 있어요.그럼 이제 널 보내줄게.사실 저는 시간을 할애할 거예요
내년에는 제가 정말로 원하는 것에 대해
관심을 끌기 위해서죠.아시다시피 저희는
또한 Now Go Build TV 시리즈를 보신 적이 있으시다면 저는 젊은 층에 대해 매우 열정적입니다.
몇 가지 문제를 해결하려고 하는 기업 및 조직
세상에서 가장 어려운 문제들이죠.지속 가능성을 살펴보면
유엔의 목표, 2050년경에는 20억 달러에 달할 것으로 예상됩니다.
지구상에 더 많은 사람들이 있죠.어떻게 그들을 먹여살릴 수 있을까요?어떻게 제공할 수 있을까요?
그들에게 의료 서비스를 제공할까요?어떻게 하면 그들이 가지고 있는지 확인할 수 있을까요?
경제적으로 지속 가능한 미래?그리고 젊은 사람들도 정말 많아요.
공격을 시도하는 기업과 조직
이런 문제들, 제가 정말 도와주고 싶어요.한 가지 중요한 것은
우리가 하고 있는 일은 조직이 있다는 것입니다.
테크 투 더 레스큐라고 불렸죠.우리는 AI를 위한 코호트 시스템을 가지고 있습니다.
체인지 메이커용그리고 펠로우십도 만들었죠.
그들의 CTO들을 위해서요그래서 제가 그들을 돕고 있어요.
그리고 우리 팀은 그들이 정말로 힘을 낼 수 있도록 돕고 있어요.
그들의 기술적 역량이죠.그리고 히어로즈 선수들에게도 정말 감사했어요.
실제로 한 걸음 더 나아가 조언을 도와주기도 했습니다.
젊은 기업들이 기술을 실제로 어떻게 활용할 수 있을까요?
이 세상에서 선한 일을 하기 위해서요.정말 고마워요, 여러분.그나저나, 이런 것들 중 하나는
제가 보기에 이 단체들은 대개 아주 작은 단위를 가지고 있는 경우가 많습니다.
기술자들로 이루어져 있죠, 그렇죠?만약 당신이라면, 그리고 그들이 정말로 할 수 있는 것은
누군가의 사용 시간을 2주 또는 한 달 정도만 사용할 수 있는 경우도 있습니다.좋은 일을 하고 싶다면
작업하고 기술을 활용하세요
진정한 변화를 이끌어낼 수 있는 능력, 먼저 살펴보기
이런 단체들, 그러니까 여러분의 시간을 좀 기부하세요.체험의 일부를 기부해 주세요.
정말 큰 시스템을 구축하는 데 있어서 정말 진정한
이 세상을 변화시키세요.우리는 기술자로서 창조했습니다.
모든 것이 아름답지는 않지만, 세계의 일부를 실제로 해결하는 것도 우리의 책임이기도 합니다.
가장 어려운 문제는 기술을 사용하는 것입니다.자, 이제 심각한 부분은 끝났습니다.오늘 밤은 시간을 보낼게요
진짜로 이 파티에 갔을 때 말이야오늘 밤 모두 볼 수 있으면 좋겠어요
라스베이거스 페스티벌 그라운드에서위저와 제드 투나잇그럼, 거기서 봐요.파티![음악, 응원, 박수]