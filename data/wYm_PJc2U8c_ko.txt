- 완벽해.고마워요.(웃음) 거기서부터 조금 비틀거리며 시작했어요.re:Invent에 오신 것을 환영합니다, 여러분.오늘 이 자리에 와주셔서 정말 감사합니다.이런 모습을 볼 수 있어서 행복해요
SaaS 주제를 다루기 위해 많은 사람들이 모여들었습니다.이 슬라이드에서 알 수 있듯이
이름은 토드 골딩 (Todd Golding), AWS의 솔루션스 아키텍트입니다. 지난 8~9년 동안 저는 많은 일을 해왔습니다.
저는 SaaS 분야에 중점을 두고 있으며, 함께 일해 왔습니다.
팀, 고객, 파트너, 모든 종류의 도메인과 협력하여 SaaS를 구축, 제공 및 최적화해 왔습니다.
AWS 기반 솔루션.그리고 그 8~9시에
몇 년 동안 우리는 엔지니어들처럼 SaaS의 분류를 어떻게 설명할 수 있는지 알아내는 데 많은 시간을 할애했습니다. 왜냐하면 우리가 발견한 것은 SaaS에 대한 획일적인 개념은 없다는 것이었기 때문입니다.누구나 이러한 기능을 가지고 있습니다.
흥미로운 배포 모델은 환경에 매우 흥미로운 종류의 요구 사항과 요구 사항이 있다는 것입니다.하지만 동시에 더 많은 구조를 부여할 수 있을 것 같았죠.사람들에게 좀 줘야 돼요.
이걸 어떻게 할 수 있을지 생각해 보세요.그래서 우리는 계획을 세우고 정의했죠.
제 다른 사람을 본 적이 있다면
패턴 등에 대해 말씀드리죠. 사일로라는 아이디어죠.
테넌트에 전용 리소스가 있는 모델, 테넌트가 리소스를 공유하고 그 사이에 있는 모든 종류의 변형을 공유하는 풀링 모델.그리고 다양한 종류의 기술 스택에 대해서도 이야기했습니다.어떻게 생겼을까요?
이러한 패턴을 EKS 위에 구현하거나 실현하려면
이걸 서버리스 위에 올려놓았는데, 어떤 차이가 있을까요?
그렇게 하면 무슨 소용이 있을까요?그리고 우리가 정말 해낸 것 같아요
잘했고, 잘했어요.그리고 좋은 것도 많아요.
참조 아키텍처, 여기에 좋은 내용이 많이 있습니다.
사실 re:Invent에서는 이 모든 분야에 걸쳐
이러한 다양한 기술 전략을 구현하는 방법을 잘 이해할 수 있게 해주는 주제입니다.하지만 제가 최근에 점점 더 많이 보게 된 것은 셀 기반 아키텍처에 관심이 있는 많은 사람들입니다.그리고 셀 기반 아키텍처는
아주 오랫동안 사용되어 온 개념이죠.규모와 탄력성을 확보하기 위한 정말 훌륭한 전략이죠.좋은 논문이 많이 있습니다.
쓰여진 것 등등.하지만 사람들이 말하는 것을 본 적이 있는데, 훌륭한 세포 기반 아키텍처는 이런 특정한 것들을 잘 해낸다는 것입니다.규모도 훌륭하고
복원력이 뛰어나죠.하지만 이러한 멀티테넌트 SaaS 개념을 모두 수용한다는 것은 무엇을 의미할까요?배포, 테넌트 격리, 계층화 등 모든 다른 계층의
아키텍처에 대한 고려 사항을 최우선으로 고려할까요, 아니면 멀티를 중점적으로 생각해야 할까요? 셀 기반 아키텍처를 이러한 개념 위에 올려야 할까요?그리고 교차점을 만들 수 있는 방법이 있을까요?
셀 기반 아키텍처와 이 모든 것이 다릅니다.
멀티테넌트 원칙과 새로운 전략을 세웠나요?배포를 위한 몇 가지 새로운 모델.제가 보기에 이 모델은 솔직히 우리가 그랬으면 좋았을 것 같은 모델입니다.
좀 더 오래 전에 얘기했었죠.아이디어가 우리 앞에 놓여 있었죠.고객들이 이미 구현하고 있습니다.
그거, 그 중 몇몇은 해봤어요.하지만 세포 기반 기술을 적용한다는 것이 무엇을 의미하는지에 대해서는 아직 많이 이야기하지 않았습니다.
SaaS 환경으로?이것이 바로 목표입니다.
오늘 이 강연 맞죠?교차로가 어디인지 정말 알려드리고 싶은데요
멀티테넌시와 이 모든 원칙 사이
그리고 우리가 가지고 있는 개념과 셀 기반 전략.여기서 가장 중요한 점은 더 많은 사람들이 SaaS 배포에 대해 생각해 보길 바란다는 것입니다.
모델, 사일로 풀뿐만 아니라 이전에 사용하던 모든 모델도 추가되었으면 합니다.
셀 기반 아키텍처를 목록에 올리면서 “셀 기반 모델이 나에게 적합한가요?” 라고 물어보세요.그리고 뭘 찾을 수 있을까요?
우리가 전에 주창했던 전략들은
세포 기반 모델에는 아직도 많은 부분이 포함되어 있습니다.하지만 세포는 여기에 새로운 차원을 가져다 줍니다.그리고 저는 더 많은 것을 원해요.
사람들은 스스로에게 이렇게 묻습니다. “SaaS 환경에 셀 기반 아키텍처를 사용해야 할까요?”이 세션은 300레벨 세션입니다.열지 않을게요
ID, 그리고 오늘은 여기서 많은 코드를 다루지 않을게요.기본적으로 논리적 구조만 살펴보죠.
셀 기반 아키텍처에 대해서요. 거기서부터 시작해야 하니까요.
도대체 무슨 뜻일까요?이게 뭐예요, 어떻게 어울리죠?그리고 나서 우리 방식대로 해볼게요
구현과 메커니즘에 대해 더 자세히 알아보겠습니다. 그리고 이것이 아키텍처를 실제로 구현한다는 것은 무엇을 의미할까요?그리고 모두에게 고백할게요.
처음부터 여러분에 대해 말씀드리자면, 저한테는 이게 약간이네요
탁 트인 풍경이죠.세포 기반이 어떻게 교차될 수 있는지 생각해 볼 수 있는 방법은 아주 많습니다.솔직히 정말 신나는 일이에요. 새로운 것들이 많다는 게
이에 대해 생각해 볼 수 있는 방법들제가 내년에 이 강연을 한다면 아마 여기에 추가할 새로운 것들이 많이 생길 것 같아요.하지만 우리는 어딘가에서 시작해야 합니다.제 생각엔 많은 것들이
제가 오늘 소개할 내용은 다음과 같은 것일 수도 있습니다.
이것이 올바른 접근 방식인지 아닌지에 대한 토론과 토론이 좀 있었습니다.하지만 시작해야 할 것 같아요.
이 방향으로 나아가죠.이제 도착하기 전에
세포 기반 특성에 대해서는 좀 더 살펴봐야 합니다.
지금 우리가 보고 있는 풍경이죠.사람들이 현재 멀티테넌트 SaaS 아키텍처를 어떻게 구축하고 있는지 보면 솔직히 꽤 어려운 분야입니다.꽤 어려운 곳이죠.
이런 상황을 실제로 실현할 수 있는 아키텍처를 만드세요
SaaS의 장래성은 충분하죠?네, 멀티테넌트를 구할 수 있어요.
아키텍처가 급속히 발전했습니다.네, 앞서 말씀드린 몇 가지 패턴을 구현한 것을 구할 수 있습니다.하지만 이 모든 것을 갖추면 정말 모든 것을 얻을 수 있습니다.
운영 효율성과 규모의 경제, 그리고 달성해야 할 모든 것들은 정말 어려운 일입니다.이것이 어려운 이유 중 하나는 바로 워크로드 때문입니다.
고객 및 임차인의 프로필은
때로는 지도 곳곳에서 볼 수 있습니다.가끔은 세입자가 있을 때도 있어요
특정 워크로드가 있는 경우 시스템의 일부만 작동합니다.일부 테넌트는 다음을 소비합니다.
하루 중 특정 시간.새 임차인이 생겼습니다.
시스템에 들어오고 있고, 테넌트는 시스템을 떠나고 있습니다.그래서 이 공간만 놓고 보면 이렇게 말하기는 매우 어렵습니다. “음, 여기의 확장 전략은 뭐지?레질리언스 스토리는 무엇일까요?
고립에 관한 이야기는 무엇일까요?”왜냐하면, 예를 들어, 여러분 환경의 풍경은
시시각각 변하죠.그럼 이 반대편에서는
방정식을 말씀드리자면, 우리는 이 모든 기술적 고려 사항을 가지고 있습니다.
멀티테넌시의 경우컴퓨팅만 보면
스택, EKS로 무엇을 할 수 있나요?카펜터를 사용하고 네임스페이스를 사용할 거예요
테넌트 한 명당, 그리고 난...노드 그룹을 사용할 건가요?
그리고 100개의 노브와 다이얼을 알아내야 할 것 같은데요
어떤 규모와 탄력성, 어떤 전략이 효과가 있을까요?
거기 들어가서 그걸 정확히 찾아내는 건 꽤 어려운 일이죠.효과가 있어요.우리 모두 이해할 수 있어요
일을 하기는 어렵죠.스토리지도 마찬가지입니다.스토리지를 보면 이렇게 생각하죠. “음, 어떻게 격리할 수 있을까요?
테넌트 스토리지가 가능할까요?어떻게 파티션을 나누고, 어떻게 스토리지 크기를 조정할 수 있을까요?RDS를 사용하고 나서 특정 인스턴스 크기를 선택해야 하는데 서버리스를 사용하지 않는데 그 인스턴트 크기가 오늘은 맞지만 내일은 틀릴까요?제 (불명료한) 크기를 조정해야 하나요?”우리는 항상 적절한 크기의 스토리지에 대해 이야기합니다.비즈니스 요구 사항에 맞게 스토리지 크기를 적절하게 조정하려면 어떻게 해야 하는지 파악하는 것이 매우 어렵습니다.다시 한 번 말씀드리지만
규모와 효율성의 경제를 쫓는 거죠?그리고 나서 딱 한 가지
당신 자신의 사업의 현실이요.예를 들어, 도메인은 무엇을 하고 있나요?우리의 규정 준수 요구 사항은 무엇인가요?규정은 무엇인가요?
우리가 직면하고 있는 요구 사항은 무엇일까요?이런 것들은 어때요?
디자인에 영향을 주었나요?그리고 무엇보다도, 그 위에 다른 모든 원칙들이 겹쳐져 있죠?시끄러운 이웃.어떻게 대처해야 할까요?
이웃이 시끄럽지 않은지 확인하려고?이 모든 다양한 파라미터 간의 격리를 어떻게 처리할 수 있을까요?어떻게 쫓아갈 수 있을까요?
소비 최적화?어떻게 확인할 수 있나요?
리소스 사용량과 인프라 사용량이 일치합니다.
테넌트의 실제 활동과 관련이 있나요?저는 이 모든 것을 말하고 또 말합니다. SaaS가 저에게 그토록 재미있고 흥미로운 도메인이었던 이유가 바로 이 때문입니다.하지만 저도 인정해야 할 것이 있습니다.
많은 사람들이 이 모든 요구 사항을 충족하기 위해 고군분투한다는 것을 알고 있습니다.
아키텍처 때문에 결국 타협을 하게 되죠.약간 과잉 프로비저닝하는 거죠. 걱정이 되니까요.
그게 미칠 영향에 대해 말이에요.그들은 특정 기술을 선택합니다. 다른 기술보다 쉽지만 적절한 기술을 제공하지 못할 수도 있기 때문입니다.
그들이 정확히 원하는 결과.그냥 딱딱한 공간이고
우리는 그것을 분해하고 더 쉽게 만들기 위해 최선을 다하고 있지만, 여전히 어려운 일이죠.또 다른 차원은
이 어려운 점은 바로 배포 모델입니다.배포 모델이라고 하면, 우리의 발자취를 말하자면
SaaS 인프라는 만병통치약도 아닙니다.고전 사례를 보면
일종의 SaaS를 예로 들자면, 우리는 이것을 풀링된 환경이라고 부릅니다. 모든 테넌트가 모든 인프라와 모든 스토리지를 공유한다고 합니다.그리고 저는 그걸 확장할 뿐이에요. 적어도 한 가지 확장해야 할 부분이 있어요.약간이긴 하지만, 심지어
그걸 어떻게 효과적으로 확장할 수 있을지 알아내면
테넌트 부하가 항상 변하기 때문에 어렵습니다.하지만 현실은
보통 이런 환경은 아니죠.전부 다 할 수 있는 게 아니라 그냥 가서 “이봐, 그냥 다 같이 모이게 해줘.
다 끝났어.”우리가 직접 설계했거나 고객의 요구 때문에 결국 조각을 해야 하는 환경은 거의 항상 있습니다.
이러한 환경은 서로 다른 배포 모델로 나뉩니다.한 가지 예를 들자면,
같은 환경에서 모든 테넌트가 분석 서비스를 제외한 모든 것을 공유하고 있습니다. SLA 때문이죠.
고려 사항이나 규정 준수 여부, 앞서 말씀드린 이유가 무엇이든
우리는 이 문제를 해결해야 합니다.어쩌면 시끄러운 이웃 분석이 정말 수다스럽고 바쁜 서비스일지도 몰라요.시끄러운 이웃 문제가 많이 발생하여 다음과 같이 결정했습니다.
이것이 적어도 프리미엄 등급 테넌트에게는 효과가 있으려면 잠재적으로 해당 서비스의 독립형 버전을 제공할 계획입니다.그리고 한 가지 현실은
아무도 얘기하기 싫어하는 부분이 있는데, 저희는 일부 임차인들에게도 완전히 독립형 주택을 제공한다는 것입니다.
완전히 헌신적인 환경.우리는 이것을 풀스택 사일로 (Full Stack Silo) 라고 부릅니다. 즉, 충분히 큰 규모의 글을 쓸 의향이 있었다는 뜻이죠.
저희 단체에 확인해 보세요. 그럼 완전 전용 환경을 제공하겠습니다.그러니까, 만약 보시면
전체적으로 봤을 때, 제 스케일링은 무엇이고,
레질리언스 및 그 모든 것에 대한 저의 통합된 접근 방식은요?저는 목표를 매우 정확히 정했어야 합니다.
여기 잠재적으로 표적이 될 수 있는 전략들이 있습니다.
이런 것들 하나하나.어쩌면 감동적인 것일 수도 있습니다.
제가 언제, 어떻게 지낼 수 있는지 생각해야 하는 목표죠.
새로 들어올 서비스를 기반으로 이런 것들을 조정해 나가는 거죠.
새 테넌트가 들어오거나 새 계층이 들어오거나자, 이걸 살펴보자면
예를 들어, 좀 더 넓은 집합은 어떤 종류일까요?
이 모든 것에 걸친 요구 사항들이 이 문제를 복잡하게 만들고 있습니다.그 중 하나는 풀링된 리소스와 배포 모델일 뿐입니다.
복원력으로는 구현하기 어려운 모델입니다.
그리고 격리와 폭발 반경으로부터
일종의 관점이죠?내 테넌트를 모두 넣으면
한 환경으로 가서 그냥, 그냥, 그냥, 이렇게 말하세요
운영 중단이 발생하더라도 모든 작업을 위해 컴퓨팅을 공유합니다.
모든 테넌트에 연쇄적으로 발생할 수 있습니다.게다가 새 테넌트가 들어올 경우 규모를 어떻게 조정할 수 있을까요?
워크로드가 다음과 같은 경우 항상 표시됩니다.
하루 종일 바뀌나요?네, 할 수 있어요
동적 규모 조정 정책, 그리고 규모를 확대하거나 축소할 것입니다. 여기서는 자동 크기 조정의 장점을 모두 얻을 수 있을 것입니다.하지만 정말 어렵습니다.
매우 효율적인 전달을 제공하는 방식으로 이러한 정책을 작성해야 합니다.그러면 사람들이 무슨 일이 일어날까요?
여기선 공급 과다.그들은 선택의 여지가 없어요.그냥 방어 전술로 그런 짓을 하는 거예요. 단점이 있으니까요.
무언가 잘못되면 정전이 일어난다는 거죠.
할 수만 있다면 SaaS를 위한 일종의 안티패턴인 셈이죠.
피하세요. 하지만 현실이죠.다른 건, 그리고 넌
이건 모든 종류의 강연에서 볼 수 있어요. 워크숍이 있어요.
여기서도 이에 대해 말씀드리자면, 배포 모델입니다.
이러한 환경 또한 점점 더 복잡해지고 있습니다.제가 볼 때 그게 무슨 뜻일까요?
사일로화된 리소스도 있고, 풀링된 리소스도 있고, 티어도 있습니다.예를 들어, 제 온보딩과 개발자 배포 라이프사이클은 모두 다릅니다.
이걸 어떻게 프로비저닝할지 고민해야 하는 방법들
그리고 이러한 환경을 위한 인프라를 설정하세요.그냥 가서 보시면
쿠버네티스 예시는 아르고와 F.lux가 있습니다.
헬름 차트가 들어있어요.이 모든 것을 해내고 있어요.
다양한 세입자를 추적하기 위해 시도해야 할 것들
구성 및 해당 구성을 매핑하는 방법 알아보기
적절한 경험을 제공합니다.그리고 꽤 복잡하죠.그리고 우린 여전히 원해요
여기서 AB 릴리스나 타겟 릴리즈 같은 걸 하세요.이런 것들이 더 많이 배포될 때 어떻게 도입할 수 있을까요?마지막으로 제게 점점 더 눈에 띄는 것은 분산된 공간을 원하는 팀들이 점점 더 많아지고 있다는 것입니다.
그들의 솔루션 덕분입니다.그들은 이렇게 말하고 싶어하죠. “한 지역에서만 출마하는 게 아니에요.제 사업을 확장하고 싶어요
새로운 지역으로 진출하거나, “더 많이 운영하고 싶어요.”
우리 지역에 워크로드가 있지만 좋은 워크로드를 갖고 싶습니다.
이를 위한 배포 단위입니다.”이를 통해 도달 범위를 넓힐 수 있습니다.
그리고 현재 입지를 뛰어넘는 배포 모델을 갖출 수 있습니다.어떻게 하면 효과적으로 할 수 있을까요?
우리가 다시 할 거라는 말을 갑자기 하지 않아도
전체 DevOps 라이프사이클, 그렇지 않으면 환경을 관리하고 운영하는 방법을 다시 생각해 보게 될 것입니다. 이제 다중 지역을 운영해야 하기 때문입니다.이게 전부입니다.
셀 기반 아키텍처로 가는 것이 무엇을 의미하는지 생각하면서 생각해 봐야 하는 것이죠, 그렇죠?그리고 저한테는 이게 정말 많아요.
이 강연을 하게 된 동기와 많은 생각들
이 모든 것의 기반이 되는 과정은 바로 셀 기반 아키텍처였죠.
더 간단한 방법이 될 수 있을까요?적어도 해결은 할 수 있을까요?
이러한 문제들 중 몇 가지는 절충안을 마련할 수 있을까요?꼭 해낼 수 있을 거예요
일부 장단점이 있지만 모두 긍정적이지는 않습니다.하지만 일부 조직의 경우
셀 기반이 복잡성을 줄이는 이러한 문제 중 일부에 대한 좋은 해결책일까요?
약간의 노력과 규모 조정, 그리고
정책 전략에 대해 좀 더 설명해 주세요.
이러한 절충점을 위한 비즈니스로서의 유연성?그리고 그 부분이 약간 마음에 들어요. 정말 친절해요.
여러분 모두가 생각해 보고 싶은 부분이 바로 생각이에요.
당신이 오늘 이곳을 떠나면, 저는 브랜드를 만들고 있는 거예요
새로운 SaaS 아키텍처 또는 기존 SaaS 아키텍처가 있습니다.
셀 기반 SaaS 아키텍처, 생각해 볼까요?
영업이 우리에게 새로운 기회를 열어줄지 아니면 복잡성을 줄여줄지
우리 환경의 모습은요?이제 생각해보면
우리 세포는 어떠할까요, 맞아요. 우리가 가지고 있는 전통적인 환경에서 시작한다면
오늘날, 오늘날 우리는 모든 임차인을 다음과 같이 생각합니다.
한 환경에 있는 것이죠.네, 일부는 격리되어 있을 수 있습니다.
일부는 한곳에 모일 수도 있지만, 일반적으로 생각하면
집합적으로 묶여서 한 세트로 둘러싸인 형태라고 할 수 있습니다.
이들을 총체적으로 다루는 정책과 전략들이죠.하지만 이제 이렇게 넘어가면
셀 기반 아키텍처, 우리는 더 많은 것을 생각하기 시작합니다.
어떻게 하면 테넌트 그룹을 가져와서 이 논리적 구조에 넣을 수 있을까요?
이렇게 하면 이들을 한데 모아 배포 단위와 규모 단위로 구분할 수 있을까요?자, 이것은 논리적인 구조입니다.이건 당신이 원하는 게 아니에요
고객들에게 가서 이렇게 말할 거예요. “이봐, 넌 할거야.
두 번째 방에 넣으면 첫 번째 방에 들어갈 거예요.”이게 바로 당신이 할 수 있는 메커니즘이에요
건축가로서 이 환경에 도입해서 이렇게 말해보세요. “만약 제가 넣으면
제 세입자들을 이 감방과 그룹에 집어넣으면
그렇게 하면 몇 가지 이점을 얻을 수 있어요.”이점이라면 규모, 가용성 문제,
현재 사용하고 있는 일부 전략보다 간단할 수 있는 방식으로 또는 일부 지역에서 사용할 수 있는 방식으로 레질리언스를 해결할 것입니다.
복잡성을 한 층 더하세요.하지만 이러한 복잡성은 일부 비즈니스 개선에 도움이 됩니다.
이것의 일부로서 가치를 두죠, 그렇죠?이 중 많은 부분이
세포 기반 전략은 정말 스스로에게 물어보는 것입니다. 그럼, 세포에 어떤 전략을 사용할지 어떻게 결정해야 할까요?어떤 테넌트가 어떤 세포에 들어가야 하며, 세포는 어떻게 살아나며, 다중 세포 환경에서 확장한다는 것은 무엇을 의미할까요?제가 볼 수 있는 부분이 바로 이것입니다.
정말 여기를 보고 싶어요.하지만 꼭 그러고 싶은건
이 이야기로 넘어가기 전에 사람들은 “셀은 VPC인가요, 아니면 테넌트당 셀 계정인가요?” 라고 물으실 겁니다.그룹화 구조는
당신에게 달렸어요, 그렇죠?이건 그냥 될 수 있어요
리소스 집합과의 태그가 지정된 일종의 관계, 또는
세포 자체가 실제로 존재하는 상황을 보게 될 겁니다.
세포를 관리하고 운영하는 인프라를 갖추고 있습니다.따라서 스펙트럼이 넓습니다.
여기에는 다양한 가능성이 있고, 다양한 가능성이 있습니다.
이를 위해 사용할 수 있는 기술의 범위.그럼 이 전체를 살펴보죠.
전략을 고르는 아이디어죠.지금 말씀드리자면, 여긴 넓고 열린 공간이라고 생각해요.오늘 말씀드리자면, 판매 전략을 선택하기 위해 해야 할 세 가지 일을 말씀드리겠습니다.저는 그렇게 할 수 없어요.그런 기분이야, 마치,
여러분 중 누구와든 한 시간 동안 토론을 통해 적절한 판매가 무엇인지 말해보세요.
비즈니스를 위한 전략은?하지만 몇 가지 알려드릴 수 있어요
어떤 극단적인 상황에 대해 이해하고 나면, 그게 어떤 영향을 미칠 수 있을지 자문해 볼 수 있습니다.
우리가 선택한 판매 전략은 무엇일까요?한 가지 접근법은
이 문제의 극단 중 하나는 우리가 이렇게 말할 수 있는 것이죠. “이봐, 난 사실
사일로 세입자들을 데려가서 각각의 사일로 세입자들을 각자의 감방에 집어넣을 거예요.”이제 셀에 사일로 테넌트를 넣는 건 스케일링 기능이 아니에요.배포예요.
그룹화 기능입니다. 왜냐하면 그 테넌트는 이미 완전히 격리된 자체 리소스를 가지고 있을 것이기 때문입니다.그러니까 갑자기 그런 게 아니에요.
확장성을 높이거나, 복원력을 높이거나, 더 격리되도록 만드는 거죠.하지만 이제 써볼게요
세포를 하나의 그룹으로 관리하고 관리하는 방법이죠.
그들의 배치 등등.그런 다음 인프라를 공유하는 공동 테넌트를 데려가겠습니다. 기본적으로 왼쪽부터 시작하겠습니다.
여기 셀 하나를 보시면 제 셀을 넣을게요
여기 세입자들이 모여서 내가 먼저 집어넣을 거야
일정한 한도에 도달할 때까지 테넌트를 모았어요한도는 어떻게 되나요?그럴 수도 있겠죠.
거기 세입자 수가 많아요.해당 풀에서 발생하는 리소스의 소비일 수 있습니다.이를 결정할 수 있는 매개변수는 얼마든지 있습니다.
그 세포는 꽉 찬 것으로 간주되어 이제
셀을 하나 더 추가하겠습니다.이제 셀 2를 추가하고
이 과정을 반복하죠?테넌트를 더 추가해서 일정 한도에 도달하면 셀은
이 확장 단위.하지만 여기서도 보실 수 있는 것은
좀 더 자세히 설명하자면 해당 풀에 대한 제 스케일링입니다.
여기서 셀 1의 셀은 그 테넌트들로만 제한됩니다.
그 방 안에 있는 거죠.이제 뭐가 됐든
세입자들의 행동이 그 방 안에 있어요. 저는
특정 셀을 위한 규모를 만들어야 하고
심지어 시끄러운 이웃도 마찬가지죠.이제 모든 세입자의 시끄러운 이웃에 대해 걱정할 필요가 없어요.시끄러운 것에 대해서만 생각하면 돼요
주어진 세포의 맥락 안에 있는 이웃,
시끄러운 이웃의 복잡성을 줄여줍니다.
스토리가 꽤 많이 줄었죠.그리고 분명히, 원한다면 이걸 계층화 전략에 매핑할 수 있겠죠.다음과 같이 말할 수 있습니다.
제 프리미엄 등급 테넌트이고, 이들은 제 기본 티어 테넌트입니다.여기서 볼 수 있는 것은
세포 계층화와 세포 그룹 간에는 강한 상관관계가 있는 경우가 많다는 것인데, 그 이유는
자연스러운 프로필에 딱 맞습니다.이제 분명히 또 하나
제가 여기서 취할 수 있는 접근법은 제가 넣겠다고 말하는 것입니다.
이에 대한 대안으로 격리된 세입자들의 집단을 감옥 안으로 집어넣는 거죠.여러 그룹을 넣어도
여기 사일로화된 테넌트들이 있는데, 가정은 각각
이러한 테넌트 중 한 명이 자체 인프라를 가지고 있습니다.그들만의 고유한 소유권을 가지고 있습니다.
전용 인프라.다시 말씀드리지만, 이웃의 소음에 대해 크게 걱정할 필요가 없습니다.
사일로 테넌트를 더 많이 배치하는 것이 더 실용적일 수도 있습니다.
함께 감방 안으로 들어가죠.왜냐하면 우리가 단 한가지
알고 싶지 않은 건, 이봐, 우리가 거기 있는 곳으로 이사했다는 거지
세포 기반 아키텍처인데, 우리는 10,000개의 세포를 가지고 있습니다.세포의 개수라면
이걸로 끝나는 게 너무 크죠. 그럼 그 복잡성은
세포가 있다는 건 그 자체로도 문제가 되죠.그러니까 어떤 전략을 쓰든
여기서 선택하세요. 이 전략이 새로운 세포 생성에 어떤 영향을 미칠지 생각해 보세요.이걸 다르게 생각해 보자면, 아마도
여러분 대부분이 생각하실 수도 있겠지만, 저는 세포 하나부터 시작하겠습니다.제 모든 세입자들이 그 감방으로 들어가고, 저한테 사일로가 있고 수영장이 있으면 사일로를 놓을 거예요.
그 방 안에 모여라.자, 이 경우에는
사일로 테넌트 1에는 VPC가, 테넌트 2에는 사일로화하는 VPC가 있습니다.VPC 구조를 사용하고 있습니다.
예를 들어 '헤이, 스케일링 구조'라는 격리 구조체로서 모든 리소스가 그 안에 들어 있습니다.
VPC는 독립적으로 확장됩니다.그런 다음 풀을 설치했습니다.
여기 VPC에도 테넌트가 있습니다. 저도 추가하겠습니다.
이 경험에 포함시키세요.이제 저는 이 감방 안에 어떤 것이든 섞어서 모아둘 수 있어요.
하지만 이제 정책을 좀 더 복잡하게 만들면 되는데, 이 세포는 언제 실행되는지를 말해주죠.
채도 단위에 도달했나요?그건 그렇고, 그럴 필요는 없어요. 여기가 제 생각엔 사람들이
이걸 많이 헤매면 사람들은 이렇게 생각할 거예요. “음,
일종의 성능 기준에 따라 셀로 확장할 것입니다.일단 특정 구역에 도착하면 거기 너무 많아서
그러니 움직여야 돼요.”그 안에서 규모를 확장할 수 있어요.
세포는 여전히 꽤 효과적이에요.그래도 몇 톤 더 추가할 수 있어요
거기 많은 테넌트들이 들어와도 영향을 받지 않을 거예요
세포는 꼭 필요하죠.대신 제가 볼 수 있는 게 뭐가 있을까요?
풀링된 VPC에 있으면 테넌트가 보이기 시작할 거예요
시끄러운 이웃 문제 등으로 서로에게 영향을 미칠 수 있습니다.복잡성 때문이죠. 단지 제가 도달했기 때문이 아니라
스케일 제한 문제가 있어요. 하나 더 추가하겠습니다.
셀이 제 환경에 있어요.그 이유와 이론적 근거는
다른 셀을 추가하는 것이 더 직접적이기 때문입니다.
정책, 그리고 일리가 있다고 말하고 싶은 자신의 욕구
이 방에 세입자가 너무 많으면 좋겠어요. 폭발에 영향을 미치기 때문이죠.
그 세포의 반경이 영향을 미치죠.그래서 만약 정전이 발생하면
예를 들어, 셀 1에서도 마이크로서비스가 풀링된 환경에서 마이크로서비스가 다운되면 전체 셀이 다운되거나 적어도 시간이 걸립니다.
공동 테넌트가 줄어드는 것은 여전히 좋은 일이 아닙니다.그래서 보통 어떻게 하느냐가 관건이죠.
결정을 내리기 전에 그 방에 큰 발자국을 남기고 싶은가요?
이제 다른 세포를 만들 시간이야.다시 말씀드리지만, 이에 대해 더 확실한 설명을 드릴 수 있으면 좋겠습니다.
하지만 제 생각에 이건 경계를 찾는 것에 관한 것 같아요. 다시 말하지만, 어떻게 해야하는지에 관한 거예요.
많은 세포를 원하시나요?한 가지 더 말씀드리자면,
제 생각에 이 슬라이드는 제가 거의 삭제한 것 같아요. 왜냐하면 제 생각에 이건
약간 논란의 여지가 있긴 하지만 제 생각은
세포 유형에 따라 크기 조정 정책이 다른가요?다시 말해, 제가 할 수 있는 건
제 시스템에는 세 가지 계층이 있는데 각 시스템마다 세포 유형 1, 세포 유형 2, 세포 유형 3이 있다고 가정해 봅시다.그리고 제가 하나를 만들 수 있을까요?
각각에 대해 별도의 사이즈 정책을 적용하나요?여기서 중요한 건 저예요
세포 유형 1에 대해 바로 이것을 정의하겠다고 말할 수 있을 것 같습니다.
구체적인 사이즈 정책, 하지만 딱 하나만 있는 건 아니에요.
셀 타입 1의 인스턴스.여러 가지가 있을 수 있습니다.
세포 유형 1의 사례, 세포의 많은 사례
유형 2 등.하지만 이 규모 조정 정책에는 아직 세 가지 조정 정책만 있습니다.그러니까 수백 개를 쫓는 건 아니니까요.
규모 조정 정책.사실 그런 느낌이 들어요.
이것저것 살펴보자면 도전의 한 부분인데
처음에는 최상위권에서 시작했는데 결국 미친듯이 마이크로서비스 수준의 스케일링 정책이 나왔죠.결국에는 이 모든 것을 갖추게 되었죠.
말도 안 되는 스케일링 정책, 그리고 대폭적으로 받아들여요
규모 조정 정책. 이 특정 모델에서는
세포 유형과 특정 세포 유형만 있는 경우
확장 정책이 있거든요. 특정 규모 조정 정책을 계속 적용하기만 하면 되죠.하지만 여기서도 별도의 크기 조정 정책이 필요하지 않다고 주장할 수 있습니다.셀 기반 모델의 사치라고 생각했을 뿐입니다.
아마 다른 환경에서는 없을 수도 있겠죠.자, 이걸 받아들이고 우리가 잘 말한다면, 이건 어떤 모습일까요?
이걸 실제 아키텍처에 연결하기 시작하면 어떨까요?사실 저는 솔직히 이 점에 조금 놀랐어요.실제로, 제가 서버리스 SaaS를 사용한다면
레퍼런스 아키텍처인데 어떻게 생겼냐고 물었죠.세포 안에서 실제로 어떤 일이 벌어지고 어떻게 만들어지는지
멀티테넌트를 구축하는 방식으로는 여전히 많이 구축되어 있습니다.
오늘날의 아키텍처죠?기존 레퍼런스를 거의 끌어올리고 바꿀 수도 있을 것 같아요.
아키텍처는 바로 여기서 벗어나, 기본적으로 왼쪽 전체 스택에서 볼 수 있습니다.
풀, 감방이 필요해요.풀링된 테넌트를 모두 여기에 넣었어요. 여기에 API 게이트웨이가 있어요.이들은 여기에 있는 모든 마이크로서비스를 공유합니다.그래서 저는 이 경험에 어떤 제품, 카탈로그 등을 주문했는지 등을 알아냈습니다.그리고 게이트웨이는 단지 디렉팅일 뿐이죠.
이 특정 채널에 대한 트래픽이 이 셀로 전달됩니다.
특정 환경.지금은 사일로화된 편으로 보자면
좀 더 흥미로운데요, 제가 아직도 이 일에 전념하고 있다는 거예요.
여기에 있는 마이크로서비스 집합은 Lambda 함수의 복사본으로, Lambda의 개별 복사본입니다.
테넌트를 위한 함수.참고로 이것은 효율성과 규모 효율성을 높여줍니다.
그리고 레이턴시 효율성.하지만 이제 API 게이트웨이가 들어오면 실제로 문제를 해결해야 합니다.
이 환경에서 어떤 사일로를 이용해야 하는지 알아내세요.그리고 본격적으로 시작해볼게요.
이 주제의 더 크고 깊은 부분인데, 바로
세포 내에서의 간접성에 대한 전체 개념은
이 주제에서 정말 핫한 부분이죠.예를 들어, 지식이 얼마나 많은지
감방에 넣어서 여기로 가는 방법을 알아내야겠어?아니면 그 지식이 살아 있는 걸까요?
세포 바깥쪽 가장자리에 있나요?이제 같은 걸 복용하면
그리고 우리는 EKS를 가져다가 다시 여기에 넣었습니다. EKS에서 한 번 더 올라가면 되죠.
레퍼런스 아키텍처는 약간 다를 수 있습니다.
여기 있는 게 있는데, 아마 일반 버전에서는 이게 하나의 클러스터이고 풀링된 것은 하나의 네임스페이스에 있고 사일로는 분리되어 있을 것입니다.그리고 이 케이스는 제가 만들었죠.
풀스택 풀링 환경을 위한 별도의 클러스터입니다.그리고 오른쪽에는 사일로화된 각 테넌트에 대한 별도의 네임스페이스가 있습니다.
오른쪽에 있어요.하지만 여전히 모든 게 정상이야
인그레스 컨트롤러, NGINX, Istio 등 무엇이든 상관 없습니다.
여기서 어떻게 얻을 수 있는지 알아내는 데 사용하고 계신 겁니다.
이건 여기로 보내졌어요.세포의 좋은 소식은
제 말은, 갑자기 가서 우리 아키텍처를 완전히 다르게 지을 거라고 말하지 않아도 된다는 거죠.더 중요한 건 어떻게 할 수 있느냐가 관건입니다.
우리는 이 세포 안에 우리의 아키텍처를 배치하고
어떤 종류의 개조도 해야 제대로 작동할 수 있습니다.자, 여기 또 다른 개념이 세포 집단에 관한 질문입니다.제가 이걸 포함시킨 이유는 바로
이게 떠오를 것 같았는데, 거기 있어요?
그룹화의 또 다른 단위?그룹화 레이어 위에 그룹화 레이어를 놓은 것 같은 느낌이 들어요.
그룹화 레이어에서 말이죠.하지만 진실은, 거기
필요하다고들 하는 경우가 있을지도 몰라요
세포 그룹도 마찬가지죠.예를 들어, 왼쪽에 제가 넣은 것을 보실 수 있습니다.
셀 집합에 대한 계정.자, 여기서 떠오르는 아이디어는
계정 한도가 있거나 계정 한도가 있는 경우
제 셀을 확장하고 있는데 계정 한도에 도달하기 시작했어요. 그러면 다른 계정을 개설해서 다음 계좌를 개설할 수도 있겠네요.
다른 계정에 있는 세포.다시 말씀드리지만, 또 다른 레벨
하지만 간접적인 부분이긴 하지만, 이제 해야겠으니까
어떤 테넌트가 어떤 셀에 속해 있고 어떤 그룹에 속하는지 알면 더 흥미로워집니다.VPC도 이 문제에 접근할 수 있는 또 다른 방법이라고 생각합니다.
그룹화 개념도 마찬가지죠.이제 정말 큰 영역 중 하나입니다.
세포에는 아주 설득력 있는 이야기가 있는 것 같은 느낌이 들어요. 제가 말하는 거의 모든 사람들처럼요.
다중 지역에 대해 이야기할 때 가장 먼저 떠오르는 것 중 하나는, 우리가 생각해봐야 할 것인가입니다.
셀 기반 아키텍처?왜냐면 뭘 생각해보면
세포는, 세포는 다른 모든 것을 넘어서는 배치의 단위입니다.
다른 것들도 마찬가지죠.그리고 만약 우리 팀이 있다면
아키텍처를 만들었더니 갑자기 이렇게 말하죠.
“이봐요, 이제 유럽 어딘가에 배치하고 싶어요.
캐나다나 다른 곳, 어딘가에 배포하고 싶어요.
다른 지역이 있습니다. 실제로 솔루션을 호스팅하거나 일부 솔루션을 운영할 예정입니다.
그 지역에 해결책이 있어요.”글쎄요, 저는 이미 갔어요.
이 세포를 만드는 데 문제가 생겼는데, 이 세포는 이미 여기 있어요
이 집단의 세입자.저는 모든 DevOps 관련 부분을 가지고 있고, 움직이는 부분도 모두 가지고 있습니다.
그 문제를 해결해서 제대로 작동하게 만드세요.이제 그거만 알아야겠어요
다른 지역에 배포됐어요.네, 아직 해야 할 일이 있습니다.
다중 지역을 지원하면 여러분의 DevOps 스토리도 바뀌고 여러분의 환경도 바뀔 것입니다.
운영 스토리는 어느 정도.하지만 훨씬 더 간단합니다.
여기로 전환하세요, 그렇죠?이제 세포는 그냥
다른 지역에 배포한 또 다른 것은 운영 경험에도 같은 방식으로 적용되며 여전히 사용자 환경에도 적용됩니다.
DevOps도 같은 방식으로 경험합니다.제가 보기에 이것은 다음 중 하나입니다.
셀 기반 아키텍처에서 가장 매력적인 분야는
찾으실 수 있을 겁니다.좋아요, 그럼 다음은
이를테면, 이 세포들을 실제로 살린다는 것은 무엇을 의미하는지, 어떻게 크기를 조절하고, 무엇을 의미하는지를
런타임에 세포 크기를 조절하고 어떤 전략을 사용할 수 있을까요?다시 말씀드리지만, 이 분야는
제 생각엔 온갖 종류의 순열이 있는 것 같지만 그래도 해봤어요
제가 생각했던 두 가지 구체적인 것을 합치면
가능성의 연속체죠.그 중 하나가 제가 사전 프로비저닝된 셀이라고 부르는 것입니다.그리고 사전 프로비저닝된 셀은
이 예시에서는 세 개의 셀을 미리 만들겠다는 것이 핵심적인 모델입니다.그것들은 이미 만들어졌고, 비어 있고, 거기에는 아무것도 없습니다.환경 설정의 일환으로 셀을 미리 프로비저닝합니다.
설정하고 구성했어요.그런 다음 세입자가 되어 합류하게 됩니다.
저는 제 환경에 들어가서 어디에 있는지 질문합니다.
그 테넌트를 배치해야 합니다.그리고 제 온보딩 프로세스도 괜찮아 보이네요.
프로필에서는 테넌트, 테넌트 계층,
셀의 현재 구성, 어디가 가장 좋은지 적혀있어요
이 세입자를 어디에 둘 수 있을까요?그리고 그것을 셀 1에 넣으면 이 과정이 계속됩니다.아, 자, 이제 근거로
이 세입자의 프로필, 저는 그들을 세 번째 방에 넣을 것이고, 이 사람은 두 번째 칸에 들어갈 거예요.이 패턴이 여기저기서 어떻게 반복되는지 상상하실 수 있을 겁니다.그러니까 이건 정말 대단한 일이죠.
미국 전역에 임차인을 전략적으로 배치하는 것에 대해
사전 제공된 셀 세트.이에 대한 대안으로 제가 로드 기반이라고 부르는 방법이 있겠습니다.
셀 프로비저닝.이건 좀 더, 이봐요, 제가 다이나믹하게 말하자면
제 세포를 수평으로 스케일링해요.그래서 이 모델에서는 세포 하나부터 시작하겠습니다.저는 그 셀을 완전히 적재합니다.
다시 제 생각에 도달하기 전까지는
그 세포의 한계는다시 한 번 말씀드리지만,
그 한도가 무엇인지 정의하세요.그리고 그 한도에 도달하면 이제 준비하겠습니다.
온디맨드 시 다음 셀로다음 세트를 넣을게요
그 방에 있는 세입자 등등.그리고 우리는 이 과정을 반복하죠, 그렇죠?이제 현실은 균등합니다.
왼쪽에 사전 프로비저닝이 되어 있으면
그래도 모든 것을 채울 수 있는 수준에 도달할 수 있을 거예요
셀을 미리 프로비저닝했잖아.다음에 언제 할지는 아직 생각해야 할 것 같아요
세포 세트가 들어온다고요?로딩을 시작하기 위해 미리 프로비전된 셀이 세 개 더 있는 건가요?
다음 테넌트 등등.하지만 제가 가장 원하는 건
여기서 생각해보면, 당신은 뭐가 당신 건지
스케일링 전략이 뭐가 될까요?그리고 미리 프로비저닝했는데 유휴 리소스가 너무 많아서 마음에 들지 않나요? 아니면 셀에서 실행되고 있는 것이 셀에서 실행되고 있는 것이 없나요?그래서 비용도 들지 않아요.
사전 프로비저닝이 필요한 건 뭐든.따라서 결정을 내려야 합니다.
어떻게 작동할까요?이 세포의 다른 부분은
하지만 아직 얘기가 안 되는 건데, 사실은
이 세포들은 고정된 게 아니에요.생명주기가 있어요.예를 들어, 세입자들이 왔다가 사라지죠.네, 잔뜩 넣었죠
세입자들이 많은데, 이게 그 스냅샷이에요.
이 세입자들의 현재 모습은요.세포 1과 2에는 꽤 많은 사람들이 살고 있습니다.세 번째 칸은 일종의 조항이었어요.
그리고 얼마 전에 만들었고 여기에 몇 명의 테넌트를 추가했습니다.하지만 이를테면 이제 세입자가 없어질 수도 있습니다.그래서 세입자가 사라지거나, 세입자의 업무량이 바뀔 수도 있는데, 생각해봐야 할 것은
셀의 밸런스를 다시 맞춰야 할지 말지.제가 세포를 하나 가지고 있다고 상상해 보세요. 시간이 흐르면 세포는 절반 정도
그 셀의 테넌트는 떠났고 더 이상 시스템의 테넌트가 아닙니다.그냥 놔둘까요?
세입자, 저기 감방, 요점이 어디야
제가 그걸 해결해야겠다고 결심한 건가요?그리고 이 특별한 예에서 제가 말했죠. 이봐요, 제 핸드폰이 하나 있어요.
용량이 많아요. 두 번째 칸이 꽉 차기 시작했어요.세입자를 옮길 거예요
두 번째 방에서 첫 번째 칸으로더 좋은 예가 되죠.
하지만 시끄러운 이웃 상황을 상상해 보세요.예를 들어, 저는 첫 번째 칸을 채웠어요.이 세입자는 시작부터 시작했어요
정말 작은 세입자로서요.많은 돈을 벌지는 못했지만 지금은 소비하고 있습니다.
어마어마한 자원.주변 환경이 시끄럽고 제 핸드폰이 너무 꽉 찼어요.저 집무실, 저 세입자를 밖으로 옮겨 문제가 덜 발생하는 다른 방으로 옮길 수 있을까요?자, 이제 메카니즘은
이것을 구현하는 것은 쉽지 않을 것입니다.예를 들어, 아키텍처와 셀, 방법에 따라 달라집니다.
테넌트는 셀에 바인딩되어 있습니다.하지만 이건 아니었어요.
일종의 자유로운 개념 때문이죠.여기에 몇 가지 작업이 있습니다.
이게 제대로 작동하도록 하기 위해서요하지만 저는 그게 사실이라고 생각합니다.
여러분이 이 세포들의 전체적인 생애주기가 어떠한지, 그리고 어떻게 돌아가는지 생각해 보는 것이 매우 중요합니다.
시간이 흐르면서 진화하는 거죠.자, 이제 샤딩 등에 대해 말씀드렸는데, 이걸 만들어 보죠.
조금 더 구체적으로 말하자면, 그게 실제로 무엇을 의미할까요?
테넌트를 온보딩하기 위해서죠?먼저 이 컨트롤 플레인부터 시작하겠습니다.저희 강연을 많이 보셨다면, SaaS를 이 두 부분으로 나누겠습니다.우리는 항상 컨트롤 플레인에 대해 이야기하는데, 바로 크로스 커팅입니다.
멀티테넌트 환경을 관리하는 모든 것의 수평적 부분이죠.그러면 우리가 알아가는 것을 볼 수 있을 것입니다.
앱 플레인에 대한 이 개념이 전부 실재하는 곳입니다.
예를 들어 앱 스케일링과 모든 격리 같은 것들이죠.
앱이 살아납니다.온보딩은 항상 일어납니다.
컨트롤 플레인 안에서, 그리고 우린 언제나 볼 수 있겠지만
모든 예제에는 온보딩이라는 개념이 있습니다.
컨트롤 플레인 내부.그리고 이러한 온보딩을 통해 움직이는 모든 부품의 마찰을 자동화하고 제거할 수 있습니다.
SaaS 아키텍처는 시스템에 새 테넌트를 도입하기 위해 수행하는 모든 작업을 원활하게 수행할 수 있는 방법입니다.자, 이제 소개할 때
시스템에 새 테넌트가 들어왔으니, 온보딩은 세포에 대해 생각해야 하는데, 그게 무슨 뜻일까요?
세포를 이용해 이 작업을 수행하려면, 세포가 우리의 온보딩 방식을 어떻게 변화시킬까요?
세입자가 우리 환경에 들어오나요?이제 테넌트가 들어와서 시스템에 온보딩하고 싶어할 때 아마도 우리가 생각하는 것 중 하나는
이 세입자가 어디에 착륙해야 하는지 스스로에게 물어볼 거예요.그리고 이것은 가능한 한 가지일 뿐입니다.
이걸 구현하는 방법.컨트롤 플레인 안에 셀 인사이트 서비스가 있을 수도 있겠네요.
이제 이건 새로운 서비스인데, 근본적으로 현재 어떤 일을 하고 있는지 알려주는 거죠.
세입자 프로필?그러면 기본적으로 다음과 같이 적혀있을 것입니다.
당신은, “이봐, 이 모든 것과 프로필을 바탕으로
테넌트와 그 밖의 모든 것, 이 특정 테넌트에 가장 적합한 배치 전략은 다음과 같습니다.”그러면 이렇게 말할지도 모릅니다. “아, 그냥
첫 번째 칸에 넣으세요. 착륙시키기에 딱 좋은 곳이죠.다 괜찮고 우린 끝났어.”글쎄요, 아니면 다시 돌아와서 이렇게 말할 수도 있습니다. “이봐요, 사실 필요해요.
새 셀을 준비하기 위해서요그 테넌트를 새 셀에 배치해야 하고 그 절차를 진행하겠습니다.”자, 이제 이 부분은
이건 정말 간단하지만 쉽게 간과할 수 있습니다. 일단 세입자를 셀에 배치하면 어디에 세입자를 배치했는지 기억해야 한다는 것입니다. 왜냐하면 많은
라우팅을 통해 수행할 다운스트림 작업과 많은
우리가 여기서 할 다른 일들은 그것을 기억하는 것에 달려 있습니다.그래서 우리가 돌아오면, 일부분적으로는
테넌트 관리에서 우리는 항상 세입자에 대해 이야기합니다.
경영진은 테넌트 상태 및 모든 테넌트 정책, 그리고 테넌트에 관한 기타 모든 데이터를 보유하고 있습니다.여기에 관리하고 저장해야 할 정책 데이터가 하나 더 있습니다.그리고 데이터는 테넌트가 어떤 셀에 매핑하는지를 보여주는 테넌트 셀 매핑입니다.여기에 더 많은 데이터가 있을 수 있습니다.
어떤 URL의 진입점인지, 어떤 다른 데이터가 있을 수 있는지 등등
드디어 해낼 수 있게 됐으면 좋겠어요
여기서 테넌트에 액세스하거나 테넌트에 배포하려고 하면 해당 정보가 어디에 있는지 알 수 있을 것입니다.그래서 이 온보딩 스토리를 통해 제가 생각하기에 가장 논란의 여지가 많은 분야로 빠져들기 시작합니다.
이 주제에서 더 논쟁의 여지가 있는 부분은 괜찮습니다. 컨트롤 플레인이 생겼다는 거죠.이제 셀이 생겼고 이 컨트롤 플레인이 셀을 공급하고 설정합니다.하지만 일반적으로 셀이 없는 SaaS 솔루션을 예로 들자면 컨트롤이 있다고 말할 수 있습니다.
비행기 안에 앱 플레인도 있고, 그 앱 플레인 안에 있는 어떤 것이든 테넌트별 네임스페이스 혹은
별도의 서버리스 함수 또는 ECS, 저는 다른 모델을 사용했고, 테넌트마다 별도의 계정을 사용했습니다.뭐가 됐든, 다 있어요
보통 이 이야기의 반대편에는 논리적인 앱 플레인이 하나 있는데, 그 앱 플레인은
컨트롤 플레인과 통합하면 앱 플레인에서 텔레메트리를 다시 가져옵니다.이것이 바로 우리가 하는 방식입니다.
보통은 그렇게 그리죠.자, 이제 셀이 생겼습니다. 각 셀에는 자체 앱 플레인이 있어야 합니다.이제 우리는 이것이 용어로 무엇을 의미하는지 알아내야 합니다.
저 비행기를 만든 책임에 대해서요?보통은 우리가 할 거라고 말할 테니까요.
앱 플레인을 한 번 만들어보세요.기본 사항의 일부입니다.
프로비저닝.이제 끝났어요.이제 할 말이 있어요
앱 플레인을 만들어야 합니다.그리고 만약 제가 즉석에서 세포를 만든다면, 바로 생성해야 할 거예요.
제 작업 흐름에 새로 생겨날 수도 있는 앱 플레인
분산되어 있던 온보딩.이에 대한 책임이 변경됩니다.사실, 보시면
우리의 레퍼런스 아키텍처는 다음과 같습니다.
역할이 무엇인지에 대해 고심하고 있는 것을 보실 수 있을 겁니다.
컨트롤 플레인의 책임이요?역할은 무엇이고
앱 플레인의 책임인가요?네가 가면 내가 할게
이번 주 후반에 SaaS 빌더 툴킷이라는 것에 대해 이야기해 보세요. 그건 저희가 새로 만든 것입니다.그리고 이걸 아주 별개의 컨트롤 플레인과 앱 플레인으로 나누는데 컨트롤 플레인이 소유합니다.
온보딩의 일부이고 앱 플레인이 소유합니다.
온보딩의 일부.그리고 정말 많은 것들이 있습니다.
논의는 거기서 벗어나죠.자, 이제 셀, 전체를 더하세요.
라이프 사이클의 또 다른 논의는 어떻게 진행되는지에 대한 논의입니다.
이런 것들이 생겨납니다.자, 여기 몇 가지가 있습니다.
생각해 볼 수 있는 방법이죠.그 중 하나는 다음과 같이 말할 수 있겠죠.
세포는 논리적인 구조체입니다.누가 어떤 세포에 속하는지 확실히 알 수 있습니다. 그리고 저는 이것을 다음과 같이 사용합니다.
규모 단위 등등.하지만 컨트롤 플레인에서
앱 플레인 관점에서는 오늘날과 같은 네이티브 인터랙션일 뿐입니다.그냥 여러 앱 플레인과 통신할 거예요
한 개만 있는 게 아니라하지만 모든 면에서 세포는
컨트롤 플레인에서는 최소한의 역할을 하고 있습니다.
앱 플레인 통합.이제 다른 접근 방식을 취하면, 여기서부터 시작하겠습니다.
한 가지 미심쩍게 들자면, 셀이 테넌트에 생명을 불어넣는 데 필요한 자원의 라이프사이클을 요약하고 있는가입니다.그 중 일부를 밀어붙일 수 있을까요?
책임을 감방에 맡기나요?이제 세포는 그렇지 않다는 뜻이죠.
그냥 그룹화 구조일 뿐이죠.세포에는 실제로 인프라가 있습니다.셀의 서비스에는 BITS가 있습니다.게이트웨이가 있을 수 있습니다.우리는 온갖 종류의 것들을 보게 될 것입니다.
저기 착륙할 수도 있어요.그리고 바로 그 부분이 바로 여러분이
제가 이 길을 가면서 이 결정을 내려야 합니다. 세포가 단순한 목적지이자 조직적 구조에서 벗어나나요?
그 중 일부를 실제로 요약해서 소유하는 것까지
그 세포 안에 기능이 있다고요?그래서 이 경우에는 셀에 API를 넣었습니다.셀은 온보딩 이벤트를 받고, 그 다음에는 셀에 있는 서비스가 수신됩니다.
이를 실현하는 것이 무엇을 의미하는지는 세포가 결정합니다.또한 원격 측정도 전송합니다.
저기로 돌아와요어떻게 되돌아올지는 세포가 어떤 결정을 내리느냐에 달렸어요.
이걸 포착하기 위해서요.만약 우리가 세포를 기반으로 한다면
사실 원격 측정은 테넌트 외에도 셀 원격 측정을 실행하기 위해 이러한 서비스가 필요할 수 있습니다.
이를 통한 텔레메트리.그래서 저한테는 권리가 없어요
아니면 이 선택이 틀릴 수도 있죠.에서 시작할 수도 있습니다.
왼쪽으로 가다가 결국 오른쪽에서 뭔가를 해보기로 결심하죠.
하지만 이건 큰 선택이에요. 제 생각엔 이 세포 기반 모델에서처럼 말이죠.다른 영역은
이 같은 문제가 흥미로워지면
디플로이먼트를 보세요.이제 저한테는 세포도 있고
새로운 마이크로서비스를 배포하기 위해서요.그래서 제 개발팀은, 누군가의
새로운 마이크로서비스를 만들었죠. 그 마이크로서비스는 배포가 필요하고
이러한 서비스에 배포되었습니다.간단히 말씀드리자면, 제 파이프라인이 뭔가를 알고 있다는 거죠.
제가 가지고 있는 세포에 대해서요.매핑이 있고 세포가 몇 개인지 알 수 있습니다.
제 환경에 있습니다. 그냥 모두에게 배포하겠습니다.
셀 세 개면 끝났어요.하지만 현실은 그 세포 안에 있어요. 어떤 배포에 있느냐에 따라 달라지죠.
지금까지 취하신 전략입니다. 사일로화된 리소스와 풀링된 리소스가 뒤섞여 있는 환경을 상상해 보십시오.그리고 그것은 역동적인 관계죠, 그렇죠?정해진 건 없어요.저기 있어요
한 풀에 두 개가 격리되어 있습니다.내일은 네 개의 사일로가 생길 수도 있고 몇 개 더 있을 수도 있습니다.
수영장에 세입자가 있는 거 맞죠?그 구성이 세포 안에서 항상 바뀌고 있을 수도 있어요.자, 이제 누가 소유한건지?
이거 배포하는 거 맞죠?세포에서 누가 사일로에 갇혀 있는지, 누가 여기 모였는지 안다고 하는 거예요.왜냐면 배치 중에
모델, 배포할 때 알아야죠, 아, 그래요
이 두 사일로에 전달하고 이걸 배포할 때 이 풀로 전달해야 합니다
새로운 마이크로서비스 맞죠?그게 책임인가요?
셀 내부 소유인가요, 아니면 파이프라인이 알고 있나요?
그 매핑이 뭔가요?매핑을 외부로 더 많이 밀어낼수록 셀 구현이 다른 사람들에게 더 많이 분산됩니다.하지만 어쩌면 충분히 간단할 수도 있습니다.
그건 문제가 아니에요.하지만 이제 이에 대해 생각해 보고 전체 배포 모델에 어떻게 분산되는지 알아내야 합니다.다시 말씀드리지만, 누가 소유할까요?A
중요한 선택을 해야 합니다.자, 어떻게 보일지 좀 알려드리자면, 세포 안에 무언가가 살았을 때 제가 가져갔을 때
이것의 극단적인 예시죠.제가 셀에 어떤 구현을 하기로 결정했다고 가정해 봅시다.자, 이제 세포는
공급 인프라, 서비스 등을 제공합니다.
제 앱 플레인과는 별개의 내부 특성이죠.그리고 이 경우에는 셀이 하나 있습니다.그 칸이 꽉 찼다고 가정해 봅시다.온보딩 프로세스를 시작했어요.감방으로 가겠다고 했잖아
프로비져닝하고 뭘 해결해야 하는지 알아봐야겠어
이 새 테넌트의 배치.이 인사이트를 살펴보겠습니다.
그리고 이 테넌트를 어디에 어떻게 배치해야 하는지 파악할 수 있는 지표도 있고요.이 특정 예에서 새 셀이 필요하다고 결정했다고 가정해 보겠습니다.자, 이제 이 새 셀을 프로비전할 때 저는 단순히 셀을 만드는 것이 아닙니다. 여기 셀 2와 매핑이 있습니다.
두 번째 셀은 끝났어요.사실 그 안에 필요한 건 뭐든 준비할 거예요세포에 특화된 다른 건 뭐예요?
인프라가 제대로 작동해야 합니다.그리고 이것은 임차인이 들어오기 전입니다.앱 플레인을 프로비전해야 하나요?게이트웨이를 설정해야 하나요?
그러면 셀 내의 라우팅이 잠재적으로 처리될 수 있는 건가요?특정 설정을 해야 하나요?
배치에 매핑하는 방법을 알아내는 배포 메커니즘
그 셀 안에 테넌트가 있다고요?극단적인 예죠.너무 많지 않았으면 좋겠어요...생각하기 싫진 않을 것 같아요
결국 이 모든 것이 제대로 작동할 수 있는 거대한 클러스터 인프라를 갖게 된다는 거죠.하지만 현실적으로 생각해 볼 수 있습니다.
그 지식 중 일부를 클러스터에 적용하고 싶을지도 모른다는 거죠.이제 제가 테넌트를 온보딩하면
여기 있는 나머지 세입자들은 휴대폰과 모든 걸 가지고 있어요
다른 부분들은 다 끝났으니 이제 실제로 배치할 수 있겠네요
세입자가 새 감방 안에 있어요.그러니까 이 과정의 절반은 분리된 것이죠.셀을 한 번 공급하고 세포의 모든 구조를 설정하는 거죠. 두 번째 단계는 공급입니다.
세입자가 그 공간에 들어와요.다시 말씀드리지만, 제 생각에는
우리 팀은 아마 우리처럼 이 문제에 대해 엄청 많이 얘기할 거예요.
앞으로 나아가서 여기의 경계가 어디인지 알아내세요.
모범 사례는 무엇일까요?하지만 한 지역은...아, 그나저나 저는 여기서 마지막 단계를 남겼어요.개발자가 성공했습니다.
배포 측면에서는 그게 전부입니다.그러니까 절반은 온보딩이고 절반은 배포입니다.자, 그럼 다음은
살펴봐야 할 것은, 세포가 라우팅에 어떤 영향을 미치는가입니다.셀 기반의 멀티테넌트 아키텍처를 살펴보면 라우팅이 다음과 같다는 것을 알 수 있습니다.
이 부분도 정말 많은 시간을 들여야 하는 부분이죠.
논의 중이죠, 그렇죠?어떻게 할 수 있죠, 그냥 당신이
셀은 전혀 없다고 했고 방금 EKS 환경이 있고 네임스페이스가 있고 하위 도메인이 있다고 말했습니다.
내 테넌트로 들어오는데 어떻게든 내 테넌트를 얻어야겠어
해당 테넌트 하위 도메인을 특정 이름으로
이 테넌트를 위한 공간.그 문제는 어떤 상황에서든 존재합니다.그래서 우리는 항상 이 일을 해야 합니다.하지만 이제 또 하나 생겼습니다.
여기 간접적인 부분이 있는데, 이제 이 테넌트들이 감방에 있다는 거죠.따라서 어떤 인프라에 매핑해야 하는지만 알 필요가 없습니다.어떤 셀에 매핑해야 하는지 알아야 해요.그러니까 어떤 라우팅 도구든
우리는 API 게이트웨이, 이스티오, 인그레스, NGINX 등 무엇이든 사용합니다.이제 그래야 할 것이 있습니다.
이 테넌트들을 그들의 셀에 매핑하고 잠재적으로 다른 곳으로 이동시킬 수 있는 방법을 알고 있는 무언가
하위 도메인이나 베니티 도메인 등 라우팅이 제대로 작동하도록 만든 다음 JOT를 찾아서 전송하세요.이 경우에는 항상 대화를 나눕니다.
여기서는 테넌트 컨텍스트를 통과하는 방법으로 JOT에 대해 설명합니다.그리고 그 테넌트가
컨텍스트가 셀로 흐르는데, 이러한 환경이 풀링된 환경이라면 완전히 풀링된 환경을 셀로 바로 유입하여 작업을 완료할 수 있고 모든 것이 잘 작동할 수 있습니다.하지만 이러한 환경 내에도 사일로화된 워크플로우가 존재한다면 어떨까요?이제 다시 본론으로 돌아갑시다.
또 다른 차원의 간접 반응이죠.라우팅이 더 있나요?
셀의 라우팅 또는 라우팅은 다음 위치에서 수행됩니다.
외부 계층은 인프라가 무엇인지 알고 있습니다.
그 셀 안에 어떤 테넌트가 있는지,
거기서 매핑을 성공적으로 했나요?우리가 겪었던 것과 똑같은 문제가 있었습니다.
아까 얘기했더니, 난 분명히 싫어
라우팅에 대한 라우팅과 이 모든 라우팅 레이어들이 진행되고 있습니다. 하지만 이것은 셀 기반 세계에서 내려야 하는 결정입니다. 특히
사일로화된 환경을 만들고 있죠.자, 이걸 그냥 가져가면
간단한 버전을 가져왔는데 앞서 말씀드렸듯이 이 새로운 아키텍처들은
결국 셀이 있든 없든 거의 비슷해 보입니다.보시면 아시겠죠.
저희 EKS를 보면, 죄송하지만, 서버리스 버전을 보세요.
참조 아키텍처를 보면 기본적으로 함수 앞에 API 게이트웨이를 두고 다음과 같은 환경으로 라우팅하는 것을 볼 수 있습니다.
적절한 함수들이 그 안에 들어 있습니다.이 모델도 마찬가지입니다.API 게이트웨이가 생겼지만, 지금은 API 게이트웨이가 있습니다.
셀 바로 앞이 아니라 바로 앞에 있습니다.그리고 문제는, 다른 API가 있느냐는 거죠.
셀 내부의 게이트웨이?저는 그렇게 하지 않는 편이 좋을 것 같아요.다시 한 번 말씀드리지만, 통합하면 모두 잘 작동합니다.사일로드는 까다로워지는 부분입니다.이제 다른 한 명이 여기 있어요.
그리고 또 다른 분야는 라우팅에 대해 이야기하기 때문에 점점 더 많은 회사들이 “음, 일부는 제 시스템의 일부라고 말하는 것을 볼 수 있습니다.
아니면 제 테넌트 중 일부가 다른 테넌트에서 잠재력을 발휘해야 할 수도 있습니다.
제가 관리하지 않는 환경이죠.그냥 있을 수도 있겠네요
AWS의 다른 계정은 온프레미스에 있을 수 있고
전부이고 많은 것이 패턴입니다.어디에서든 이를 SaaS라고 부릅니다.그리고 점점 더 많은 사람들이 이 문제를 해결해야 하는 것을 볼 수 있습니다.
원격으로 실행되는 무언가의 설치 공간이 더 많이 분산되어 있습니다.
로컬에서 실행되는 것도 있고요.뭐, 적어도...건축으로 가는 세포
완벽하게 작동하지는 않지만, 어디를 보면 알 수 있습니다.
셀 기반 아키텍처에는 많은 기회가 있습니다.
정말, 특히 이런 것이라면
이봐, 저한테 있는 세입자 그룹이 있는데
다른 계정을 운영하기 위해서요.세포는 자연스러워집니다.
점프를 할 수 있는 방법이죠.이제 논리적이고
가장 좋은 시나리오는 마지막 시나리오로 저장해 두었죠.예를 들어, 장점들은
셀 기반 아키텍처의 분명한 장점은 무엇일까요?
멀티 테넌시의 경우 그 중 하나가 분명히
시끄러운 이웃 맞죠?도전을 생각하면
시끄러운 이웃을 쫓는 것, 그리고 만약 그렇게 해야만 했다면
멀티 테넌트 환경에서는 정말 힘들 수 있어요. 왜냐하면
오늘 시끄러운 이웃은 누구고, 내일은 시끄러운 이웃일까요?어떻게 하면, 어떻게 할 수 있을까요?
우리는 항상 과잉 프로비저닝을 피해서 문제를 해결하죠.
이 시끄러운 이웃들?예를 들어, 우리가 한정되어 있다는 사실이랄까요. 그리고 제가 이미 얘기한 바로는
잠깐 얘기하자면, 우리가
노이즈가 있는 이웃의 폭발 반경을 셀로 제한한다는 것은 시끄러운 이웃이
문제는 그다지 문제가 되지 않습니다.여전히 시끄러울 수 있습니다.
세포 안의 이웃이지만 범위와 성격은
시끄러운 이웃에 대한 노출은 훨씬 적으며, 그럴 가능성이 있습니다.
충격은 발생하더라도 세포 안에서 일어납니다.모든 테넌트에게 영향을 미치지는 않습니다. 해당 셀의 테넌트에만 영향을 미칩니다.그리고 대부분의 경우 가끔은
이런 이유 하나만으로도 사람들이 그렇게 할 수 있는 이유죠.
멀티테넌시를 위한 셀 기반 아키텍처를 선택하기만 하면 됩니다.
시끄러운 대처 정책이 있기 때문입니다.
이웃이 훨씬 더 단순해집니다.테넌트 격리는 또 다른 방법입니다.
여기서는 사람들이 셀 기반 아키텍처에 대해 많이 이야기하고 셀을 사용하는 것을 볼 수 있습니다.
이 문제를 해결하기 위한 한 가지 방안으로 이봐, 경계를 정할게
이 세입자들 사이에서요.세포를 하나의 방법으로 사용하겠습니다. 우리 환경의 또 다른 고립층이죠.그리고 정말 중요한 것은
여기서 얻을 수 있는 장점은 바로 지금,
라우터가 있으면 들어와서 라우팅하고 이제
테넌트 컨텍스트와 셀 컨텍스트가 모두 있습니다.그래서 제가 프로비전할 때
세포와 제가 이 세포들을 설치했는데요, 여러분이 할 수 있는 것 중 하나는
이제 제가 할 일은 세포 격리 정책을 만드는 겁니다.아직 저희가 해보지 못한 것이 있습니다.
전에 얘기한 적 없는데보시면 아시겠지만, 이게
기존에는 좋아요, 이봐요, 저는 VPC를 설정하고
VPC를 설정할 때 격리를 설정했습니다.
해당 VPC에 대한 정책입니다.자, 이제 해야 합니다.
세포를 위해 이렇게 하세요.그러니까 어떤 그룹화를 하느냐에 따라 달라지죠.
사용한 구조입니다.하지만 셀 정책을 설정할 때 셀을 프로비전할 때 설정한 다음 설정했습니다.
제가 어떤 능력도 갖고 있지 않도록 하기 위해서요.
세포 사이를 오가는 거죠.그래서 우리가 건물을 지을 때마다
멀티 테넌트 환경의 모든 격리 구조,
우리는 모든 계층에서 우리가 제대로 작동하는지 확인하고 싶습니다.
어떤 경계도 막아야죠.이 경우에는 다음과 같이 할 수 있습니다.
여기서는 격리를 통해 좀 더 세분화된 격리 모델을 만들어 보겠습니다.
세포 수준에서 말이죠.하지만 기존 테넌트도 있습니다.
도입되는 격리 정책 (주로 IM인 경우가 많음)
이러한 리소스가 사일로화된 경우, 서버리스 리소스인 경우
배포 당시에는 IM 정책을 연결할 수 있었습니다.
Lambda에서 이러한 기능의 일부인 개별 함수에 대해 설명합니다.그리고 이렇게 하면 셀 내부 크로스오버도 방지할 수 있습니다.하지만 그건 우리가 이전에 이미 사용했던 전통적인 기법이에요.
세포 모델 안에서 실현됐죠.마지막 것, 그리고 이건
하나는 세포 기반의 경계를 다루는 전형적인 순수주의자들 중 많은 사람들이 숫자에 대해 생각하는 것이죠.
그 이유 중 하나는 회복력입니다.좋아요, 그리고 뭐가 멋진가요?
셀 기반 아키텍처는 자연히 가능하죠.
스코프 레질리언스가 있긴 하지만 이색적인 것은 없습니다
정말로 그것에 대해 말하자면, 이봐, 라고 말하는 것 말고는
이 모든 세입자들을 한 감방에 집어넣으면 무슨 일이 있어도 그 세포 안에서 무슨 일이 생기면 그 감방의 폭발적인 훈련이
그 세포 안에 이슈가 들어있어요.이건 일종의
사람들이 볼 수 있는 탄력성의 격벽 모델
말하자면, 저는 배를 가지고 있고, 배에는 격벽이 있습니다.배가 무언가에 부딪히면
격벽 하나가 물로 가득 차더라도 배는 여전히 떠 있습니다.딱 그거 하나, 뭐 그런 건
그러니까, 문제는 그 한 벌크헤드에 국한된 거죠.그리고 제게는 여기도 빵과 버터일 뿐인 또 다른 분야입니다.당연한 이유
사람들은 그냥 이런 이유로 이걸 선택할 거예요
우리 사업을 위해 말하자면, 우리는 항상 어려움을 겪고 있습니다.
정전이 발생하면 그 정전을 막고 싶습니다.또는 배포를 진행했는데 배포가 누군가에게 영향을 준다면 그 하나의 셀로만 제한될 수도 있습니다.사실, 일반적으로 셀의 경우, 앞서 배포가 문제라고 이야기했듯, 이제 웨이브 배포와 AB 배포에 대해 생각할 때 셀은 배포 대상을 더 신중하게 지정할 수 있는 방법이 될 수 있습니다.그리고 복원력도
배포와 관련하여 발생하는 모든 종류의 문제는 다음과 같습니다.
셀 수준에서 적용되죠.이제 다른 영역은
생각해 봐야 할 것은 세포가 수술에 어떤 영향을 미치는가입니다.
조직에 맞죠?여기서 세포는 두 가지 차원으로 이루어져 있습니다.우선,
세포에서 원격 측정하고 세포의 데이터를 집계하는 것이 필요합니다.새 데이터가 필요할 거예요
우리 경험에 비춰봤을 때 드러났죠, 그렇죠?그리고 우리는 세포가 데이터를 보내는 새로운 방법을 찾아야 할 것입니다.
그들의 경험에 대해서요여기에 집계할 새로운 것들이 있습니다.그래서 오버헤드가 좀 더 생겼습니다.
여기서는 모든 것을 얻기 위해 모든 작업을 구현하는 것입니다.
배관이 제자리에 있어요.하지만 또 다른 건
세포를 일종의 운영 단위로 추가해야 합니다.
조직 내부의 가시성.이제 어떻게 하는지 알고 싶어요.
세포가 제 기능을 하고 있나요?세포가 불안정한가요?시끄러운 이웃이 있어요?
세포 안에서 활동이 벌어지고 있나요?셀을 폐쇄해서 더 이상 새로운 세입자가 어떤 것에 기반해서 그 셀에 들어가지 못하게 해야 할까요?
거기서 그런 일이 벌어지고 있는 건가요?근본적으로, 우린
여러분의 대시보드에 세포가 나타나길 원하시나요?
제가 물어볼 수 있는 방식으로 멀티테넌트 환경을
행동 및 예상 문제에 대한 질문
세포가 생겨나고 있는데 대체로 제 세포 샤딩 전략이 효과가 있는 걸까요?제 셀이 스케일링되고 있나요?
전략이 정말 효과가 있나요?왜냐하면 일반적으로 여기서는 접근 방식을 크게 발전시킬 것이기 때문이죠.이런 통찰력이 없다면 이해가 안 되실 겁니다.
작동 중인데 효과가 없나요?뭐가 잘못됐어, 뭐가 고장났어,
뭐가 좋고 뭐가 안 좋은가요?음, 그리고 가장 어려운 건
이것의 일부는, 이를테면, 세포 전략이 뭔가요?누구한테도 말씀드리고 싶은데요, 만약 이 공간에 들어가서 물게 된다면
세포 전략에서 벗어나면 결정을 내리겠지
셀 기반 배포를 사용하세요. 세포의 진행 방향부터 시작해서 거꾸로 작업해야 합니다.
제 경험에 적용해 볼까요?세포 자체가 멋지다는 거 말이에요저는 세포 기술을 좋아해요.
탄력성이 좋아요.그냥 세포 검사하러 가자.다 됐어요.정말 일해야 돼요
거꾸로 말하자면 스케일링의 성격은 무엇일까요?사용자 환경에는 몇 개의 테넌트가 있나요?스케일링 특성은 무엇인가요?
조직의 규모요?가려고 하는 거예요?
여러 지역에 발자취를 남기시나요?이미 알고 있는 시끄러운 이웃 문제가 있나요?아니면 조직에 일종의 계층화 전략이 있나요?
계층화 전략을 실현하기 위한 방법으로 다양한 셀을 사용하고 싶으신가요?해야 합니다. 그리고 이건 제가 하는 모든 강연에서 제가 하는 말인데, 여러분들은 이들에게 물어보셔야 합니다.
비즈니스 질문을 먼저 하고 그냥 세포 뒤에서 물어보는 게 아니죠.이제 건축가인 당신은
기업은 우리가 셀 기반 아키텍처를 원한다는 사실을 모를 거예요.예를 들어, 거기로 가보죠.아직 네 것이 될 거야
왜 셀 기반 아키텍처가 좋은 아이디어인지 설명해 줄 수 있을까요?왜, 어떻게 해야 하는지 분명하게 설명해야 할 거예요
이걸 고려해서 어떤 요인과 어떤 가치를 가져올지 생각해 보세요
비즈니스에 가져다 주죠.하지만 일을 잘하면
그걸로 봐서, 일부 조직에서는 이렇게 생각해요.
정말 잘 맞을 거예요.사실, 이런 이야기를 하지 않은 것에 대해 죄책감을 느끼는 것 같아요.
세포 기반 아키텍처에 더 가까워요. 그냥 방에 있으니까
일부 조직에서는 그렇지 않을 수도 있습니다.
수만 명의 테넌트들이 복잡성을 모두 부담할 필요는 없습니다.
모든 미친 스케일링 및 배포 및 기타
우리가 가지고 있는 기술이죠.제가 그걸 지적했더라면
특정 조직을 위한 셀 기반 모델을 더 많이 사용했다면 복잡성이 줄어들었을 것입니다.우리가 추구하는 많은 것들을 단순화했을 거예요.다시 말씀드리지만, 모든 사람에게 맞는 것은 아닙니다.어떤 사람들은, 이 세포
적합하지 않아요.괜찮아요.이 전략의 일부는
예를 들어, 세포는 우리에게 맞지 않아요.그건 완전히 괜찮아요.그러니까, 모든 것들이
전에도 말씀드렸지만, 여전히 모든 것이 적용되고, 여전히 효과가 있습니다.여기에 셀 기반 레이어를 적용하고 싶을 뿐이죠.여러분의 목록에 추가하고 싶습니다.
결정을 내릴 때 생각하고 있는 사항들에 대해
제가 이 일을 해야 할까요?그럼 이제 우리가, 그리고 너도
현재의 환경을 보면, 우리가 이렇게 말하는 것을 보게 될 거예요.
사일로를 하고 있는데, 제가 수영장을 하고 있는 건가요?제가 브리지를 하고 있는 건가요?제가 세포를 만들고 있는 건가요?그리고 그 중 어떤 조합이 우리에게 잘 맞을까요?그리고 정말, 그리고
그건 그렇고, 제가 여기에 눈금을 그렸는데 그 뜻은
스케일은 방향을 바꿉니다.그렇다고 방향을 바꾸지는 않아요.여기에 이걸 가지고 눈금을 그려 보였어요.그리고 장단점이 뭔지 생각해 보셨으면 좋겠어요.분명히 기술적 장단점이 있고, 사업상의 장단점이 분명히 있습니다.예를 들어 셀은 확실히 과잉 프로비저닝된 모델일 수 있습니다.쉽게 결국에는 다음과 같은 결과가 나올 수 있습니다.
오버프로비저닝이 더 심해졌죠.반면, 만약 제가 한 가지 문제를 겪고 있다면
완전히 통일된 환경이라 정책이 완벽해요.좀 더 세밀하게 조정할 수 있어요.
좀 더 정확한 튜닝이 가능해요.그러면 효율성이 더 좋아질지도 몰라요.그냥 노력과 그에 따르는 에너지를 받아들이기만 하면 돼요
그걸 제대로 활용하면서요.배포 유연성이 필요한가요?더 많은 배포가 필요합니다
지금보다 훨씬 유연하죠.말씀드린 것처럼 여러 지역을 다니고 싶어요.세포 기반 모델의 멀티 인터렉션
저한테는 잘 안 맞아요.그리고 프로비저닝 프로세스는 우리 환경에 비해 너무 복잡할 것입니다.이 모든 것이 여러분의 몫입니다.
저울을 달고 스스로 결정하고 싶어요.여기서 몇 가지 요점을 말씀드리죠.세포가 새로운 모델을 나타내는 것을 보셨으면 좋겠습니다.새로운 건 아니에요.엄밀히 따지자면
다시 말하지만, 이미 존재해 왔지만, 제가 보기엔 마치
여기서 생각해야 할 새로운 것들이 많아요. 적어도 저한테는, 아마 여러분 모두가 그랬을지도 몰라요.
생각해 봤지만 아직 생각해보지 못했어요.하지만 저한테는 정말 많은 게 있어요.
여기서 생각해볼 만한 새롭고 흥미로운 점들은
가능성에 대해 꽤 기대가 되네요.죄송합니다. 클릭이 늦어졌네요.확실히 말씀드리자면
우리는 우리가 인정하는 이 공간 속으로 헤매고 다닙니다.
세포는 또 다른 차원의 간접 또는 경험입니다.예를 들어, 그냥 말할 수는 없죠.
이 모든 것이 무료로 제공됩니다.하지만 솔직히 말해서, 심지어
셀 기반이 아닌 환경에서는 여전히 많은 간접 참조가 발생합니다.사일로화된 환경과 풀링된 환경이 있습니다.하지만 여기 또 다른 부분이 있어요. 좋아요, 이제 감방으로 가서 어떻게 벗어날 수 있을까요?
세포 안에서 특정 자원으로 가는 세포?이게 다 당신 것들이에요
생각해 볼 필요가 있어요.제 생각에 세포는 자연히 자연스러운 것이고, 그 특성상 규모 제한을 잘 다루는 경우가 많다고 생각해요.그나저나 규모 제한은
이웃 한계에 시끄럽게 들리세요.이는 규모 문제가 아닐 수 없습니다.
사람들이 겪고 있는 문제일 수도 있고, 진짜일 수도 있습니다.
규모 (예: 계정 한도 및 기타 사항)
문제가 발생할 수도 있습니다.그리고 제 생각엔 그랬던 것 같아요.
이겨서 죽었죠. 하지만 지역 및 원격 배포요.새로운 배포 유닛이에요.독립형 배포 단위입니다.새로운 유연성을 제공합니다.
새로운 옵션을 제공하고, 할 수 있는 기회를 제공합니다.
결국, 투자하면 어떻게, 어디에 대해 생각할 수 있는 새로운 방법을 찾을 수 있게 됩니다.
임차인을 배치하는 거죠.그리고 확실히 말씀드리고 싶은데요, 의도적으로 말씀드리고 싶은게
이건 논리적인 구조예요.당신의 깨달음과 당신의
마일리지는 어떤 것을 선택하느냐에 따라 달라집니다.
세포를 그룹화하는 방법.그 구조물이 어떠해야 하는지에 대한 더 많은 패턴을 알려드리기 위해 우리가 할 수 있는 일이 더 많다고 생각합니다.하지만 항상 VPC이거나 항상 계정이라고 가정하지 마세요.예를 들어, 떠나야 할 것 같아요.
그리고 어떤 종류의 그룹 단위에 정말로 의존하고 싶은지 결정하세요.그리고 마지막으로 해야 할 일은
이 모든 논쟁에서 이 세포와 비세포 양쪽의 논쟁에서 여러분은 항상 스스로에게 물어보셔야 합니다.
복잡성과 가치?예를 들어, 아키텍처 트랙에서 제가 하고 있는 또 다른 강연은 마이크로서비스의 적절한 크기 조정에 관한 것입니다.그 중 많은 부분이 핵심입니다.
어떻게 하면 복잡성에 대한 수익을 얻을 수 있을까요?예를 들어, 마이크로서비스가 수백 개에 달하지만 모두 마찬가지라면
이걸 너무 복잡하게 만들었기 때문에 환경이 어려워졌어요.
환경의 복잡성을 항상 관리하기 위해서요. 아니면 좋은 성과를 얻지 못할 수도 있죠.그들도 같은 종류를 원하죠.
사고방식이 여기에 적용됐어요.포장하기 전에 정말 빨리 왔어요. 다른 것들도 엄청 많아요.
여기서 SaaS 세션이 진행 중이에요.멋진 브레이크아웃이 몇 개 있어요.뻔뻔하게 SaaS를 연결할게요
제가 수요일에 말씀드릴 빌더 툴킷이 있는데, 저도 몇 개 있어요.
다른 브레이크아웃도 몇 가지 있어요.일부는 아키텍처에 관한 것입니다.
내가 말한대로 트랙도 해봐훌륭한 ChalkTalks 워크샵.셀 기반 프로그램이 있어요.
그건 그렇고, 건축 워크숍에 관심이 있으신 분들을 위해서요.그건 그렇고, 나중에 원하시면 다시 오도록 노력할게요
이것들에 올려주세요.그리고 빌더 두 명도
세션만 마치면 끝입니다.참고로 저는 멀티테넌트 SaaS 서적을 가지고 있는데, 다음과 같은 경우에는
관심이 있으신 분 계실 겁니다.뻔뻔한 플러그 말고
저기, 근데...(웃음) 대부분 그 안에 이 개념에 대한 자세한 내용이 들어있기 때문이죠.그리고 그 외에는, 제발
작년에는 사람들에게 설문지를 작성해 달라고 부탁하지 않았다는 거 알아요.설문조사를 작성해 주세요.저한테는 정말 유용한 데이터예요. 특히 이런 새로운 주제에 대해서요.정말 우리가 말하는 건가요?
공감할 수 있는 것이나 공감하지 못하는 것들이 있나요?하지만 이 자리에 와줘서 정말 고마워요. 그리고 남은 re:Invent도 즐기세요.(관객들의 박수 소리)