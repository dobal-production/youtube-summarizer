- 안녕, 모두들.CUBE 204에 오신 것을 환영합니다. Amazon EKS 자동 모드로 전체 쿠버네티스 클러스터를 자동화하세요.모두들 제 말을 잘 들을 수 있을까요?좋아요, 이거 정말 이상해요.(웃음) 제 이름은 알렉스 케스트너이고 제품 매니저입니다.
아마존 EKS 팀에서 일하고 있어요.저는 토드 닐이 합류했어요.
소프트웨어 엔지니어이자 EKS 자동 모드의 수석 엔지니어는 누구인가요?EKS의 가장 큰 변화 중 하나를 오늘 여러분과 공유하게 되어 정말 기쁩니다. 아마도 그 이후일 수도 있습니다.
2017년에 서비스가 시작되었습니다.그래서 앞으로 45분 동안
왜 그렇게 많은지에 대해 조금 이야기해 보죠.
AWS에서 운영하기 위해 쿠버네티스를 선택하는 고객들과 Amazon Elastic의 방식
쿠버네티스 서비스가 등장하여 그 성과를 더욱 돋보이게 되었습니다.
우리가 지난 7년 동안 해오고 있는 일이죠.그런 다음 EKS에 대해 이야기해 보겠습니다.
자동 모드와 이 모드가 가장 흥미롭다고 생각하는 이유
서비스 출시.그리고 이에 대한 모든 것을 기꺼이 말씀드리겠습니다.
자동 모드로 할 수 있는 멋진 기능들과 쿠버네티스를 얼마나 쉽게 운영할 수 있는지 나중에 Todd에게 넘기겠습니다. Todd는 데모를 통해 자동 모드를 사용하는 것이 어떤 것인지 직접 보여드릴 것입니다.마지막으로 다시 돌아와서 안내해 드리겠습니다.
EKS 자동 모드 및 랩핑의 몇 가지 기능을 자세히 설명해 드리겠습니다.
간단히 요약해서 설명해 드리겠습니다.그럼 EKS에 들어가기 전에
자동 모드, 심지어 EKS나 Kubernetes에 이르기까지 AWS가 처음 출시되었을 때 클라우드 컴퓨팅이 만들어졌던 근본적인 변화를 기억하는 것이 중요합니다.클라우드는 우리가 생각하는 방식을 근본적으로 바꿔놓았습니다.
애플리케이션 구축.기억하기 어려워요.
애플리케이션 구축 및 배포는 어땠나요?
아마존이 기본적인 프리미티브를 도입하기 전에는
그 이후 다양한 클라우드의 폭발적인 성장은 말할 것도 없고 2006년 S3와 EC2의 비율
컴퓨팅 프리미티브 및 고차 서비스
오늘날 존재하는 것이죠.하지만 정말 다양한 것들이 있잖아요.
매우 다양한 방식으로 배포되고 다양한 장소에서 실행되는 애플리케이션은
운영 방식에 대한 일관된 모델이 필요했습니다.
이 복잡한 환경, 그리고 바로 이 부분에서 쿠버네티스가 등장했습니다.쿠버네티스가 만들어졌습니다.
고객이 점점 더 복잡해지는 클라우드를 관리할 수 있도록 지원하기 위해서입니다.이는 선도적인 클라우드 운영 모델이며 그 인기는 계속 높아지고 있습니다.2023년에는 클라우드 네이티브 컴퓨팅 재단이 조사한 조직의 대다수인 84% 가 둘 중 하나를 선택하지 않았습니다.
프로덕션 환경에서 쿠버네티스를 사용하거나 조직을 위해 쿠버네티스를 시범 운영하고 있습니다.의심할 여지 없이, 쿠버네티스
클라우드에서의 운영을 위한 사실상의 표준입니다.이는 쿠버네티스 때문입니다.
매우 유용하다.대규모 서버 그룹을 관리하고 서버를 조정할 수 있는 비교적 간단한 API 세트를 제공합니다.
서버 전체에서 실행하기 위한 애플리케이션.왜냐하면 이 시대에서 태어났기 때문이죠. 솔직히 말해서
클라우드의 복잡성 또한 일관성을 우선시했습니다.결국 애플리케이션마다 다른 버전의 simple이 있다면 단순함이 무슨 소용이 있을까요?
애플리케이션을 실행해야 하는 여러 위치는 말할 것도 없겠죠?그리고 쿠버네티스 자체는
다음과 같은 기능의 대부분을 다룹니다.
모든 종류의 구축, 배포, 확장 및 운영에 필요
생각해 볼 수 있는 흥미로운 애플리케이션
확장이 가능하기 때문에 고객에게 즐거움을 선사하세요.
놀라울 정도로 강력하죠.현재 195개가 넘습니다.
CNCF에서 관리하는 오픈 소스 프로젝트, 수백 개
운영 및 통합이 가능한 더 많은 조경 프로젝트
쿠버네티스와 함께 또는 쿠버네티스를 확장하세요.직접 작성할 수도 있습니다.좋아요, 쿠버네티스는 꽤 괜찮습니다. 사실 쿠버네티스는 훌륭하지만 쿠버네티스 클러스터를 실행하고 운영하는 것은 어렵습니다. 그래서 7년이라는 시간이 걸렸습니다.
전, 저희는 2017년에 바로 여기 re:Invent에서 아마존 EKS를 출시했습니다.이에 대한 대응으로 이루어졌습니다.
AWS에서는 고객으로부터 쿠버네티스 관리에 대한 이야기를 들었습니다.
규모가 커지기는 어려웠습니다.요구 사항을 충족하기 위해 Kubernetes 컨트롤 플레인을 모니터링, 확장, 관리해야 했습니다.
보안 및 복원력을 위해, 방법을 찾는 것은 고사하고
클러스터와 애플리케이션을 필요한 다른 AWS 서비스와 통합하십시오.그 이후로 Amazon EKS는 Kubernetes를 실행하는 가장 신뢰할 수 있는 방법으로 부상하여 작업 부담을 덜어줍니다.
쿠버네티스 호스팅의 차별화되지 않은 어려운 작업
온전한 상태를 유지하면서 AWS로 제어 플레인 연결
쿠버네티스 준수.이를 통해 고객은 집중할 수 있습니다.
제어 관리 대신 애플리케이션 실행에 집중
플레인 인프라.그 이후로 저희는
바빠서 멈추지 않았어요.2017년 출시 이후, 저희는 새로운 기능과 개선 사항을 제공하는데 그치지 않고 바쁘게 움직여 왔습니다.
AWS 서비스인 EKS뿐만 아니라 더 광범위한 서비스에
쿠버네티스 오픈소스 커뮤니티.우리는 기본적인 것부터 시작했습니다.
컨트롤 플레인을 관리했고 꾸준히 추가해 왔습니다.
컴퓨팅 관리 기능, 보조 소프트웨어, 보안,
확장성, 네트워킹, 옵저버빌리티, 문제 해결우리는 기본적인 것부터 시작했습니다.
컨트롤 플레인을 관리했고 그 이후로
지난 7년간 250회 이상 출시, 추가 지역으로 확장, 가격 인하, 출시
스토리지 및 네트워킹을 위한 오픈 소스 플러그인.정말 바빴어요.심지어 브랜드도 만들었죠.
떠오르고 있는 새로운 오픈 소스 프로젝트
카펜터 (Karpenter) 와 같은 업계 표준의 요점은
이제 쿠버네티스 운영의 모든 측면을 우리가 생각하는 수준으로 심층적으로 살펴보았습니다.
어느 곳에서든 가장 큰 규모입니다.우리는 현재 수천만 달러를 운영하고 있습니다.
매년 고객을 위한 쿠버네티스 클러스터
그리고 이는 계속 증가하고 있습니다.하지만 우리에겐 이보다 더 많은 것들이 있습니다.
일부 제품에 EKS를 사용하는 고객을 위해 우리가 할 수 있다고 생각합니다.
가장 크고, 가장 정교하며, 업무상 매우 중요합니다.
전 세계 애플리케이션.지난 몇 년 동안
EKS에도 불구하고 고객으로부터 다음과 같은 이야기를 들었습니다.
운영 및 운영에 필요한 사항을 크게 단순화했습니다.
관리형 컨트롤 플레인과 250개의 추가 출시를 모두 갖춘 AWS의 Kubernetes 클러스터를 사용했지만 여전히 많은 작업이 필요했습니다.
클러스터의 데이터 플레인을 관리하려면
애플리케이션이 실제로 실행되었습니다.어떤 작업이 필요했는지 살펴보겠습니다.
바로 시작하고 실행하기 위해서죠.따라서 고객은 먼저 클러스터를 어떻게 생성할지, 사용 여부를 선택해야 했습니다.
코드형 인프라 또는 AWS Management Console을 선택하고 클러스터를 결정합니다.
아키텍처 (예: 대규모 클러스터 몇 개는
애플리케이션 또는 전용 애플리케이션별 클러스터 간에 공유할 수 있으므로 좀 더 신속하게 공유할 수 있습니다.다음으로는 다음과 같이 했을 것입니다.
필수 항목을 선택, 구성 및 설치하려면
프로덕션급 워크로드를 실행하려면 Kubernetes 플러그인이 필요했습니다.이러한 플러그인은 다음을 제공합니다.
기본 기능을 위한 쿠버네티스 네이티브 툴링 및 통합
애플리케이션에 필요한 인프라 프리미티브 (예: 영구 스토리지 볼륨, 컴퓨팅 오토 스케일링 등)
다양한 네트워킹 기능.그런 다음 이상적인 컴퓨팅을 선택, 구성 및 프로비저닝해야 했습니다.
애플리케이션을 실행하기 위해서요.Amazon EC2는 다양한 기능을 제공합니다.
다양한 사용 사례를 위한 인스턴스 유형 포트폴리오 (일부 고객용)
이는 압도적이었으며 요구 사항을 충족하도록 인스턴스를 구성했습니다.
어려웠어요.마침내 이러한 요소들이 제자리에 있으면 배포할 수 있게 되었습니다.
애플리케이션을 클러스터에 포함시키기는 하지만 이는 애플리케이션을 실제로 실행하기 위한 시작에 불과합니다.일단 배포되면
이 모든 인프라를 지속적으로 모니터링하기 위해서요.
및 운영 소프트웨어, 예상치 못한 경우 복구
문제가 불가피하게 발생했고, 인스턴스에 대한 새 Kubernetes 버전 또는 운영 체제 패치가 릴리스되면 이를 업그레이드하여 문제가 계속 유지되도록 해야 했습니다.
최신이며 안전합니다.물론, 심지어
그때는 안 끝났어요.그들은 비용 효율성을 위해 인프라 제공을 지속적으로 분석하고 최적화해야 했습니다.(웃음) 이게 전형적인 모습입니다.
클러스터는 오늘날 EKS와 비슷한데, 보시다시피
API 서버를 포함한 클러스터 컨트롤 플레인인 AWS에서 관리하는 부분입니다.
인스턴스 및 ETCD, 그리고 기타 인프라 및 소프트웨어
고객이 효과적으로 관리하는 다이어그램의 오른쪽, EKS 애드온, 인스턴스
애플리케이션이 실행되는 위치 및 애플리케이션이 작동하는 데 필요한 기타 AWS 서비스많은 작업과 많은 인프라가 필요한 것처럼 들린다면
관리 측면에서도 마찬가지라고 생각합니다. 그래서 오늘 Amazon EKS 자동 모드를 발표하게 되어 정말 기쁩니다.EKS 자동 모드는 그렇지 않습니다.
프로덕션 환경에서 쉽게 실행할 수 있도록 한 획기적인 발전일 뿐
쿠버네티스 클러스터는 쿠버네티스가 어떻게 해야 하는지에 대한 우리의 비전을 실현한 것입니다.
클라우드에서 운영하세요.오늘 아마존 EKS를 구축했다면
이것이 우리가 구축하는 방법입니다.EKS 자동 모드를 사용하여 쿠버네티스 규격을 준수하도록 할 수 있습니다.
모든 사용자를 위한 관리형 컴퓨팅, 스토리지 및 네트워킹
신규 또는 기존 클러스터.따라서 보안을 더 쉽게 활용할 수 있습니다.
쿠버네티스 애플리케이션을 위한 AWS의 가용성, 확장성 및 운영 우수성.이제 Amazon EKS 자동 모드를 통해 얻을 수 있는 이점을 살펴보겠습니다.EKS 자동 모드를 사용하면 필수 구성 요소로 사전 구성된 애플리케이션 지원 클러스터를 생성할 수 있습니다.
7년간 쌓아온 기능 및 모범 사례
매년 수천만 개의 클러스터를 실행합니다.자동 모드를 동적으로
애플리케이션의 요구 사항에 따라 클러스터 컴퓨팅을 확장합니다.AWS 관리형 EC2를 선택, 프로비저닝, 보호 및 업그레이드합니다.
AWS 제어 액세스를 사용하는 계정 내 인스턴스
및 라이프사이클 관리.OS 패치, 상태 모니터링, 업데이트를 처리하고 일시적이고 시간 제한이 있는 컴퓨팅으로 보안 위험을 제한하여 조직을 강화합니다.
기본적으로 보안 태세입니다.효율성을 유지할 수 있도록 자동으로 선택합니다.
애플리케이션에 가장 적합한 EC2 인스턴스이며 비용 대비 지속적으로 최적화합니다.또한 자동 모드는 단순화합니다.
클러스터 업그레이드를 통해 Kubernetes 클러스터를 실행하는 데 필요한 운영 작업을 줄이고 다음을 수행할 수 있습니다.
회의보다는 비즈니스에 중요한 활동에 집중하세요.
클러스터를 위한 인프라.이 모든 기능이 왜 이렇게 많은지 분명히 알 수 있을 것 같습니다.
현재 AWS에서 Kubernetes를 실행하는 고객에게는 유용하지만, 정확히 말하자면 모두 비용을 절감하는 데 도움이 됩니다.
새 워크로드를 시작하여 새로운 제품이나 현대화된 애플리케이션을 확보하는 데 필요한 시간
시장에 더 빨리 출시할 수 있습니다.자동 모드는 개선에도 도움이 됩니다.
애플리케이션 가용성, 성능 및
애플리케이션 및 인프라의 보안, 즉 애플리케이션의 보안
사용자와 조직의 요구 사항을 더 잘 충족할 수 있습니다.마지막으로, 이 모든 기능을 제공합니다.
이는 비용 효율성을 위해 최적화하는 동시에 두 가지 모두를 가능하게 합니다.
컴퓨팅 비용과 팀의 시간, 즉
이를 통해 Kubernetes 애플리케이션을 실행하는 데 드는 오버헤드가 줄어들고 비즈니스에 정말 중요한 일에 집중할 수 있습니다.이제 EKS Auto Mode를 사용하여 시작하려면 무엇이 필요한지 살펴보겠습니다.자동 모드는 클러스터를 생성하는 단 한 단계만으로 완전히 자동화되고 Kubernetes를 준수하는 기능을 제공합니다.
모든 EKS 클러스터를 위한 관리형 컴퓨팅 네트워킹 및 스토리지클러스터를 생성한 후
자동 모드를 활성화하면 시작하기 전에 다른 작업을 수행할 필요가 없습니다.
애플리케이션 배포.게다가, 다음과 같은 경우
애플리케이션을 실행하면 자동 모드가 자동으로 실행됩니다.
애플리케이션에 필요한 인프라를 프로비저닝하고,
애플리케이션에 맞게 이러한 리소스를 확장합니다.
변화하는 수요를 비용에 맞게 자동으로 최적화하여 효율성을 유지하고 모든 인프라를 모니터링합니다.
건강 문제의 경우 필요할 때 자동으로 복구합니다.이 모든 것이 문제를 해결해 줍니다.
여러분과 팀이 할 수 있는 엄청난 양의 운영 업무가
비즈니스 혁신을 주도하고 고객을 만족시키는 애플리케이션을 구축하는 데 집중하세요.그래서 아키텍처를 살펴봤습니다.
이전에는 Amazon EKS 클러스터에서EKS가 무엇인지 살펴보겠습니다.
이제 Auto 모드가 활성화된 아키텍처의 모습입니다.그렇지 않다는 것을 알 수 있습니다.
AWS만이 계속해서 관리를 담당합니다.
클러스터 컨트롤 플레인뿐만 아니라 컴퓨팅 스토리지 및 네트워킹을 위한 통합 Kubernetes 기능에 대한 책임도 맡았습니다.자동 모드는 EC2 매니지드 모드를 시작합니다.
운영을 위임할 수 있는 인스턴스
인스턴스가 사용자 계정에 있는 경우에도 해당 인스턴스 자체에 대한 EKS에 대한 책임.마지막으로, 다른 모든 AWS 리소스를 계속 사용할 수 있습니다.
애플리케이션에 필요하고 이러한 애플리케이션은 계속 작동합니다.
예전처럼 말이죠.Amazon EKS에 대해 생각해 볼 수 있는 또 다른 방법이 있습니다.
자동 모드는 각 AWS와 고객이 수행하는 역할을 변화시킵니다. 우리는 공유된 역할에 대해 생각합니다.
책임 모델.이것은 a의 어떤 부분을 의미하는지 보여줍니다.
고객의 아키텍처는 고객의 책임이고, 이는 고객의 책임입니다.그래서 이전에 Amazon EKS를 사용하면서
물론 클러스터 컨트롤 플레인뿐만 아니라 모든 AWS 글로벌 인프라 및 기반 서비스를 담당하지만 그 밖의 모든 것을 담당합니다.
컴퓨팅이든 컨트롤 플레인은 궁극적으로 고객의 책임이었습니다.
수명 주기 관리, 운영 체제 패치 적용, 기본 EC2 인스턴스의 상태 문제 모니터링 및 복구
실행해야 하는 에이전트를 구성할 수 있을 뿐만 아니라
통합할 인스턴스 자체
쿠버네티스 클러스터.자동 모드를 통해 공동 책임의 경계를 크게 넓혔습니다.이제 차별화되지 않은 부분을 훨씬 더 많이 활용합니다.
모든 클러스터 기능을 포함한 무거운 작업
컴퓨팅 스토리지 및 네트워킹뿐만 아니라
애플리케이션이 실제로 실행되는 EC2 관리형 인스턴스의 운영 체제 패치, 모니터링, 상태 및 수리이제 다음 사항을 숙지해야 합니다.
애플리케이션, 애플리케이션 보안, 애플리케이션 실행 방식 및 모니터링 방법에 집중하세요.이제 다음과 같이 할 수 있습니다.
애플리케이션에 필요할 수 있는 기타 추가 애드온이 있으면 더 많은 시간을 할애할 수 있습니다.
비즈니스에 정말 유용한 것들에 집중하기 위해서죠.얘기가 나와서 말인데
몇몇 고객님들께서 어떤 경험을 하셨는지 조금 말씀드리자면
리미티드 베타 기간 중 EKS Auto Mode에 대해 말씀드렸는데
올해 초에 출시했었죠.그래서 아스트로노머는 하나의 회사입니다.
전 세계에 데이터를 제공하는 것을 사명으로 삼고 있습니다.
최신 데이터 데이터인 Astro를 통해 기업 및 데이터 팀이 워크플로우와 가용성을 개선할 수 있도록 지원함으로써
Apache Airflow로 구동되는 오케스트레이션 플랫폼.천문학자는 대략 다음과 같이 관리합니다.
아스트로 에어플로우를 위한 인프라 기반으로 사용되는 300개의 Amazon EKS 클러스터
서비스 상품으로.이 수치는 고객이 탑승할 때마다 증가합니다.클러스터를 관리하려면 다음과 같은 시간과 에너지 및 리소스가 필요했습니다.
일상적인 운영.실례합니다. Astronomer는 이번 얼리 액세스 베타에서 Amazon EKS 자동 모드를 사용하여 운영 속도를 줄이기로 결정했습니다.
대규모 Amazon EKS 클러스터를 확장하면서 관리해야 하는 부담입니다.이를 통해 의미 있는 일을 할 수 있었습니다.
클러스터를 지원하는 데 필요한 시간과 엔지니어링 노력을 거의 50% 줄이고 컴퓨팅을 줄일 수 있습니다.
인프라 비용도 마찬가지입니다.또 다른 고객인 FICO는 업계 최고의 분석 소프트웨어입니다.
90여 개국의 기업이 더 나은 의사 결정을 내려 성장, 수익성 및 고객 만족도를 높일 수 있도록 지원하는 회사입니다.널리 사용되는 제품에 대해 잘 알고 계실 것입니다.
금융 기관이 여부를 결정할 때 사용하는 소비자 신용 점수
돈을 빌려주거나 신용을 발행하기 위해서입니다.FICO는 AWS를 사용하여 주변 기업에 대용량 분석 소프트웨어 및 도구를 제공합니다.
전 세계 금융의 95% 를 포함한 전 세계
미국의 기관.동일한 베타에 참여한 후 FICO는 EKS 자동 모드를 사용하여 비프로덕션용 FCO 플랫폼을 구동하기로 결정했습니다.
사용량을 줄이기 위한 일시적인 개발자 환경
인프라, 컴퓨팅 비용, 운영에 투자한 시간.FICO는 현재 이러한 감소 효과를 확대하기 위해 프로덕션 환경에 맞게 EKS 자동 모드를 평가하고 있습니다.
인프라를 추가로 관리하기 위한 엔지니어링 노력
환경 전반에 걸쳐하지만 저한테는 한 가지예요
그리고 다른 AWS 고객들도 EKS Auto Mode가 얼마나 훌륭한지 말씀해 주셨지만, 저희가 여러분께 보여드릴 것은 또 다른 것입니다. 이에 대해서는
Todd에게 넘겨주면 Todd가 자동 모드로 무엇을 할 수 있는지 시연해 줄 거예요, Todd.(군중 수다) - 고마워요, 알렉스, 고마워요
소개.네, Amazon EKS 자동 모드에 대해 모두 들어보는 것도 중요하지만 정말 대단합니다.
실제로 작동하는 모습을 보는 것만으로도 특별하고, 저는 정말 대단합니다.
여러분께 보여드릴 수 있어서 기쁩니다.먼저 브랜드를 만드는 것부터 시작하겠습니다.
새로운 EKS 자동 모드 클러스터.그래서 그렇게 하기 위해 제가 할게요.
EKS.Console로 가서 클러스터 생성 버튼을 클릭하세요.현재 EKS 사용자인 경우 여기에서 몇 가지 변경 사항을 확인할 수 있습니다.새로운 퀵을 보실 수 있을 겁니다.
EKS 자동 모드에서 생성하는 데 사용되는 구성 모드
여러 가지 기본값이 사전 구성되어 있어 작동할 가능성이 높습니다.
대부분의 고객에게 가장 적합합니다.다른 것을 선택할게요
쿠버네티스 버전을 선택한 다음 다음을 선택하겠습니다.
클러스터 및 노드 IAM 역할제대로 작동하는 IAM 역할이 없는 경우 생성을 클릭할 수 있습니다.
호환 가능한 역할을 생성하기 위한 권장 역할 버튼
역할을 선택한 다음 해당 역할을 사용하십시오.그 외에도 VPC를 선택해 주세요. 이를 확장하여 구성을 보여 드리겠습니다.
클러스터 설정.보시다시피 다음과 같습니다.
관리형 노드 풀을 몇 개 사용해서 제가 할게요
클러스터 관리자아래쪽으로 내려가면 네트워크가 보입니다.
클러스터 설정.그리고 오른편에는
옆면에는 고정된 설정이 보입니다.
클러스터의 수명, 그리고 나중에 변경할 수 있는 사항.마지막으로, 아시다시피
옵저버빌리티가 활성화되고 클러스터 로깅이 가능해졌습니다.
또한 활성화되었습니다.그리고 이를 통해 우리는
실제로 Create 버튼을 클릭하고 새 EKS Auto Mode 클러스터를 생성하세요.(앰비언트 뮤직) 가장 먼저 일어나는 일
클러스터를 생성하면 클러스터가 생성 상태로 전환됩니다. 그래서 이 시점에서 AWS는 새로운 고가용성을 프로비저닝하고 있습니다.
EKS 컨트롤 플레인입니다.몇 분 정도 걸립니다.
이게 끝나려면, 아주 금방, 만약 제가
새로고침 버튼을 클릭하면 클러스터가 생성 상태에서 전환되는 것을 볼 수 있습니다.
활성 상태로 전환됩니다.(앰비언트 뮤직)
(참가자들의 수다) 그리고 이 시점에서 저는 완전히 제 기능을 하고 있습니다.
EKS 자동 모드 클러스터를 보면 알 수 있습니다.아래로 스크롤하면 이 특정 클러스터에 대해 EKS 자동 모드가 활성화되어 있는 것을 볼 수 있습니다.현재 실행 중인 버전이 무엇인지, 모든 종류의 표준 기능을 볼 수 있지만, 이 클러스터에서 현재 꺼져 있거나 현재 설치되어 있는 리소스도 살펴보겠습니다.먼저 포드부터 시작해보죠. 포드는 하나도 없습니다.디플로이먼트도 없고,
데몬셋은 없습니다.클러스터는 완벽하게 작동하지만 실행 중인 워크로드가 없습니다.실제로 가서 살펴보겠습니다.
노드도 마찬가지입니다. 다시 말씀드리지만, 실행 중인 노드가 없습니다.이 클러스터는 완벽하게 작동하는 클러스터이지만 사실상 0으로 확장되었으며 실행 중인 컴퓨팅이 없습니다.컴퓨팅을 클릭하면
탭을 보면 노드는 보이지 않지만 관리형 노드 풀은 보입니다. 범용입니다.
시스템 내 노드 풀의 경우 콘솔을 사용하여 좀 더 자세히 살펴보겠습니다.콘솔로 넘기면, (앰비언트 뮤직)
(군중 떠드는 소리) 먼저 살펴보도록 하겠습니다.
범용 노드 풀.우리는 이것이 일종의 일반적인 컴퓨팅 유형에 매우 적합하다고 생각합니다.관리형 노드 풀은 다음과 같습니다.
아시다시피 쿠버네티스 API를 통해 볼 수 있습니다.그리고 우리가 살펴보자면
특히 범용 노드 풀은
운영 중단 예산과 기본 통합 정책으로 구성되어 있는 것을 볼 수 있습니다.CM 및 R 유형을 사용하도록 구성되어 있으며 다음과 같이 구성되어 있습니다.
이러한 유형의 최신 세대를 선택한 다음 다음과 같은 경우
아래로 조금 더 스크롤하면 온디맨드로 제공되며 구성도 되어 있는 것을 볼 수 있습니다.
AMD 64 아키텍처용입니다.(군중 수다) 맨 아래에는 이 노드 풀의 상태가 표시됩니다.상태는 EKS 방식입니다.
자동 모드를 사용하면 이 노드 풀이 작동 중임을 알 수 있습니다.
작동하고 바로 사용할 수 있습니다.노드 클래스가 준비되었으니 참조된 노드 클래스가 제대로 작동하고 구성되어 있는 것을 볼 수 있으며, 그 외 해당 노드에 관한 모든 것들이 제대로 작동하고 있는 것을 볼 수 있습니다.
풀도 준비되어 있고 리소스를 통해 실제로 관리 중이라는 것을 알 수 있습니다.
지금은 리소스가 없어요.시스템을 살펴보겠습니다.
노드 풀에 대해 자세히 알아보십시오.시스템 노드 풀을 다시
아주 친숙해 보이네요.통합 정책이 동일하며 동일한 노드 클래스를 참조합니다.두 가지 변경 사항이 있습니다.
일반 노드 풀과 시스템 노드 풀 사이
제가 말씀드리고 싶은 것은먼저 아래로 스크롤하면
조금 더 살펴보자면, 시스템 노드 풀을 볼 수 있을 것입니다.
기본적으로 Graviton 프로세서도 지원하며, 다음과 같은 기능도 있습니다.
중요 애드온만 해당됩니다.시스템 노드 풀은 격리하려는 일종의 클러스터 핵심 구성 요소인 정책 시행과 같은 작업에 사용할 예정입니다.
나머지 컴퓨팅.다시 말씀드리지만, 상태를 확인할 수 있습니다.
시스템 노드 풀에서는 아무것도 관리하지 않고 있습니다.
현재 리소스입니다.이제 작동하는 클러스터가 있고 노드 풀이 모두
상태가 양호하고 모든 것이 준비되었다고 보고했으니 다음으로 해야 할 일은
해야 할 일은 아마도 이 클러스터에서 애플리케이션을 시작하는 것일 것입니다.그럼 먼저 시작해보죠.
샘플 애플리케이션과 AWS 컨테이너가 있는 GitHub 리포지토리가 있습니다.
리테일 샘플 애플리케이션.그리고 우리는 보여줄 것입니다
여기 아키텍처 다이어그램은 데모용으로 의도적으로 과도하게 설계되었으므로 많은 구성 요소가 포함되어 있습니다.데이터베이스가 여러 개 있습니다.
서비스, EVS 볼륨로드 밸런서 유형의 서비스가 있으므로 로드 밸런서 서비스를 생성합니다.다시 말씀드리지만, 이 서비스는 데모용으로 만들어졌기 때문에 상당히 복잡합니다.
이걸 클러스터에 설치해서 살펴보도록 하겠습니다.
EKS 자동 모드가 어떻게 반응하는지.따라서 해당 샘플에 YAML을 kubectl로 적용해 보겠습니다.
클러스터에 적용하기.(군중 수다) 배포,
서비스, 구성 맵, 아시다시피 PC,
모든 것이 만들어질 것입니다. 이제 콘솔로 돌아가서 살펴보겠습니다.디플로이먼트가 이제 막 생성되기 시작했다는 것을 알 수 있습니다.포드가 생성될 것입니다.
아주 빨리, 아니면 곧.우리 노드를 보러 가면 아직 아무것도 없긴 하지만
한 번 새로고침하겠습니다. EKS Auto Mode에서 이 컴퓨팅을 지원하는 노드를 시작했는데 몇 가지 토폴로지가 있습니다.
해당 배포로 확산되었으므로 실제로 노드를 더 확보하게 될 것입니다.그래서 몇 번 기다려 보겠습니다.
몇 초 후 다시 새로고침하면 이를 지원하는 EKS Auto Mode 노드가 더 많아질 것입니다.
특정 애플리케이션.아래로 내려가서 우리의 모습을 살펴볼게요
배포를 한 번 더 해볼게요.자, 이제 우리 노드는
포드가 가동되고 배포가 정상적으로 이루어졌으며 이제 우리의 시스템에서 실행되고 있습니다.
EKS 자동 모드 노드, 이제 조사해 보겠습니다
스토리지 구성.따라서 영구 볼륨이 있습니다.
샘플 애플리케이션의 일부인 MySQL 데이터베이스에 대한 소유권을 주장하세요.그래서 EKS 자동 모드는
EBS 볼륨을 인스턴스에 연결했더니 작동 중입니다.
노드에서 노드로 이동하는 포드를 따라가려면
통합에 따라, 또는 패치를 위해 노드를 교체할 때, 다시 말하지만 모든 것이 즉시 해결되었습니다.마지막으로 서비스를 살펴보겠습니다. 네트워킹으로 넘어가면 UI 서비스가 구성됩니다.
로드 밸런서 유형이므로 EKS Auto Mode는 자동으로 로드 밸런서를 생성합니다.그리고 이것은 모두 표준을 사용하고 있습니다.
쿠버네티스 구조가 있기 때문에 콘솔로 돌아가서 같은 데이터를 실제로 볼 수 있습니다.이제 콘솔로 전환해서 UI 서비스를 살펴보겠습니다.(군중 수다) 그리고 로드 밸런서 주소가 보이면 로드 밸런서를 가져올게요.
주소를 복사해서 브라우저에 던져서 가서 볼 수 있도록 하겠습니다.
방금 배포한 것과 샘플이 있습니다.
소매점 애플리케이션.이리저리 클릭해서 살펴보도록 하겠습니다.
기능이 있다는 것만 보여주세요. 다음 항목에 추가할 수 있습니다.
장바구니와 체크아웃, 그리고 제가 정말 강조하고 싶은 것은 바로 그 데모가 어떤 것이었는지입니다.클릭 한 번으로 클러스터를 만들었죠. 두 번째 단계에서는 클러스터를 적용했죠.
클러스터에 대한 워크로드, 3단계는 없었습니다. 이 시점에서 모든 것이 실행되고 있기 때문이죠. 일종의 마법 같은 일이죠.
EKS 자동 모드를 사용하면 애플리케이션을 EKS에 배포할 수 있습니다.(군중 수다) 눈이 아주 예리하셨다면
실제로 클러스터를 만들 때는 쿠버네티스 1.30을 선택했지만 EKS는 쿠버네티스 1.31을 지원하므로 해당 클러스터를 업그레이드하고 EKS Auto Mode가 어떤지 살펴보도록 하겠습니다.
프로세스를 간소화합니다.업그레이드 클러스터를 클릭하기만 하면 됩니다.
콘솔에 있는 버튼을 누르면 몇 분 정도 걸립니다.
EKS가 다시 프로비저닝하고 정상적으로 업그레이드하는 데 몇 분 정도 걸립니다.
우리를 위한 컨트롤 플레인이지만 새로 고침하면 컨트롤 플레인이 다음과 같이 보일 것입니다.
쿠버네티스 1.31로 업그레이드했습니다.그리고 이제 EKS 오토 모드가 생겼습니다.
데이터 플레인 간의 차이점을 발견했습니다.
실행 중인 쿠버네티스 1.30 노드와
쿠버네티스 1.31 컨트롤 플레인.그래서 실제로 콘솔로 가서 이 업그레이드가 진행되는 것을 지켜보도록 하겠습니다.
이 모든 것은 노드 풀의 중단 예산을 통해 구성할 수 있으며 포드 중단 예산에 따라 적절하게 업그레이드할 수 있습니다.EKS Auto Mode가 이미 대체 노드를 출시했다는 것을 알 수 있습니다. (군중 수다), 곧 출시될 예정입니다.
노드를 몇 개 더 확보한 다음 해당 워크로드를 확보하세요.
이전 쿠버네티스 1.30 노드에서 새로운 쿠버네티스 1.31 노드로 정상적으로 이동될 것입니다.(군중 수다) 그래서 우리가 만들었을 뿐만 아니라
클릭 한 번으로 클러스터를 만들고 클릭 한 번으로 클러스터를 업그레이드했습니다. AWS가 모든 핵심 클러스터를 담당하기 때문입니다.
구성 요소는 Kubernetes와 호환되고, 모두 패치를 적용하고, 모두 유지하므로 안심하셔도 됩니다.
잘 작동하고 건강합니다.EKS Auto Mode의 마지막 기능 중 정말 기대되는 기능 중 하나는 상태 모니터링과 자동 수리입니다.에서 많은 노드를 관리하고 있습니다.
EKS를 살펴본 결과 노드가 정말 흥미로운 방식으로 실패하는 것을 많이 봤어요.그리고 우리는 이러한 실패 모드를 가져와서 그 논리를 다음과 같이 인코딩했습니다.
모든 EKS 자동 모드에 배포되는 노드 모니터링 에이전트입니다.이제 노드에 대해 설명하고
그러면 위로 올라가서 상태를 살펴보고 확인할 수 있을 것입니다.
현재 이 노드에서 모니터링하고 있는 다양한 노드 서브시스템은 노드 상태 조건과 이벤트를 통해 보고되므로 쿠버네티스 네이티브 구조이므로 직접 모니터링할 수 있습니다.몇 가지 새로운 조건을 확인할 수 있습니다.
모니터링 중임을 보여주는 노드에서
커널, 컨테이너 런타임, 스토리지, 네트워킹
이 특정 노드용.그리고 자동차 수리를 보여주기 위해서는 다음과 같이 해야 합니다.
어떤 식으로든 노드에 장애가 발생했습니다.그래서 우리는 이것을 할 수 있는 포드를 가지고 있습니다.
실제로 이 특정 노드에서 장애를 유발하므로 이 포드를 다음 노드에 적용할 것입니다.
그러면 클러스터가 생성되고, 이로 인해 이 노드에 장애가 발생합니다.현재 실행 중이므로 해당 노드에 대해 설명하겠습니다.
다시 한 번 무슨 일이 일어나는지 보세요.(군중들의 수다) 그리고 우리는 즉시 보게 됩니다.
노드에 새로운 이벤트가 생겼습니다.노드에서 실행 중인 노드 모니터링 에이전트가 네트워킹 상태를 감지했습니다.
노드에 문제가 발생했습니다.무슨 일이 있었는지 알려줍니다. IP 주소 관리
데몬이 실패했습니다.몇 가지 이유를 알 수 있습니다.
실패했을 수도 있다고 생각해요.그리고 가서 살펴보죠.
콘솔에 있는 노드의 조건도
거기에 보고된 내용을 보세요.이제 EKS 자동 모드에서는 이 사실을 알고 있습니다.
이 오류가 발생하면 더 이상 포드가 노드에 스케줄링할 수 없습니다. 그럴 수 없기 때문입니다.
할당된 IP 주소.사실상 치명적입니다.아마도 가장 좋은 방법은 대체 노드를 시작하고 해당 노드를 다시 마이그레이션하는 것입니다.
장애가 발생한 노드의 워크로드를 정상적으로 되돌려줍니다.
새 정상 노드로 넘어가세요.그래서 우리는 이런 일이 일어나는 것을 지켜보고 있습니다. 일부 노드에 대한 감시를 만들고 새 노드가 시작되는 것을 보게 될 것입니다. 새 노드가 정상으로 나타나면 EKS Auto Mode에 정상 노드와 장애가 발생한 노드가 있습니다. 이제 워크로드를 마이그레이션할 수 있다는 것을 알릴 것입니다.이러한 워크로드는 다음과 같습니다.
운영자의 개입 없이 정상적으로 마이그레이션한 결과, 장애가 감지되었습니다.
노드가 노드를 대체했습니다.서비스에 중복성이 있었다면 중복되지 않았을 수도 있습니다.
장애가 발생한 것을 확인했고, 내일 확인할 수 있습니다.
아침, 이벤트를 보면서 커피를 마시며
모니터링 시스템도 마찬가지고요.하지만 우리의 애플리케이션은 또
건강하고, 백업하고, 잘 운영하세요.그걸로 정말 고마워요.
다시 Alex에게 넘겨서 EKS Auto Mode의 핵심 기능 몇 가지를 자세히 설명하겠습니다.(참가자들의 박수 갈채) - 좋아요, 고마워요, Todd.네, 사용하기가 훨씬 쉬워졌다니 정말 놀랍습니다.
EKS 자동 모드가 있는 쿠버네티스.하지만 이제는 좀 더 시간을 들여 구체적인 내용을 파헤치고 싶습니다.
EKS 자동 모드의 특징을 알려드리자면
좀 더 자세히 설명해 드리겠습니다.앞서 말씀드린 것처럼,
특징 또는 기능의 세 가지 주요 범주
EKS 자동 모드.컴퓨팅 오토 스케일링을 위한 통합 클러스터 기능입니까?
그리고 라이프사이클 관리, 네트워킹, 스토리지.컴퓨팅 계층에서 Amazon EKS 자동 모드는
가장 적합한 인스턴스를 동적으로 선택하고 확장하는 Karpenter를 기반으로 합니다.
애플리케이션에 맞는 유형.또한 지속적으로 최적화됩니다.
클러스터에서 실행되는 관리형 컴퓨팅으로 비용을 개선합니다.스토리지 측면에서는 Auto
모드는 블록 스토리지를 시작할 수 있는 기능을 제공합니다.
관리형 솔루션을 제공하여 모든 주요 애플리케이션에 적합합니다.
EBS CSI 드라이버 버전.네트워킹의 경우 자동 모드를 사용하면 클러스터에서 실행 중인 포드 간에 연결할 수 있습니다.업데이트되고 간소화되었습니다.
VPC CNI는 서브넷에서 직접 IP 주소를 할당합니다.
클러스터에 연결됨.그리고 Todd가 말한 것처럼
아코디언 S는 Auto의 모든 노드에서 로컬로 실행됩니다.
DNS 기반 서비스를 제공하는 모드 지원 클러스터
검색 및 해결.또한 네트워크 프록시는 각 노드에서 실행되며, 이를 통해 노드의 네트워크 규칙을 유지하고, 아시다시피,
네트워크 통신.드디어 할 수 있게 되었습니다.
(불분명한) 로드 밸런서는 외부에서도 실행되는 AWS Load Balancer Controller를 통해 애플리케이션을 실행하는 포드 전체와 포드 전체에 트래픽을 분산합니다.
클러스터이며 AWS에서 관리합니다.이제 컴퓨팅에 대해 자세히 알아보겠습니다.
EKS 자동 모드 기능.컴퓨팅 기능이 수행하는 몇 가지 중요한 기능이 있습니다.먼저, Auto Mode와 함께 근본적으로 새로운 기능을 출시했습니다.
Amazon EC2 인스턴스를 위한 일종의 운영 모델입니다.
EC2 관리형 인스턴스라고 합니다.관리형 인스턴스는
위임하는 동안 EKS와 같은 다른 AWS 서비스를 통해 계정에 배포합니다.
해당 서비스의 시작, 보안 및 관리를 담당합니다.배포할 때
자동 모드가 있는 애플리케이션, 적절한 규모의 컴퓨팅 리소스, EC2 관리형 인스턴스는
필요에 따라 자동으로 선택, 프로비저닝 및 동적으로 확장됩니다.
클러스터의 애플리케이션.시간이 지남에 따라 자동 모드가 계속 실행됩니다.
온디맨드로 실행되는 인스턴스를 최적화합니다.
애플리케이션이 변경됩니다.활용도가 낮은 노드는 종료되며, 애플리케이션의 리소스 및 일정 요구 사항을 충족하는 더 저렴한 컴퓨팅이 발견되면 기존 컴퓨팅 리소스
교체되고 노드가 정상적으로 소모되고 애플리케이션 포드가 보다 비용 효율적인 새 컴퓨팅으로 마이그레이션됩니다.마지막으로, 적합한 제품을 유연하게 선택할 수 있습니다.
워크로드에 맞게 컴퓨팅하세요.특정 용도를 사용해야 하는 경우
EC2 인스턴스 유형은 다음을 통해 지정할 수 있습니다.
사용자 정의 자동 모드, 노드 풀, 자동 모드도 다양한 EC2 인스턴스를 지원합니다.
컴퓨팅 저축 플랜과 같은 구매 옵션을 입력하십시오.
예약 인스턴스 또는 스팟 (계속 혜택을 받을 수 있음)
대폭적인 비용 절감 덕분입니다.한 가지 더 말씀드리자면
EKS 자동 모드의 흥미로운 점은 다음과 같은 경우가 있다는 것입니다.
오토 모드로 실행한 다음 보틀로켓을 실행하세요.보틀 로켓은 컨테이너입니다.
그렇지 않은 Amazon의 최적화된 운영 체제
일반적으로 찾을 수 있는 많은 것들을 포함하세요.
용도에 맞는 운영 체제.이는 개선에만 도움이 되는 것이 아닙니다.
인스턴스의 보안 태세, 하지만
또한 성능을 개선하고 수행해야 하는 작업에 대한 보안을 낮춥니다.
조직에 필요한 보안 태세를 유지하세요.이 프로젝트는 오픈 소스 프로젝트이고, 아마도, 아시다시피
이미 잘 알고 계시겠지만 저희가 찾아낸
자동 모드에 특히 적합해야 합니다. 두 가지 용도 모두
당사와 고객 모두를 위해.(군중 수다) 엄청난 네트워킹이 이루어지고 있습니다.
EKS Auto Mode의 기능을 몇 가지 다른 범주로 나누어 살펴보자면, 먼저 일종의 포드 네트워킹 및 클러스터 네트워킹 기능입니다.모든 EKS 자동 모드 노드
이 역시 인스턴스에서 로컬로 실행되는 Accordion S가 함께 제공되므로 클러스터에서 전용 배포로 실행할 경우 Accordion S에서 흔히 발생하는 많은 확장 문제를 해결할 수 있습니다.앞서 말씀드렸듯이,
또한 간소화하고 어떤 면에서는 개선했습니다.
현재 부분적으로 실행되는 기존 VPC CNI
클러스터 외부에서 기본 네트워크 정책 시행과 함께 포드 및 서비스 네트워킹을 제공합니다.마지막으로, 다음을 제공합니다.
모든 노드의 완전 관리형 네트워크 프록시
EKS 자동 모드에서 실행되므로 워크로드는
필요한 연결성.하지만 이는 단지 연결 및 네트워킹 기능일 뿐입니다.
클러스터 내에서요.물론 애플리케이션도
실행 중인 사물과 연락하거나 통신할 수 있어야 합니다.
클러스터 외부에서, 그리고 이를 위해 저희가 제공하는
EKS 자동 모드 클러스터용 관리형 로드 밸런서.다음과 같이 사전 구성되어 제공됩니다.
네트워킹 모범 사례 및 애플리케이션 로드 밸런서 및 서비스 리소스로 Kubernetes 인그레스를 충족시키는 것은 다음과 같습니다.
네트워크 로드 밸런서.그 중 하나는
Auto를 사용하기 시작하면 주의할 점이 있습니다.
모드에서는 새 인그레스 클래스를 만들었다는 것입니다.
이 버전의 VPC CNI에서 특히 작동합니다. 죄송합니다. 이 버전의
자동 모드가 제대로 작동하도록 지시하는 로드 밸런서 컨트롤러.해당 서비스에 주석을 달면
알다시피 적절한 인그레스 클래스가
일종의 주석인데, Auto Mode에 조치를 취하도록 지시하는 거죠.최종 기능은
자동 모드, 스토리지 및 자동 모드에는 EBS CSI 드라이버 또는 블록 스토리지 드라이버가 기본적으로 제공됩니다.이를 통해 프로비전할 수 있습니다.
또한 애플리케이션에서 직접 Amazon EBS의 블록 스토리지 볼륨 수명 주기를 관리할 수 있습니다.새로운 인그레스 클래스와 마찬가지로 자동 모드에는 다음과 같은 기능이 함께 제공됩니다.
새 스토리지 클래스도 마찬가지입니다.알 수 있듯이
ebs.csi.eks.amazonaws.com은 이미 아마존을 사용하고 있다면 익숙한 스토리지 클래스와 약간 다를 수 있습니다.
안정적인 워크로드를 위한 EKS.새 스토리지를 생성할 때
클래스를 지정한 다음 애플리케이션을 정의할 때 이를 참조합니다.
영구 저장소가 필요하면 Auto Mode에 다음과 같이 지시합니다.
해당 애플리케이션에 필요한 리소스를 프로비저닝하세요.계속 사용할 수 있습니다.
Amazon EKS용으로 이미 존재하는 애드온을 사용하는 EKS 자동 모드를 사용하는 다른 종류의 스토리지.EBS 블록과 완벽하게 호환될 것입니다.
자동 모드용 스토리지 드라이버.자, 여기에서 이와 비슷한 잠재력을 보여주는 간단한 예를 볼 수 있습니다.
스토리지 클래스를 사용하고 싶다면 다음과 같이 보일 수 있습니다.
블록 스토리지를 활용하고 싶었죠.
자동 모드에 있는 기기.한 가지 더 말씀드리자면, 정확히는 그렇지 않습니다.
오토 모드의 기능이긴 하지만 실제로 있는 것은
이것이 바로 우리가 Amazon EKS에서 수행하는 모든 작업의 토대입니다.
쿠버네티스 규정 준수와 관련해서요.따라서 쿠버네티스 컴플라이언스는
이것은 특정 쿠버네티스 공급자의 아이디어인가요?
이를 나타내는 일련의 테스트를 통과해야 합니다.
관리형 쿠버네티스 서비스는 다른 서비스와 함께 사용할 수 있습니다.
쿠버네티스를 준수하는 제품, 기능 또는 서비스, 그리고 항상 그렇듯이 EKS Auto Mode는 완벽합니다.
쿠버네티스 준수.즉, 그 뿐만이 아닙니다.
Kubernetes를 준수하는 다양한 CNCF 오픈 소스 프로젝트를 활용할 수 있을 뿐만 아니라 오늘날 많은 사람들이 EKS 클러스터와 함께 사용하는 파트너 솔루션의 에코시스템을 활용할 수도 있습니다.사실 이 점을 공유하게 되어 기쁩니다. Amazon EKS 자동 모드가 있기 때문입니다.
Kubernetes를 준수하므로 지금 바로 이러한 파트너 제품을 모두 활용할 수 있습니다.출시 검증을 거쳤으며, 저희가 생각하는 바로는
특히 흥미로운 점은 시간이 지나면서 계속해서 추가 파트너의 유효성을 검사하고 파트너들이 업데이트하도록 하기 때문에 점점 더 많은 파트너가 이 목록에 추가될 것이라는 점입니다.
필요에 따라 솔루션을 제공합니다.Amazon EKS 자동 모드에서 얻을 수 있는 이점을 간단히 요약해 보겠습니다.첫째, 민첩성이 향상되어 시간이 단축됩니다.
새로운 워크로드를 시작하고 새로운 제품이나 현대화된 애플리케이션을 확보할 수 있도록 합니다.
더 빠르게 시장에 출시할 수 있습니다.운영 오버헤드를 줄이고, Kubernetes 애플리케이션 실행으로 인한 운영 오버헤드를 줄이고, EKS 업그레이드를 단순화하여 비즈니스에 정말 중요한 일에 집중할 수 있습니다.다음을 통해 비용을 절감할 수 있습니다.
Amazon EKS Auto Mode는 애플리케이션 가용성을 유지하고 동적으로 적절한 크기를 조정하여 성능을 개선합니다.
자동으로 계산합니다.마지막으로, 자동 모드는 기본적으로 안전합니다.컨테이너에 최적화된 운영 체제, 자동화된 운영 체제 패치, 일시적인 시간 제한 컴퓨팅을 통해 보안 태세를 강화합니다.따라서 자세히 알아보려면
Amazon EKS 자동 모드에 대해 설명했는데 빌더 세션에 참석하지 못했습니다.
오늘 아침 윈 (Wynn) 에서는 다른 곳으로 가실 수 있습니다.
내일 3시 30분부터 4시 30분까지 MGM에서 스트립 옆에서 다른 공연을 관람하거나 블로그 또는 사용 설명서를 읽어보세요.
아마존 EKS 자동 모드에 대해.여기서는 모든 사람이 휴대폰에서 사진을 찍거나 링크를 열 수 있도록 잠시만 남겨 두겠습니다.(군중 수다) 좋아요, 그리고 그것도
시간을 내주셔서 정말 감사드리며, EKS Auto Mode를 사용하여 멋진 것들을 만들어 낼 수 있기를 기대합니다.정말 고마워요.(참가자들의 박수 갈채)