- 그래서 이 강연은
Amazon EKS로 프로덕션 수준의 복원력이 뛰어난 아키텍처를 구축하십시오.간단히 말해서 아마존을 구축하는 것입니다.
복원력이 뛰어난 EKS 클러스터.제 이름은 카를로스 산타나입니다.저는 기타를 치지 않아요.저는 항상 그런 농담을 해야 해요.(청중들 웃음) 그럼 넌 집에 갈 수 있잖아
여기 라스베이거스에 있는 블루스 오브 블루스. 카를로스 산타나의 음악을 들어볼게요.하지만 저는 시니어 스페셜리스트입니다.
EKS와 ECS가 포함된 컨테이너의 솔루션 아키텍트그리고 저와 함께 니얼도 있습니다.그는 수석 전문가예요.
컨테이너 솔루션 아키텍트 (둘 다 EKS 사용)
그리고 ECS도 거의 그렇죠?하지만 오늘은
EKS를 사용하여 AWS에서 실행되는 쿠버네티스에 대해 말씀드리겠습니다.그래서 오늘의 안건으로는 선택할 수 있는 주제가 많았습니다.한 시간 동안 세션을 진행했는데 몇 가지를 골라야 했어요.
플랫폼 관련 스토리를 구성하는 요소들이 한데 어우러져 있습니다.
엔지니어링은 EKS를 기반으로 하기 때문에 관리, 옵저버빌리티, 거버넌스에 대해 이야기하기로 했습니다.그게 전부입니다.
오늘 얘기할 내용은요.플랫폼에 대해 말하자면누구나 플랫폼과 빌더를 만들기 시작하죠?이들은 클라우드 리소스를 담당하는 사람들입니다.
조직 내에서 말이죠.플랫폼을 만드는 요소는 무엇일까요?
팀을 위한 구축입니다.팀별로 조직되어 있습니다.그런 다음 애플리케이션을 실행하여 AWS에서 실행하고 인프라를 갖추게 됩니다.거의 대부분 엉망진창입니다.
세 가지 측면으로 요약할 수 있습니다.팀도 있고, 그런 것들을 배치할 수 있는 애플리케이션도 있습니다.
애플리케이션은 인프라 어딘가에 있습니다.플랫폼에 대해 말씀드리자면, 이 플랫폼이 바로 이런 플랫폼이라는 것입니다.
엔지니어들은 추상화를 만들고 추상화를 가속화합니다.
AWS에서 이러한 애플리케이션을 구축하여 클라우드 인프라를 제공합니다.
팀의 자율성을 통해 가능한 한 쉽게 진행할 수 있습니다.이것은 다음과 같은 통계입니다.
2024년 7월, 지난 7월, EKS와 관련하여 AWS에서 관리하는 클러스터가 더 많습니다. 전년 대비 33% 성장했습니다.따라서 클러스터의 양은
구성, 배포, 관리, 업그레이드를 하는 사람들이 해마다 증가하고 있습니다.거기에는 통계가 하나 있습니다.그리고 플랫폼 팀이 이 클러스터를 관리할 때 겪는 어려움은 무엇일까요?그래서 오늘은
세 가지 영역을 살펴보겠습니다.하나는 이 라이프 사이클의
배포부터 업그레이드까지의 클러스터 개발 방법
일관된 에코시스템 프로세스.다음은 최선을 다하는 것입니다.
모든 클러스터를 모니터링하지 않는 것이 좋습니다.
애플리케이션도 마찬가지입니다.하지만 오늘은 클러스터와 시스템별 소프트웨어에 더 집중할 계획입니다.
이는 해당 클러스터에서 실행됩니다.마지막으로 가드레일을 제공하는 것입니다.
이러한 클러스터를 필요로 하는 팀을 지원하고 적절한 클러스터를 제공하기 위해서입니다.
어느 정도의 자율성, 맞죠?그들에게는 클러스터가 필요하고 개발자들도 필요하지만 가드레일이 필요하죠.자, 그럼 먼저
경영의 첫 번째 주제입니다.이게 바로 그 모습입니다.우리는 일반적으로 고객을 봅니다.
리포지토리 Git 리소스 사용일종의 인프라
테라폼, 클라우드포메이션과 같은 코드 툴링으로 말이죠.여기 계신 분 얘기 들었어요
청중들이 CDK에 대해 이야기하는 거죠.풀루미 (Pulumi) 및 기타 국가 기반 시설
S3와 같은 오브젝트 스토어.그런 다음 클러스터를 배포할 것입니다.그러면 같은 것을 사용하게 될 것입니다.
Kubernetes 리소스를 배포하기 위한 코드 도구로서의 인프라를 통해 이러한 리소스의 상태를 저장합니다.
동일한 위치에 있는 쿠버네티스 리소스는 다음과 같습니다.
S3 버킷을 예로 들 수 있습니다.쿠버네티스 리소스의 경우
이는 실용적일 수 있지만 단순 클러스터의 경우
관리, 전혀 문제 없어요.그리고 나서 상황이 커지기 시작하죠.그러면 플랫폼 엔지니어인 당신은
해당 팀에 또 다른 EKS 클러스터가 필요하기 때문에 요청을 받기 시작합니다.그럼 복사해서 붙여넣는 거죠?그 파이프라인이 그걸 움직이게 하죠.
그러면 두 번째 클러스터를 만들고 새 파이프라인을 생성합니다.그러면 이 수준에 도달합니다.그러니 손을 들어주세요. 만약
이런 모양의 조직이 있으시군요.파이프라인이 많아서
많은 EKS 클러스터 배포.규모가 커질수록 성장도 계속됩니다.이런 상황은 감당할 수 없게 됩니다.파이프라인 버전이 너무 많습니다. 어떤 클러스터가 최신 상태인지 추적하기 위해 복사하여 붙여넣어야 하기 때문입니다.각 클러스터의 내부에 무엇이 들어 있는지는 생각하지 않아도 되는 거죠?리소스와 애플리케이션.많은 것을 보는 것은 드문 일이 아닙니다.
우리 조직의 파이프라인.이거 눈송이가 엄청 많죠?각각 개별적으로 클러스터라고 할 수 있지만 자세히 보면 버전이 다릅니다.그럼 애플리케이션은 무엇일까요?
안에 있어요?그리고 각 파이프라인에는 이전 버전의 파이프라인이 있습니다.그렇다면 관리 측면에서 다시 말씀드려야 할 주요 과제는 무엇일까요?관리되지 않는 경우
클러스터의 성장, 몇 가지 주요 과제는 무엇입니까?전반에 걸친 표준 적용
클러스터 플릿.자, 이제 이야기를 나눠볼까요?
클러스터 플릿은 자동화하기가 어려워지고 있습니다.
이러한 배포.자동화가 있다면 어떻게 구성해야 할까요?
이들 모두를 위한 단일 정보 소스인가요?관리 불능 상태가 되는 경우
너무 많은 오픈소스 프로젝트로 인해 통제 불능 상태가 되는 것이죠.팀은 전문가가 될 수 없습니다.
클러스터에 추가한 모든 애드온에.마지막으로 워크로드 관리입니다.가장 적합한 제품을 찾는 방법
인스턴스 유형 (EC2를 워크로드에 연결하는 경우)?또한 비용도 발생합니다.
그 위에 최적화가 있죠.그러니까 이건
현장에서 볼 수 있죠.나랑 니얼, 우리 작업하고 있어
고객이 있는 현장, 아마 여러분 중 몇 분이실 겁니다.그리고 우리는 고객과 함께 일합니다.
EKS 클러스터를 구성 및 배포하려는 고객,
일종의 패턴을 만들거나 이런 팀에게 어떻게 서비스를 제공할 수 있을까요?
조직 내에 있는 것들이죠.따라서 클러스터를 통해 조직을 프로비저닝하는 방식을 많이 볼 수 있습니다.서비스형 템플릿,
웹 사이트에 있습니다.플랫폼 팀처럼 진입 장벽이 낮기 때문에 처음에는 많은 플랫폼 팀에서 사용합니다.
예를 들어, 템플릿을 만들어 개발팀에 주면 개발팀에서 클러스터를 만들죠.하지만 이렇게 되면 스케일 관리가 어려워지죠.개발팀은 어떻게 될지 짐작할 수 있을까요?클러스터를 업그레이드하기 위해서가 아니에요.플랫폼을 사용하는 경우
EKS 클러스터를 다루는 팀이라면 다음과 같은 사항이 필요하다는 것을 알고 계실 것입니다.
업그레이드하고, 패치를 적용하고, 새 업데이트를 출시하세요.그냥 그걸 주면 돼요
개발팀을 위한 템플릿입니다.그들은 한 번만 실행하고 다시는 돌아가지 않을 것입니다.
해당 클러스터를 업그레이드하세요.플랫폼 팀이 더 많은 수익을 올립니다
소유권, 서비스 제공그럼 우리가 무엇을 광고하는지 살펴보죠.첫 번째는 고객입니다.
서비스형 클러스터, 팀에 클러스터를 제공하지만 플랫폼 팀은
클러스터 자체 관리, 클러스터 자체 관리, 해당 클러스터가 제대로 작동하는지 확인
클러스터를 업그레이드하고 애드온을 업그레이드하는 것들이죠.또 다른 하나는 서비스로서의 네임스페이스입니다.따라서 서비스로서의 네임스페이스는 팀에서 논의하거나 팀에게 리소스가 얼마나 많은지 묻는 양식일 수도 있습니다.
네임스페이스가 필요한가요?그래서 플랫폼 팀은
리소스 할당량과 쿠버네티스를 다음과 같이 설정할 수 있습니다.
구성하거나 범위를 제한할 수 있는 API 또는
요청 및 제한의 기본값입니다.그러면 이 플랫폼 팀에서 만든 네임스페이스를 얻을 수 있습니다.그러면 팀이 할 수 있습니다.
내부에 배포하세요.그리고 마지막은 아마도
팀, 플랫폼 팀에 지원해야 할 유일한 팀은 저에게 신청서를 주는 것뿐이에요.
리플 하나 드릴게요.그리고 그들은 자신들의 애플리케이션이 쿠버네티스에서 실행되고 있다는 사실을 모르고 있습니다.그들은 무엇에만 신경을 씁니다.
Git에 애플리케이션 설치하기.그리고 플랫폼
팀이 인프라 관리로부터 격리되고 앱에만 집중할 수 있도록 해당 애플리케이션을 가져와 컨테이너를 구축하고 애플리케이션을 배포합니다.그래서 마지막 버전을 가져가겠습니다.
여기 GitOps를 사용하고 계신 분들 중에 아주, 아주 익숙하신 분이 계신가요?좋아요.그럼 뭐가 뭔지 공감하실 수 있겠죠.
GitOps를 사용할 때 얻을 수 있는 이점과 이를 기반으로 플랫폼을 구축할 수 있는 방법론을 관리할 수 있는 방법.반복 구성을 사용하면 복잡성이 줄어들죠?Git을 사용하면 변경 사항을 추적하고 가시성을 높일 수 있겠죠?따라서 롤백도 가능하죠.자동으로 적용되는 보안 표준이 있는 경우
보안을 강화하세요.그러니까 이건
예전에 현장에서 몇몇 팀이 있는 것을 본 적이 있습니다.
보안팀은 GitOps를 사용할 수 있다는 것을 알고 있습니다.
자체 소프트웨어 또는 정책이 자동으로 설정되도록
실제로 GitOps를 배우기 시작하는 모든 EKS 클러스터에서 말이죠.그리고 그게 바로
현장에서 배웠어요.그리고 누군가 실수를 하거나 실수로 어딘가에 변화를 일으키면 자동으로 조정될 수 있다는 것을 확신하고 싶을 때
다시 바뀐 거 맞죠?자동으로 롤백하세요.그래서 GitOps에서는 항상
원하는 상태를 현재 상태와 조정합니다.자동 동기화가 가능한 경우입니다.다양한 방법이 있습니다.
GitOps를 구성하는 방법.따라서 수동 또는 자동으로 설정할 수 있습니다. 조직과 환경에 따라 다릅니다.
함께 작업하고 계신 거죠.GitOps를 사용하여 EKS 클러스터를 배포하고 업그레이드하려는 경우 어떤 것이 있는지 살펴보겠습니다.
재료 명세서 같네요.개략적으로 말씀드리자면, 다음과 같은 경우 고려해야 할 세 가지 주요 영역이 있습니다.
조직의 EKS 클러스터에 구성되어 있습니다.그 외에도 더 많은 것들이 있습니다.
이미 EKS와 협력하고 계시잖아요.하지만 이 예제에서는 대화를 고려해 보겠습니다.
그 중 세 가지 정도요.첫 번째는 컨트롤 플레인입니다.이게 바로 제가 좋아하는 것입니다.
AWS API로 구성할 수 있는 EKS 서비스의 구성.암호화를 원하시나요?
예를 들어 FCD에?또는 구성을 원하실 수도 있습니다.
Amazon EKS의 최근 기능인 클러스터 액세스 관리는 사용자 중 일부가 사용했던 기능입니다.
구성 맵을 사용할 수도 있습니다.이제 구성 맵을 사용할 필요가 없습니다.클러스터 액세스 관리를 사용할 수 있으며 이를 구성할 수 있습니다.
앞서 말했듯이 EKS의 주소 API를 통해 말이죠.다음은 포드 아이덴티티입니다.사용하고 계셨을 수도 있습니다.
(불명료), 서비스를 구성하는 그런 것들
주석이 달린 계정.이제 더 좋거나 새로운 접근 방식이 생겼습니다.
포드 아이덴티티와 함께 말이죠.그 구성은 실제로 다음과 같이 합니다.
서비스를 연결할 수 있는 EKS 서비스의 주소 API
IAM 역할이 있는 계정그리고 가장 중요한 것은 업그레이드입니다.
쿠버네티스 버전은 EKS 1.30에서 1.31로 변경되어 마이너 릴리스를 업그레이드하는 것과 같습니다.그게 바로 그거야
컨트롤 플레인에서 사용할 수 있습니다.몇 가지 말씀드렸듯이, BOM에 대해 고려해야 할 사항이 아주 많습니다.
언젠가는 해당 구성 수준에서 해당 클러스터 또는 여러 클러스터를 동시에 구성하게 될 것입니다.그러면 다음과 같을 수 있습니다.
변화의 한 단위죠.다음은 워커들의 데이터 플레인입니다.쿠버네티스에서는 이를 워커 노드라고 부르는데, 예를 들면 다음과 같습니다.
튜플, 컨테이너 ID.이제 카펜터와 함께라면
EC2를 구성하는 방법을 훨씬 더 잘 제어할 수 있게 되었습니다.
쿠버네티스 API를 사용하는 인스턴스.그래서 제가 쿠버네티스 API를 만나면 보통 여러분이 주도권을 쥐게 됩니다.
차트 또는 YAML 파일.그리고 많은 조직들이 이미 Karpenter helm 차트를 가지고 있는 것을 볼 수 있습니다. 이를 통해 자신만의 차트를 만들 수 있습니다.
클래스, 그리고 더 중요한 것은 테마를 기반으로 하는 풀이 없다는 것입니다.
사용자가 구성할 수 있는 것이죠.그리고 이런 헬름 차트는 보통
GitOps를 통해 배포됩니다.이것이 더 나은 관리입니다.
이를 통해 팀은 풀 없음을 구성할 수 있습니다.
이는 배포 당시의 워크로드와 일치할 수 있습니다.
예를 들어 EC2 인스턴스를 요청하는 포드.마지막은 애드온입니다.그리고 이것은 애드온일 수도 있습니다.
AWS에서 제공한 EKS 애드온 및 기타 유형의 애드온은 쿠버네티스에 배포하는 시스템 전체 소프트웨어입니다.
클러스터는 일반적으로 오픈 소스에서 제공되거나 AWS 파트너 및 공급업체가 제공할 수 있는 헬름 차트 형태로 패키징됩니다.따라서 플릿용 툴링에 GitOps를 사용하려는 경우
관리를 통해 지속적으로 노력하는 프로세스를 만들 수 있습니다.
진실의 출처를 클러스터의 실제 상태와 조화시키세요.우리가 논의한 이 BOM은 쿠버네티스 파일과 Git을 각각 다르게 표현할 수 있습니다.전문가들이 상황을 파악하고 제어할 수 있습니다.
종속성의 정의.자, 이제 다음과 같이 해보겠습니다.
애플리케이션, 인프라, 정책 및 보안이 모두 YAML 파일에 구성되어 있습니다.
이 슬라이드에서는 이름만 말씀드리도록 하겠습니다.
워크숍과 이 프레젠테이션의 단순화를 위해 YAML을 클러스터링하세요.따라서 일단 준비가 되면
앞서 말했듯이 건축 자재의 다양한 영역, 컨트롤 플레인, 카펜터 관련 내용, 애드온의 구성 등 Git에 있는 구성이 있습니다.GitHub도 만들 수 있습니다.
상담원 조정 중.Gits 에이전트가 여기 있어요.이것은 아르고 CD의 아이콘입니다.이 프로젝트는 CNCF 오픈 소스 프로젝트로, 실제로 많은 고객들이 사용하고 있습니다.
이러한 리소스를 조정하는 다른 GitOps 도구를 사용하세요.
쿠버네티스 클러스터로.이 클러스터에서는
ACK와 같은 쿠버네티스 컨트롤러를 클러스터링합니다.거기에 ACK가 있어요.ACK는 AWS 컨트롤의 약자입니다.
쿠버네티스의 경우 오픈 소스 도구이자
AWS에서 완벽하게 지원합니다.제공하는 EKS 팀입니다.
이 오픈 소스 프로젝트.따라서 문제가 있거나 기능 요청이 있는 경우
Git을 열기만 하면 됩니다.Git 리포지토리에서 다음을 열 수 있습니다.
문제를 제기하고 요청하면 팀에서 조사할 것입니다.또한 채널도 있습니다.
쿠버네티스 슬랙에서 말이죠.예를 들어, 이제 ACK가 생겼으니 ACK가 뭔가 될 수 있습니다.
Git을 구성하면 Amazon EKS 클러스터를 만들 수 있습니다.이것이 첫 번째 레이어입니다.
제가 말씀드린 것은 컨트롤 플레인에 관한 것입니다.그런 다음 쿠버네티스 클러스터 내에 Argo CD를 다시 배포하는 것과 같은 시작점이 생겼습니다.그리고 그 아르고 CD가 배포되었습니다.
어느 정도 고립감을 느낄 수 있을 테니까요.이렇게 하면 Argo CD는 해당 쿠버네티스 클러스터만 관리하거나 처리할 수 있습니다.그리고 에이전트로서 말하자면
바로 설정해 두세요.그렇다면 아르고 CD가 바로 그 중 하나입니다.
EKS 클러스터를 관리합니다.따라서 애드온을 배포할 것입니다.예를 들어, 다음과 같은 경우
오픈 소스 카펜터, 우리는 다음과 같은 카펜터를 배포합니다.
워크로드에 대한 메모를 제공합니다.워크로드에 필요한 경우
AWS 리소스 (예: S3 버킷) 에 대한 액세스
해당 클러스터 내에 ACK를 설치하여 애플리케이션에 필요한 S3 버킷을 배포할 수 있습니다.이것이 전형적인 아키텍처입니다.
GitOps를 사용하는 사람들이 이런 용도로 사용합니다.
컨트롤 플레인, 카펜터 둘 다 데이터에 맞게 설정하세요
플레인 그리고 애드온이렇게 하면 할 수 있습니다.
Git에서 모든 것을 YAML 파일로 정의했습니다.
선언적 구성.이제 복원력에 대해 좀 더 이야기해 보죠?이제 우리는 건물을 만들 수 있습니다.
클러스터, GitOps를 사용할 수 있고 오픈 소스를 사용할 수 있습니다.
도구, AWS API를 사용할 수 있고 ACK와 같은 오픈 소스 도구를 사용할 수 있습니다.따라서 클러스터는 많지만 속도가 느리다는 사실은 앞서 들으신 것처럼 많은 조직에서 각기 다른 이유로 클러스터를 여러 개 보유하고 있습니다.용도가 다를 수 있습니다.
지역, 팀, AWS 계정 모두 다릅니다.속도가 빠지면 뒤쳐지고 모든 것을 순차적으로 업그레이드할 수 없습니다.업그레이드가 필요한 경우 한 번 변경하는 데에는 시간이 오래 걸릴 것입니다.
모든 것이 순차적으로 진행되죠.일부 조직에는
수백 개의 EKS 클러스터.하지만 일괄적으로 업그레이드하려면 복원력과 가용성을 보장하기 위해 안전한 차량이 필요합니다.이는 마치 다음과 같습니다.
사람들이 원하는 구성을 스스로 설정할 수 있다고 생각하는 오해인데 갑자기 모든 클러스터가
전 세계에서 한 번에 자동으로 업데이트됩니다.그건 별거 아니에요
그게 베스트 프랙티스입니다.복원력이 높지는 않습니다.따라서 구성 요소의 일관성이 보장됩니다.
버전도 도움이 되고 확장됩니다.이것이 바로 EKS 팀이 작년 reinvent 2023에서 발표한 내용입니다. 통계에서 말씀드린 것처럼 EKS 클러스터의 양이 엄청나고, 해마다 관리하는 클러스터의 수가 증가하고 있습니다.예를 들어 Cube API 서버용 패치가 릴리스된 경우를 예로 들 수 있습니다.Cube API 서버는 컨트롤 플레인에서 실행되는 구성 요소입니다.
이 문제는 AWS에서 처리해 주므로 걱정할 필요가 없습니다.하지만 패치가 필요하죠.업스트림이 있다면 업스트림이란
업스트림 쿠버네티스 프로젝트.전체에 걸쳐 배포해야 할 패치가 있습니다.
우리의 e 클러스터는 전 세계에 있습니다.그게 바로
우리는 매우 진지하게 받아들입니다.하지만 다시 말씀드리지만, 우리는 속도와 탄력성을 모두 가지고 있습니다.
그 균형을 이루며 함께 말이죠.세포 내에서 클러스터를 그룹화하면
폭발 반경 관리에 도움이 됩니다.파동 사이에 굽는 시간이 있는데, 이를 마치 여러 개의 세포가 한 파동으로 나뉘어 업그레이드되는 것과 같죠.사람들이 말하는 이 시간은 굽거나 담그는 시간인데, 양이 많을수록 줄어듭니다.
세포의 수가 늘어납니다.그리고 레벨이 서로 다릅니다.
모든 파동 사이에서 실시되는 테스트의 수
흠뻑 젖을 때까지 기다리는 중이야모든 세포는 그럴 수 있죠.
클러스터가 십여 개 정도 되죠.그리고 유튜브 비디오가 있어요.
이 온라인 강연에 대해따라서 이 패턴을 자체 EKS 클러스터에 적용해 보세요.
조직의 AWS 계정에서.조직 전체에 업데이트를 배포할 수 있는 일종의 플릿 관리를 제공할 수 있습니다.
하지만 복원력이 뛰어납니다.따라서 이것이 어떻게 보이는지는 분명히 조직에 따라 다릅니다.이 예시에서는 어떤 세포가 될 수 있을까요?하나의 세포가 하나의 작업 단위일 수도 있고, 예를 들어 하나의 클러스터일 수도 있습니다.이 개념을 설명하기 위해 다음과 같이 설명하겠습니다.
하나의 세포는 하나의 클러스터입니다.그럼 한 번의 파동으로 얼마나 많은 세포를 만들 수 있을까요?음, 관리가 중요하죠.
속도와 탄력성.진행하면서
자신감이 높아지는 경향이 있습니다.예를 들어 애드온 중 하나를 출시할 때
말씀드렸듯이, 그렇죠?아니면 목수를 바꾸는 거지
모든 e 클러스터에서 사용되는 구성인 클래스는 해당 클러스터에 패치를 적용하기 시작하면 더 안심할 수 있습니다.그러면 패치가 완료될 때까지 기다려야 하는 시간도 줄어듭니다.그리고 더 많이 살 수 있어요.
업그레이드하면 셀이 나옵니다.이 예제에는 웨이브 샌드박스가 있습니다.이것이 하나의 클러스터입니다.
플랫폼 팀이 변경 사항을 테스트하는 데 사용합니다.플랫폼 엔지니어링을 하는 경우 보통 샌드박스라고 부릅니다.그리고 파도가 몰아칠 수도 있습니다.
단 하나의 환경.이 경우에는 다음과 같이 보여드리겠습니다.
다양한 환경.그래서 우리는 dev를 사용하고 당신은 스테이징을 합니다.따라서 스테이징에서는 클러스터를 더 많이 만듭니다.프로덕션 환경에서는 다음과 같이 할 수 있습니다.
클러스터가 증가함에 따라 프로덕션 환경의 모든 클러스터를 업데이트하지는 마십시오.
하지만 보유한 클러스터 수를 나눌 수 있습니다.
프로덕션 환경에서 업데이트해야 합니다.그래서 이 경우에는
프로드 하나와 프로드 투.지역별로 나뉘어 있을 수도 있고 아니면 나뉘어 있을 수도 있습니다.
주소 계정별로 보면 조직에 따라 다를 수 있습니다.하지만 아이디어는 여러분과 같습니다.
파동의 세포 수를 동적으로 늘리면
기다릴 시간을 줄이세요.그럼 실제로 해봅시다.
이에 대한 구체적인 예를 들어보죠.이미 말씀드렸듯이
TAML이 BOM을 정의하는 클러스터입니다.변경이 필요한 경우
예를 들어 EKS 클러스터를 업그레이드하는 경우
이를 Git에 푸시할 것입니다.이제 롤아웃이 시작됩니다.그리고 이 롤아웃은 파이프라인, 즉 사용자가 작성한 사용자 지정 파이프라인일 수 있습니다.프로세스일 수도 있습니다.
수동으로 따를 수도 있고, 티켓팅 시스템과 같은 것을 사용하여 파이프라인과 수동 프로세스를 조합할 수도 있습니다.
변경 관리를 따르세요.하지만 우리는 다음과 같은 도구를 사용하고 있습니다.
GitHub, Argo CD를 사용하여 Argo CD를 사용하여 이러한 롤아웃을 오케스트레이션할 수 있습니다.그래서 웨이브 원 (wave one) 을 예로 들어보죠.
자네가 확인해 보겠지.따라서 업그레이드하기 전에
검사를 자동화하여 업그레이드를 할 수 있는지 아닌지 확인할 수 있습니다.그리고 검사를 통과하면 실제로 업데이트를 진행하게 되죠.업데이트가 끝나면 테스트를 받게 됩니다.그리고 이 테스트는
특정 변경과 관련된 테스트일 수도 있고, 변경한 내용이 무엇인지에 상관없이 항상 하는 테스트일 수도 있습니다.따라서 변경 사항은 다음과 같을 수 있습니다.
컨트롤 레벨, 컨트롤 플레인 레벨에서는
Karpenter의 변경처럼 데이터 플레인 수준에 있어야 합니다.
카펜터의 설정이거나 애드온 중 하나일 수도 있습니다.
BPCC와 I 또는 기타 오픈 소스 프로젝트를 예로 들 수 있습니다.
애드온으로 가지고 있는 것들이죠.그럼 이제 몸을 담글 시간이 생겼습니다.그리고 담그는 시간은 기다려야 하는 시간입니다.그리고 여기 계시면
무슨 일이 벌어지는지 모니터링을 시작할게요.
다음 단계로 넘어갈 수 있도록 시스템이 정상 상태인지 모니터링할 수 있는 충분한 시간을 주는 것과 같습니다.다음 물결은 무엇일까요?웨이브 넘버 2.이 경우, 우리는 증가합니다.
똑같은 검사를 다시 했을 때 알려진 세포 개수만큼 클러스터의 양이 늘어납니다. 그렇죠?검사하고, 테스트하고, 담그죠.그리고 얼마나 많은 시간이 필요할까요?
기다리는 시간이 줄어들죠.그리고 계속되죠.그리고 나서 당신은
아르고 CD로 오케스트레이션하는 거죠.그럼 한 번 살펴보죠.
Argo CD를 사용하고 있거나 다른 도구를 사용할 수도 있지만, 이 경우 Argos는
사람들이 좋아하니까 구체적인 예를 들어보죠.
구체적인 예를 보세요.이건 Argo CD를 사용해서 만든 건데, 선거구를 확인하는 게 어떤 의미인지 알아보도록 하겠습니다.그래서 Argo CD에는 사용자가 구성할 수 있는 시스템이 있습니다.
가능한 프리시넥트 훅은 쿠버네티스 리소스입니다.
특정 어노테이션과 함께 여기서 할 수 있는 일은 게이트입니다.예를 들어 Amazon EKS 업그레이드 인사이트를 사용하여 다음을 수행할 수 있는 API가 있는지 확인할 수 있습니다.
호출하여 수행해야 할 작업이 무엇인지 또는 다음과 같은 경우 확인하십시오.
모든 것이 순조롭게 진행되어 업그레이드를 계속할 수 있습니다.그렇지 않으면 중단하게 됩니다.다른 하나는 설치할 수 있습니다.실제로 업그레이드를 하기 전에 설정해야 하는 항목입니다.로 마이그레이션할 수도 있습니다.
데이터베이스 (예: 워크로드용 데이터베이스)아니면 뭔가가 될 수도 있습니다.
시크릿을 구성하려면 거기에 있어야 할 수도 있고 다른 애드온일 수도 있습니다.
계속 진행하기 전에 상태가 양호해야 합니다.
다음 애드온을 업그레이드하세요.그리고 전제 조건은 CRD일 수도 있습니다.설치가 필요한 CRD.따라서 항상 가지고 계실 수 있습니다
같은 구역이에요.업그레이드가 되더라도 상관 없어요.
아니면 배포일 수도 있습니다.그래서 사람들은 같은 후크를 사용합니다.그러면 실제 상황으로 넘어갑니다.
디플로이먼트는 동적 업그레이드를 하기 위한 Argo CD입니다.그리고 여기가 바로 아르고 CD입니다.
쿠버네티스 API와 통신하면 이를 활용할 수 있습니다.그리고 니얼이 얘기할 거예요.
그 훅에 대해 더 자세히 알아보죠.하지만 후크 이후엔
앞서 말씀드린 테스트를 해봐야겠죠?그래서 Argo CD에는 포스팅 훅도 있어서 몇 가지 작업을 할 수 있습니다.
환경에 대한 유효성 검사 (일부 기능 포함)
애드온의 상태를 확인하기 위한 테스트가 정확합니다. 아마도 EKS 업그레이드가 정확할 수도 있습니다.아르고 인사이트로 돌아갈 수도 있겠네요.AC 작업도 할 수 있습니다.
예를 들어 Jenkins에서 파이프라인을 시작하는 것처럼요.아니면 Argo 워크플로일 수도 있습니다.
CI/CD 파이프라인 또는 워크플로 오케스트레이터인 Argo 워크플로를 사용하는 경우
쿠버네티스 내에서 실행하거나 알림만 실행할 수 있습니다.
모든 것이 순조롭게 진행되었다는 것을요.이제 그걸로 갈게요
Niall에게 전달하여 다음 두 가지에 대해 이야기하겠습니다.
관찰과 통치의 단계. - 좋아요, 안녕하세요, 여러분.고마워요, 카를로스.제 생각엔 그가 CNCF에 올랐던 것 같아요
지금까지 아침을 위한 빙고 카드는 첫 번째 섹션에서 다루었는데요, 이제 그에 대해 얘기해 볼게요
조금 덜 흥미로운 것들이죠.하지만 그래도 우린
프로비저닝 방법에 대한 Carlos의 섹션을 살펴봤으니 이제 기어 전환을 좀 해보겠습니다.
그리고 우리의 멋지고 효율적인 프로세스를 사용하여 이러한 클러스터를 업그레이드하세요.산호초 지역으로 방향을 바꾸고, 여기서 관측 가능성부터 시작하겠습니다.그래서 저는 그렇게 생각하지 않아요.
슬라이드를 넣지 않고 “옵저버빌리티”라는 단어가 있는 AWS 프레젠테이션이 있습니까?
그렇긴 하지만, 쉽게 이해할 수 있는 인용문입니다.그래서 여기에 던졌어요.하루가 끝나면 클러스터가 하나 있든 100개가 있든 상관없이 모든 것이 망가질 거예요이를 위한 전략이 필요합니다.
문제를 찾고, 감지하고, 해결하도록 도와주세요.만약 그렇게 할 수 없다면
플랫폼 팀으로서 우리는 개발자들이 신뢰할 수 있는 서비스를 운영할 수 없습니다.그래서 이 섹션에는 둘 다
그리고 다음 섹션은 시간이 없어요
옵저버빌리티 101을 해보세요.대신, 우리가 뭘 할 건데
해야 할 일은 특히 우리가 본 몇 가지 영역에 초점을 맞추는 것입니다.
이러한 특정 영역에서 어려움을 겪고 있는 고객을 몇 번이고 생각해 보십시오.
클러스터를 대규모로 운영할 때 말이죠.심지어 그럴 수도 있습니다.
클러스터가 10개에 도달하기 시작하면 이러한 문제가 발생할 수 있습니다.
매우 빠르게 나타납니다.하지만 이 문제는 좀 더 살펴보도록 하겠습니다.
하나씩 살펴보세요.그럼 첫 번째 영역은
역할과 책임.카를로스는 이미 위에서 언급한 바 있습니다.
프레젠테이션의 시작 부분에 적어도 대부분의 사람들은
고객이 관리를 시작할 때 우리가 상담하는 고객
많은 EKS 클러스터는 보통
플랫폼 팀을 중심으로 조직적으로 구성되어 있습니다.
그리고 애플리케이션 팀.그게 필요한가요?아니요, 하지만 뭐 그런 경향이 있어요.
현장에서는 많은 클러스터에서 EKS 사용을 확장할 수 있는 효과적인 방법이라고 보고 있습니다.이제 플랫폼 팀은 일반적으로 단순한 팀이 아닙니다.
클러스터 팩토리 맞죠?이름에서 알 수 있듯이
일반적으로 어떤 식으로든 더 많은 것을 제공합니다.
옵저버빌리티 영역에서 개발 팀이 신뢰할 수 있는 공유 기능.옵저버빌리티 인프라 자체를 관리하는 것일 수도 있습니다.하지만 경우에 따라 대시보드와 알림을 미리 프로비저닝할 수도 있습니다.
애플리케이션 팀을 온보딩하여 더 빠르게 시작하고 실행할 수 있도록 하세요.하루가 끝날 무렵
플랫폼 팀은 이러한 클러스터를 계속 가동할 책임이 있습니다.그들은 클러스터를 만들어 벽 너머로 던지는 게 아니에요.그건 정반대예요.
우리가 찾고 있는 것이죠.우리는 그들이 제공해주길 바래요.
개발팀, 즉 개발팀이나 고객을 위한 서비스, 맞죠?이것이 바로 우리가 생각하는 방식입니다.이것이 제품으로서의 플랫폼이라는 개념의 전부이며, 이를 수행하는 방식을 반영하는 옵저버빌리티 전략이 필요합니다.따라서 애플리케이션의 경우
여기서 팀이 서비스와 신뢰를 신뢰하는 것이 매우 중요합니다. 잠깐 얘기해보죠.
이에 대해서도 나중에 설명하겠습니다.플랫폼 팀은 다음에서 오는 신호를 모니터링해야 합니다.
애플리케이션 팀이 워크로드 신호를 모니터링하는 동안 클러스터는 지속적으로 모니터링됩니다.플랫폼 팀이 작업 중입니다.
대시보드 및 알림을 모니터링하기가 어렵습니다.
클러스터에서 돌아오는 계측 및
앱 팀이 의존하는 신뢰할 수 있는 서비스를 제공합니다.아마 많은 분들이 이미 이 여정을 시작하셨을 겁니다.아시다시피, 고객이 단순히 막대한 투자를 통해 시작하는 것을 보는 것은 드문 일이 아닙니다.
대시보드에서 말이죠, 그렇죠?대시보드는 쉽고 보기에도 좋습니다.시스템에 텔레메트리를 적용할 수 있습니다.대시보드에 설치하고
옵저버빌리티를 만들고 계시는데 모든 것이 훌륭합니다.
문제를 찾을 수는 있겠지만, 분명히 이것은 효과적인 확장성이 그리 빠르지 않습니다. 그렇죠?시작하자마자
몇 개의 클러스터를 모니터링하면 앉아서 기다리는 대시보드를 쳐다볼 필요가 없습니다.
폭탄이 터지길 바래요.그보다 좀 더 효과적으로 확장할 수 있는 무언가가 필요해요.아주 빠르게, 당신은
알다시피, 사람들은 의존도가 높은 선상에서 무언가로 이주하게 될 것입니다.
사전 알림에 대해 자세히 알아보세요.플랫폼 팀으로서 다시 말씀드리지만, 이 부분에 대해서는
신뢰의 경우, 이상적으로는 고객이 신뢰조차 하지 않는 것이 좋습니다.
문제가 있으면 알아차리세요.어떤 문제가 발생하여 일부 클러스터가 고장나는 경우 이에 대해 알고 싶습니다.
그리고 그 사람들이 그걸 알아차리기도 전에 고칠 수 있으면 좋겠어요.우린 절대 그렇게 되고 싶지 않아요.
망가졌다고 우리에게 말해주는 것에 의존하는 건
이것이 바로 플랫폼 팀과 플랫폼 간의 신뢰가 근본적으로 무너지기 시작하는 방식입니다.그리고 이것이 현실로 이어지기 시작합니다.
우리가 항상 얘기하는 주제, 즉 플랫폼 채택에 대해서요.신뢰가 무너지면
플랫폼 팀과 애플리케이션 팀 사이에서는
그러면 다음과 같은 문제가 빠르게 발생합니다.
그들은 당신의 플랫폼을 사용하고 싶어하지 않을 거고 당신은
이러한 사전 예방적 알림을 제공하고, 이와 상관없이 클러스터를 계속 가동하고 실행할 수 있는 매우 사전 예방적인 접근 방식을 취함으로써 신뢰를 유지할 수 있어야 합니다.
카를로스가 보여준 스펙트럼의 어느 부분에 착륙 가능했든 말이지요.당신이 그냥 살더라도
그들에게 클러스터를 빌려주고 그 패턴은
여기서 얘기하고 있는 건데, 그걸 유지하는 것은 여러분의 책임입니다.따라서 여기에는 견고한 시스템이 필요합니다.알림도 있고, 그냥 있으면 돼요
알림은 그 자체로도 몇 가지로 끝나버립니다.
여기 다른 구멍이 있네요.경고 피로는
이 시점에서는 오래된 용어입니다.모두가 알고 있죠.따라서 적절한 알림을 받는 것이 중요합니다.
분명히 매우 중요하지만 알림 자체가 있다고 해서 문제를 해결할 수 있는 것은 아닙니다.그리고 지원 규모를 늘리기 위해서요.
조직, 운영 관련 책도 함께 준비해 두어야 합니다.
알림에 효과적으로 적용되므로 플랫폼 팀을 확장하고 사람들이 문제를 해결할 수 있습니다.
새벽 2시에 알림을 받고 서두르지 않을 때 문제가 발생합니다.
문서를 통해서요또한 다음과 같은 것
여기 슬라이드에 내용을 입력해 주세요. 하지만 자동 수정 기능이 점점 더 많이 등장하기 시작하면서
점점 더 패턴에 가까워지기 시작하죠.제가 CubeCon에 있었다는 거 알아요
몇 주 전에 공급업체 현장에서 제가 가장 많이 본 것은 운영 문제 해결 공급업체였던 것 같아요. 지금은 꽤 괜찮아졌어요.
엑스포에서는 무거웠어요.찾을 런북이 없다면 결국에는 이러한 프로세스를 자동화할 수 없게 될 것입니다.그러니까 이건
사람들은 오랫동안 이 일을 해왔지만, 자동화의 트렌드가 보이기 시작하면서
늘려보세요. 런북이 있다면, 이러한 런북을 가져와 잠재적으로 적용할 수 있는 도구가 점점 더 많이 등장하고 있습니다.
자동으로 여러분을 위해 말이죠.이제 이 런북을 갖고 싶은 새로운 동기가 생겼군요.
사실 미리 정해놓았죠.그리고 드디어 이걸 가져갔어요지금까지 말씀드렸듯이
모든 클러스터를 관리하는 것과는 직접적인 관련이 없을 수도 있지만, 카를로스가 앞서 알려준 멋진 지속적 전달 흐름은 제 관점에서는
기본적으로 이 작업을 수행하기 위한 프로세스에 피드백 루프가 있어야 한다는 전제 조건이죠?Carlos가 말했듯이 EKS 서비스 팀은 이렇게 운영됩니다.
해당 셀을 통해 배포되고 있기 때문입니다.
이러한 물결을 통해 사전 예방적 경보는 프로세스가 필요한지 아닌지를 알려주는 무언가가 됩니다.
계속할지 말지, 그렇죠?그들은 앉아서 보고 있는 게 아니에요.
상상할 수 있는 것과 같은 대시보드.다른 한 가지 분명한 것은
여기서 진행하면서 카를로스는 테스트에 대해 이야기했습니다.그래서 우리한테는 이상한 일이 아니에요.
샌드박스 클러스터에서 테스트하고 업그레이드할 수 있는 방법을 만들었을 수도 있는 플랫폼 팀과 이야기를 나누기 위해서요.기능 테스트에 사용하는 소규모 클러스터가 있을 수도 있습니다.그러면 밝혀질 수 있을 것입니다.
몇 가지 문제를 발견하세요.하지만 진행하면서
스테이징과 배포가 시작되고 하루가 끝날 무렵에는 여러분의 파도가 무엇인지 알 수 없습니다.문제를 발견하게 될 거예요.
dev에서는 찾을 수 없는 것들이죠.그리고 계속 할 수 있어요
테스트를 반복하면서 계속 찾아보세요
이런 문제들은 앞서 말씀드렸죠.하지만 하루가 끝날 무렵
몸을 담그는 기간은 무언가를 모니터링하고 사물에 대해 경고를 보내는 경우가 아니라면 유용하지 않습니다.저는 효율적으로 정렬할 수 있는 자동화된 방식을 사용하는 것이 이상적입니다.
프로세스의 회로 차단기 역할을 하죠?그러니까 이 강력한 경고 모음은
결국에는 롤아웃이 진행되는 동안 롤아웃을 취소하는 데 사용할 수 있는 메커니즘이 될 뿐입니다.
문제가 생기기 시작하죠.그러니까 이런 종류의 피드백이 연속되는 전체에 다시 돌아오게 되죠.
전달 프로세스.아마도 이것은
질문을 많이 받는데, 더 좋은 답변이 있었으면 좋겠어요.당신을 위한 리스트가 있었으면 좋겠어요.
모니터링해야 하는 항목과 경고 임계값에 대해가지고 계신 분 있으면 보내주세요.하지만 하루가 끝날 무렵
여러분 중 상당수는 이미 쿠버네티스를 실행하고 있습니다.컴포넌트가 얼마나 많은지 아실 겁니다.
클러스터에 설치할 수 있습니다. 클러스터에서 실행할 수 있는 워크로드의 수를 알 수 있습니다.상당히 어려울 수 있습니다.
아시다시피, 우리가 할 수 있는 몇 가지 일을 알아내는 것
그냥 이걸 모니터링한다고 말하면 괜찮아질 거예요이런 것들 중 몇 가지, 멋진 것들이 몇 가지 있습니다.
온라인에서는 벤치마크로 사용할 수 있지만 제 생각에는 대신
정말, 우리가 얘기하고 싶은 내용을 목록으로 보여드리려고 합니다.
여기서는 이 작업을 효과적으로 수행하기 위해 모니터링해야 하는 사항의 범위를 강조한 것일 뿐입니다.문제가 발생할 경우 배포가 중단될 수 있다는 확신을 갖고 프로세스를 신뢰하기 위해서입니다.이것은 무엇이든 될 수 있습니다.
업그레이드 후 Kubernetes 컨트롤 플레인의 오류율이 증가했나요?노드가 정상적으로 작동하고 있나요?코어 DNS 지연 시간이 증가했나요?코어 DNS는 2024년에도 여전히 문제가 있습니다.그리고 가능하다면 우리의 문제를 이해할 수 있을까요?
업그레이드를 완료하면 고객의 워크로드가 저하되고 있나요?그렇죠?개발자 팀에서 오류가 발생했나요? 죄송합니다. 애플리케이션 A, B,
C에서는 지연 시간이 더 길거나 오류율이 더 높습니다.그리고 만약 우리가 특별히 할 수 있다면
이런 종류의 정보는 우리가 이해하는 것뿐만 아니라
우리가 제공하는 클러스터의 상태, 하지만
개발자에게 제공하는 경험의 건전성.자, 최근에
이와 관련해서 출시되었는데, 저희가 출시한 것은
지난 몇 주 동안 개선된 EKS 클러스터를 출시했습니다.
컨트롤 플레인 모니터링: 이제 컨트롤 플레인에서 다양한 추가 메트릭을 얻을 수 있습니다.
꼭 확인해 보셔야 합니다.링크를 몇 개 추가해 볼게요.
세션 말미에 있는 관련 자료 중 하나는
하지만 이렇게 하면 다음과 같은 전체 지표를 얻을 수 있습니다.
이전에는 없었던 메커니즘뿐만 아니라 추가 메커니즘도 있습니다.
다음과 같은 기능을 중심으로 콘솔에 내장되어 있습니다.
감사 로그 등을 검토하여 문제를 식별합니다.이는 훌륭한 최근 출시였기 때문에 이를 활용할 수 있습니다.자, 엄밀히 따지자면, 엄밀히 따지자면, 아마도 변화가 있을 수 있다는 것을 염두에 두겠습니다.
잠깐 끄면 클러스터 인벤토리를 들 수 있습니다.그러니까 이건 좀 덜 중요하죠.
아시다시피, 문제 발견과 문제 해결
문제점 등, 조직의 모든 클러스터를 파악하려면 어떻게 해야 할까요?특히 규모가 커지기 시작할 때, 특히 시작하면서
지역 전체로 확장해야 하지만 계정 및 전체
AWS 조직, 맞죠?탐색이 까다로울 수 있습니다.
모든 콘솔 화면 사이에서 무슨 일이 벌어지고 있는지 추적하세요.
종합적으로 보면 여러 가지 방법이 있습니다.
이 문제를 해결할 수 있다는 것이죠.공급업체 도구를 사용해 문제를 해결하는 사람들을 볼 수 있습니다.그들이 Grafana를 사용하는 것을 볼 수 있습니다.
옵저버빌리티 툴링도 포함해서요.우리가 보기 시작한 것 중 하나는 개발자를 사용하는 사람들이었습니다.
Backstage와 같은 포털이죠.전에 직접 보셨다면 저는 Backstage의 열렬한 팬입니다. 하지만 일부 고객, 특히 Kubernetes 기본 고객이 정보 수집 기능을 사용하기 시작하는 것을 본 적이 있습니다.
개발자 포털로 연결되는 EKS 클러스터에 대해 말하자면
Backstage와 같은 오픈 소스 제품이든 동등한 기능을 제공하는 공급업체 제품이든 상관 없습니다.따라서 교차 계정을 얻을 수 있습니다.
현재 있는 모든 클러스터의 리전 간 뷰입니다.아마도 이 옵션이 다른 옵션보다 더 나은 옵션이라고 생각합니다.
우리가 보고 있는 접근법으로는 자체 포털을 처음부터 맞춤 웹 앱으로 구축하는 것과 같습니다.Backstage 이전에는 많은 사람들이 개발자 포털을 이용했었죠.하지만 이건 제가 하는 일이에요.
점점 더 많은 것들이 보이기 시작한 것 같아요
고급 쿠버네티스 사용자는 다음과 같은 이점을 활용합니다.
모든 클러스터의 집계 목록뿐만 아니라, 특히
Backstage와 같은 도구는 매우 유연합니다.
커스터마이징하고 시작할 수 있는 기회를 제공합니다.
EKS에서 제공하는 정보뿐만 아니라
관련 시스템에서그럼 기본적인 것부터 시작해볼 수 있겠죠?어쩌면 우리의 계정 ID일 수도 있겠죠.
AWS 지역, EKS 버전, 애드온 버전, 그냥
API와 일부 위치에서 기본 정보를 가져올 수 있지만 그때부터 시작할 수 있습니다.
여기에 비용 탭과 같은 추가 정보를 추가하세요.
큐브 비용이나 오픈 코스트에서 정보를 가져올 수도 있습니다.어쩌면 우리가 제공하기 시작할지도 몰라요
Backstage의 정책 위반 및 조사 결과에 대한 피드백 및
같은 곳으로 가져와SLO를 보여줄지도 몰라요
클러스터링을 통해 개발팀이 과거 가용성을 확인할 수 있습니다.
해당 클러스터의 사용 현황이 확인되었습니다.그렇죠?다시 말씀드리지만, 모니터링 도구는 아니죠.
하지만 이 클러스터가 어떻게 운영되고 있는지를 미리 보여드리기 위한 것일 뿐입니다.
사용자, 관리자 또는 누군가가 그 작업을 수행하고 있었습니다.
다른 사람들이 미리 살펴보기 위해 한 번 살펴보기만 하면 됩니다.그리고 다시 만들고 싶지 않은 정보가 있다면
개발자 포털 사이트인 Backstage에 있는 다른 모든 도구들을 저희가 제공하기 시작합니다.
우리가 가야 할 모든 곳으로 연결되는 링크를 보내주었죠?우린 없애려고 하는 중이야
특히 어디에 있는 큰 책갈피 폴더
클러스터가 100개라면
크롬에서 이 모든 것들을 추적하려고 애쓰느라 고생한 건 꽤 안 됐어.그래서 저희는 딥링크를 제공합니다.
특정 클러스터의 모든 위치로 이동할 수 있으므로
단일 창뿐만 아니라 출발점이 되기도 합니다.
실제로 필요한 다른 모든 시스템에도 적용할 수 있는 경우가 많습니다.
클러스터를 실행하세요.그리고 그게 바로 그걸 제공해주죠.
함대를 누비며 항해할 수 있는 기반이죠.마지막으로 말씀드리자면
이게 관계에 유용하다고 생각해요.따라서 개발자 포털에서 호출하는 내용 간의 관계를 표현할 수 있는 것은 드문 일이 아닙니다.
카탈로그에 있는 항목.그리고 스테이지 케이스에서는
엔티티일 수도 있겠죠.어떤 워크로드와 같은 것을 모델링하기 시작할 수 있습니다.
특정 클러스터에 따라 달라집니다.그 다음은 팀 소유권입니다.
이미 백스테이지에서 전형적인 모델을 만들었죠.이제 각 클러스터에 종속되는 클러스터를 모델링할 수 있습니다.
어떤 워크로드가 서로 종속되어 있는지 이해함으로써 서로 연결될 수 있습니다.이제 우리 회사에 대한 메타데이터를 그래프로 만들어 볼 수 있습니다.
클러스터, 워크로드, 그렇지 않은 조직에 대해서는 이야기하지 않겠습니다.
포드와 디플로이먼트, 이런 것들이 어떻게 적합한지에 대해 조직적으로 논의하고 있습니다.
함께 힘을 모아서 변화가 미치는 영향이나 폭발 범위를 이해하기 시작할 수 있을 거예요. 뭔가 알아내야 할 부분이 있다면 말이죠.아니면 이 클러스터가 만약에 있다면 어떤 영향을 미칠까요?
여기 사진은 단순한 문제가 아니라 그냥 밑으로 내려간 겁니다.
워크로드와 팀, 하지만 워크로드가 상호 연결된 다운스트림 클러스터의 관점에서 말이죠.이제 시작해볼 수 있습니다.
이 그래프를 만들어서 말이죠.이 모든 것이 가능하죠.
자동으로, 그렇죠?이걸 수동으로 할 필요는 없어요.바로 지난 주에 오픈소스로 공개했습니다.
이제 인제스트할 수 있는 Backstage용 새 플러그인
AWS 인프라를 백스테이지로 바로 사용할 수 있습니다.
AWS 구성을 통해 카탈로그를 작성할 수 있습니다.즉, 거기
기존 플러그인이 몇 개 있었는데, 이전에 일부 플러그인을 사용했는데 특정 AWS 서비스 측면에서 약간 고르지 않았습니다.이제 구성에 있는 모든 것을 바로 가져올 수 있습니다.
백스테이지에 EKS 클러스터를 포함한 다음 매핑합니다.
종속성 측면에서는 태그와 같은 것을 사용하여 그래프를 작성합니다.
완전히 자동으로 아이디어를 얻기 시작합니다.
이게 어떻게 어울리는지에 대해서요.비슷한 맥락에서 카를로스가 얘기했죠.
가드레일에 대해 시작해보죠.정부 얘기 좀 해볼게요.주제 중 하나는
카를로스가 앞서 이야기한 것은 일관성이었죠?100개의 EKS 클러스터를 보유한 고객과 이야기를 시작했을 때
반드시 그럴 수는 없습니다. 그렇지 않으면 관리하기가 더 어려워집니다.
일관성의 척도.카를로스가 말한 건
아까 말씀드린 건 우리에게 일관성을 주었죠.
EKS 클러스터 레이어 맞죠?모든 클러스터를 가동하고, 노드를 가동하고, 애드온을 설치하고 있습니다. 하지만 안타깝게도
몇몇 성가신 개발자들이 실제로 클러스터에 무언가를 집어넣고 있습니다.조직에 따라 제어 권한이 있을 수도 있고 없을 수도 있습니다.
스펙트럼에 따라 어떤 모습일지
카를로스가 이야기한 클러스터를 팔아넘긴 끝에 도달하게 되는 순간까지
플랫폼 추상화죠.이를 통해 어느 정도 제어할 수 있습니다.어떤 경우에서든 거버넌스는 실제로
규모를 확장할 때, 특히 시도할 때 이러한 일관성을 유지하기 위한 열쇠입니다.
자율성의 균형을 맞추기 위해서죠?좀 더 자율적인 개발 사이에서
팀이 클러스터에서 더 많은 작업을 수행할 수 있는 기회가 있는 반면, 개발자들이 클러스터에 무엇을 넣어야 하는지 파악하도록 돕는 좀 더 난폭한 접근 방식일 수도 있습니다.다시 말씀드리지만, 이것은 코드 100 세션과 같은 정책이 될 수 없습니다.대신 얘기하고 싶은데요.
우리가 사람들을 어떻게 바라보는지에 대해 좀 더
특히 대규모 문제에 적용해 보세요.하지만 간단한 입문으로 말씀드리자면
분명히 누구에게나 정책이란 코드, 엔진 같은 것들이죠.
Kyverno의 OPA 게이트키퍼는 다음과 같이 매우 인기 있는 도구입니다.
정책을 기본적으로 코드로 표현할 수 있게 해주는 오픈 소스 세계입니다.예를 들어, 카이베르노
일반적으로 YAML 파일인데, 보통 다음과 같이 적용할 수 있습니다.
다른 방법이죠, 그렇죠?그러니까 꽤 개방적인 사람이라면
정책과 클러스터를 적용하면 컨트롤러 집합이 서로 조정됩니다.
적용된 변경 사항.정책에 플래그를 지정할 수도 있습니다.
정책을 위반하는 모든 내용을 신고하세요.
이 문제는 해결해야 합니다.조금 더 가혹한 접근법은 물건을 사용할 수 있다는 것입니다.
정책을 제대로 적용하지 않는 클러스터의 앱 변경을 단순히 차단하기 위한 승인 제어처럼 말이죠.자, 일부 조직에서는
그걸 기꺼이 적용하겠지만 다른 사람들은 그렇지 않아요.
그 자율성 척도에서는 좋은 방법이 될 수 있습니다.
그냥 우리가 하기 싫은 일들을 완전히 멈춰버리세요.하지만 종종 개발팀은 이로 인해 속도가 느려진다고 말하기도 합니다.그리고 대부분의 경우 그럴 수 있죠?그러니까 균형을 맞춰야 돼요
이 중 어떤 것을 적용할 건지
조직 및 조직의 성격에 효과적으로
플랫폼 구축.하지만 구체적으로 어떤 마찰점이 있다고 보나요?
정책이 시작되는 옵저버빌리티와 비슷합니다.
그림으로 들어오세요.경고해야 할 내용과 비슷하게, 어떤 정책을 작성해야 할까요?그리고 이것은 잠재적으로
제가 잘 모르기 때문에 더 흐릿한 부분이죠.
당신네 정책이 뭔지.특정한 성격이 있어요.
우리가 가지고 있는 정책들 중 아마도 그것이 바로 우리가 가진 이유일 것입니다.
탄탄한 기준선을 고려하세요, 그렇죠?주변에는 보안이 있습니다. 집이나 포드 (pod) 에서 읽기 전용 파일 시스템을 실행하고 계신가요?잠그고 계신가요?
추가 기능을 추가하고 루트 사용자로 실행 중이신가요?이 모든 것들을 말하자면, 여러분과 비슷한 지루한 것들이라고 할 수 있겠습니다.
정말 마땅히 해야 할 기본적인 정책들
시행하고 있는 중이지요.아마도 몇 가지 기본 사항이 있을 것입니다.
차지백을 할 수 있도록 모든 포드에 올바르게 태그를 지정하거나 레이블을 지정했나요?
규모가 커질수록 유지가 필요하기 때문에 비용이 많이 듭니다.
비용을 통제할 수 있습니다.어디서부터 이런 현상이 나타나기 시작할까요?
특히 대규모 클러스터 플릿에 적합합니다.첫째, 출시가 순조롭게 진행되도록 하는 것입니다.그래서 필자는 쿠버네티스 팀 또는 플랫폼 팀이라고 부르는 수많은 고객들과 이야기를 나눴습니다.
개발자의 사정 때문에 클러스터를 업그레이드할 수 없습니다.
이미 배포를 해봤죠?Carlos가 사람들에게 인프라 코드 템플릿을 제공하고 클러스터를 업그레이드하지 않는 것에 대해 말했듯이 API는 더 이상 사용되지 않고 더 이상 사용되지 않습니다.
CRD, 즉 기본적으로 노드에 필요한 파드 중단 예산
롤아웃이 막혔습니다.바로 여기가 우리가 바로 사용할 수 있는 곳입니다.
강령으로서의 정책에 대해 논의해 보세요.그리고 여러분은 할 수 있어야 합니다.
사람들을 위한 가드레일을 제공하면 클러스터가
롤아웃은 순조롭게 진행됩니다.넌 할 수 없을 거야
모든 개발자 팀에 가서 그들이
CRD를 작동시켜야 해요.수백, 200개의 클러스터를 운영한다면 모두 지출하게 될 것입니다.
그렇게 하는 데 많은 시간을 할애하세요.시작해야 돼요
이 과정을 왼쪽으로 밀어붙이고 계속 진행하세요.당연하게 들리겠지만, 만약 여러분과 비슷한 입장에 있거나 그럴 수도 있다고 생각한다면
비슷한 입장에 있으시다면, 이게 바로 문제입니다.
많은 고객들이 겪고 있습니다.그리고 해결책은
안타깝게도 이거 맞죠?마법 같은 기술은 없어요
이 문제의 해결책입니다.그 중 많은 부분이 조직적입니다.
아마 흔히 볼 수 있는 일이겠지만요.정책은 이 문제를 해결하기 위한 접근 방식을 구현할 수 있는 방법을 제공합니다.하지만 이는 반복되는 문제입니다.
사람들이 이런 일을 겪고 있는 걸 볼 수 있는데, 이에 대한 계획을 세우기만 하면 됩니다.그래서 만약 여러분이 그런 문제를 겪고 있고 문제를 해결하기 위해 고군분투하고 있다면
이 문제를 해결하는 방법을 알려주실 분들, 이건
정말 우리가 보고 있는 것이죠.또 다른 측면은 가용성입니다.고객과 이야기를 나눈 결과 다음과 같은 사항이 있습니다.
그들은 클러스터를 업그레이드할 수 없다고 합니다. 왜냐하면
개발 클러스터와 해당 애플리케이션 팀은
하나의 복제본으로만 배포할 수 있습니다.그리고 업그레이드할 때
클러스터, 팀들은 클러스터가 다운되었다고 불평합니다.
그리고 플랫폼이 안정적이지 않아요.심지어 이 정도까지 올라갈 수도 있습니다.
아직 사용하지 않은 경우 스테이징 및 프로덕션
포드 (pod) 는 예산을 방해합니다.그리고 분명히 이것은 업그레이드보다 더 많은 영향을 미칩니다.
클러스터에 피해를 주고 있습니다.클러스터 자체에 다른 문제가 있었다면
그것도 나타날 것입니다.하지만 만약 우리가 이걸 사용한다면
정기적인 업그레이드 과정, 우리는 계속 발전하고 싶고, 끊임없이 변화하고 있습니다.
저희는 유연성을 원해요.만약 이런 것들이 들어있지 않다면
다시 한 번 말씀드리지만, 신뢰는 플랫폼 내에서 신뢰에 대한 인식이 약해진다고 해도 문제가 생길 수 있습니다.
다시 한 번 말씀드리지만 입양 팀이 불만을 제기하는데, 이것이 반드시 공정한 것은 아닙니다. 하지만 정책을 사용하면
활용하지 않는 이러한 도구 중 하나가 되려면
단지 앱 유지의 탄력성을 위해서입니다.
실행 중이지만 이러한 업데이트를 적용할 수 있는지 확인하기 위함입니다.
정기적으로 부정적인 피드백을 받지 않고
직접 구축한 플랫폼과 이미 구축한 프로세스
카를로스가 앞서 이야기한 것을 만드는 데 모든 시간을 쏟았죠.정책 관리 측면에서요.그러니까, 카를로스는 이미 여기서 우리를 위해 힘든 일을 다 해줬잖아요, 그렇죠?우린 이미 뭐든 가져갈 수 있는 배와 프로세스를 가지고 있어요
우리가 원하는 아티팩트를 찾아서 밖으로 밀어내세요.규모를 키우기 시작할 때 여기서 정말 하려고 하는 것은 일관성 관리입니다.
다시 말씀드리지만, 클러스터 전체에 걸쳐 있지만 변동을 처리할 수 있어야 하고
예외를 처리하기 위해서죠.일관성을 유지하기 위해 흔히 볼 수 있는 한 가지 패턴은
그냥, 어떤 클러스터인지는 중요하지 않아요.
모든 정책이 하나의 헬름 차트로 정리되어 있고
어디에나 어울리죠, 그렇죠?그게 네 기준이야.패치 작업 시작, 하나의 정책을 하나의 정책에 배포하기
클러스터하고 다른 클러스터에 적용하는 작업은 초기 단계부터 진행하겠습니다.하지만 시작하면서
더 큰 규모로 보면, 그냥 “난 모든 걸 사방에 던져 버릴 거야.” 라고 말하기만 하면 될 거예요.그리고 나서 헬름 차트에 옵션을 적용할 수 있게 되면 저장하세요.
특정 정책을 활성화하거나 비활성화할 수 있는 값 파일입니다.웹 서비스 클러스터에 있는 정책과 다른 정책이 있을 수 있습니다.
데이터 클러스터를 예로 들 수 있습니다.그러니까 일종의 방법이 될 수 있겠죠.
거기서 사용하는 술집일 수도 있겠죠.그런 다음 GitHub 기반 프로세스를 통해 이를 출시합니다.
모든 클러스터에 적용되죠.그냥 우리가 배포하는 다른 것이죠.예외 측면에서 Kyverno와 같은 도구는 예외를 최상위 프로세스로 사용합니다.이 문제를 처리할 수 있어야 하잖아요, 그렇죠?따라서 루트 사용자 등으로 실행하지 않으면 실행되지 않는 타사 소프트웨어가 있는 것처럼 간단할 수도 있습니다.알다시피, 우리 모두 하나씩은 가지고 있잖아요.그래서 감당할 수 있다는 건
예외는 결국에는 할 수 있어야 하는 일이지만 저희는 할 수 있기를 바랍니다.
이 싱글을 계속 이어갈 수 있는 방법으로요.
우리가 배포하는 아티팩트.따라서 도구에 따라 예외에 대한 계획을 세워야 합니다.
사용하고 계신 부분에 대해서는 반드시 계획을 세워야 합니다.이제 얘기 나눠봤는데
앞서 말씀드렸듯이 이러한 정책, 코드 프레임워크를 실행할 수 있는 다양한 방법에 대해 알아봤습니다.가장 간단한 건 우리가 그냥
클러스터의 리소스를 평가하고 보고서를 만들 수도 있습니다.예를 들어 카이베르노가 뭔가를 집어넣을 거예요.
클러스터가 평가를 수행할 때 클러스터에 정책 보고서를 보내는 것과 같습니다.처음에는 다음과 같이 할 수 있습니다.
아마도 클러스터를 한 번 살펴보시면
무엇이 실행되고 있지 않은지 확인해 보세요.하지만 일단 시작하면 정말
EKS 플릿을 확장하세요. 뭔가가 필요할 거예요
좀 더 집적해서 효과적으로 사용하세요
이러한 정책 위반을 단속하세요.예를 들어, 카이베르노를 예로 들자면
정책 기자의 관련 프로젝트가 있는데,
클러스터에 설치할 수 있습니다. 집계하면
모든 결과를 S3와 같은 시스템에 저장하거나
엘라스틱 서치 또는 보안 허브그러면 모든 것을 집계할 수 있는 단일 창이 생깁니다.
이러한 위반 사항을 한 곳에서 볼 수 있습니다.예를 하나 들어보죠.
OPA와 게이트키퍼의 블로그 게시물은 다음과 같습니다.
스크린샷은 모든 제품을 배송하는 곳에서 가져온 것입니다.
커널 결과를 보안 허브에 바로 전달했습니다. 이제 검색할 수 있고
계정별, 지역별, 클러스터별, 적절한 메타데이터가 모두 있는 경우 워크로드별로 검색할 수 있습니다.그러면 우리는 신뢰할 수 있습니다.
우리가 보안 허브에서 원하는 다른 기능들은 뭐든지 말하자면
개선 워크플로우와 그런 모든 것들을 기반으로 구축할 수 있습니다.
사실상 시작하려는 것은 사실 단순한 것이 아닙니다.
이러한 위반을 감지하고 이를 해결할 수 있는 시스템을 갖추어야 합니다.이를 통해 우리는
강연의 요점부터 마무리할 거예요.실제로, 이것은 다음을 반영합니다.
강연 초반에 카를로스가 이야기한 세 가지 주제입니다.Git GitOps 적용하기
사실상 우리가 정말 잘하고 있는 일이죠.
EKS 클러스터를 대규모로 구축하는 이러한 고객들의 트렌드가 보이기 시작했습니다.GitOps, 그렇지 않든
전제 조건이든 아니든, 우리가 보고 있는 기술과 사물 관련 트렌드가 바로 그것입니다.
경우에 따라서는 ROCD, 플럭스, 그리고 쿠버네티스 기반 GitOps를 활용하기도 합니다.
인프라 프로비저닝 (ACK 크로스 플레인 여부)
그리고 그런 기술도요.사전 모니터링에 투자하는 거죠?알림을 기반으로 한다는 것은 문제를 감지할 수 있을 뿐만 아니라 이를 GitOps 프로세스에 피드백하여 문제를 감지할 수 있다는 것입니다.
이 방법은 크게 문제가 되지 않으므로 안심할 수 있습니다.
현재 구축하고 있는 시스템과 고객 유지를 위해 사용하고 있는 프로세스,
죄송합니다. 클러스터가 업데이트되었습니다.마지막으로, 사용해볼게요
거버넌스가 스케일링의 핵심입니다.몇 가지 문제가 있습니다.
고객으로서 계속 반복해서 보게 되는
EKS 클러스터를 관리하고 채택 확대를 시작하십시오.이러한 정책은 사실상 이를 위한 계획을 세우고 이를 해결책으로 삼기 위한 핵심이자 핵심입니다.
아시다시피, 고객과 상의해야 하는 것
꽤 정기적으로 말이죠.이번 주 관련 세션들.자, 이건 꽤 높은 수준이었죠?주제와 콘셉트에 대해 이야기를 나눠봤는데요.카를로스는 워크숍을 준비했는데, 이번 주에 두 번, 내일과 수요일에 한 번 진행됩니다.이 내용은 GitHub에서도 확인할 수 있으며 링크는...
링크는 몇 개의 슬라이드로 제공될 예정이지만
그러면 실제로 어떤 분야에 대한 실무 경험을 할 수 있을 것입니다.
오늘 말씀드린 내용은 다음과 같습니다. 세 가지 영역에 대해
다중 클러스터를 관리한 경험이 있는 것처럼
아르고 CD를 사용하는 GitOps와 함께 말이죠.워크숍에서는
테라폼 사용 예시.많은 사람들이 테라폼을 사용합니다.패턴을 보면 알 수 있습니다.
AWS API용 Terraform과 Git을 관리하는 방법
GitOps용 아르고 CD.그래서 많은 사람들이 이 두 도구를 조합하는 데 어려움을 겪습니다.그 예를 하나 보여드릴게요. 그리고 나서 경영에 들어갑시다.
옵저버빌리티와 같은 옵저버빌리티에 대해 많은 플랫폼 팀이 애플리케이션 옵저버빌리티에 대해 걱정하는데, 이는 순수하게 좋은 것과 같지만 애드온의 옵저버빌리티를 모니터링하는 일은 잊어버리죠.오픈이 어때요?
소스 카펜터가 하고 있는 건가?아코디언은 어떻게 행동하는지,
BCC 및 I 서브넷이것이 옵저버빌리티입니다.
플랫폼 팀이 소유합니다.그래서 그들은 이 점을 알고 있어야 합니다.그리고 마지막으로 정책 관리에 대한 몇 가지 교훈을 얻게 되죠.카이베르노를 사용하시겠습니까?그래서 우리는 카이베르노와 카이베르노의 보고서를 사용할 것입니다.
이 보안 허브 예시를 실제로 구성해봤습니다.스크린을 통해 직접 보실 수 있습니다.그러니 가능하면 일찍 도착하세요. - 그러면 이용할 수 있을 거예요
아, 이미 구할 수 있어요. - 네, 가능합니다.모든 것이 GitHub 오픈 소스에 있습니다.그럼 이제 다음과 같이 시작할 수 있습니다.
그걸 추출해서 여러분의 조직에 적용하는 거죠. - 다음으로 큐브 301이 있습니다.자, 어도비와의 대화입니다.
그리고 AWS의 몇몇 직원들이 어떻게 구축했는지에 대해 이야기합니다.
EKS를 사용한 확장 가능한 플랫폼.이전에도 해본 적이 있습니다.
큐브콘 (CubeCon) 에서의 강연, 그리고 CNCF와 관련된 몇 가지 강연이 있는데, 어떻게 이런 일을 하는지, 그리고 알다시피, 그들은 지금 신청하고 있습니다.
카를로스가 이야기한 몇 가지 원칙은
비행 전 검사와 비행 후 검사에 대해
다 그런 거잖아요, 그렇죠?확실히 강연 중인데
볼 가치가 있는 것 같아요. 보게 될 테니까요.
다시 말씀드리지만, 플랫폼 구축과 관련된 몇 가지 주제뿐만 아니라 Adobe가 실제로 어떻게 운영되고 있는지도 살펴보겠습니다.그러니 이 제품을 꼭 추천해 주세요.그리고 마지막으로 몇 가지 초크 논의가 진행되고 있습니다.
인프라, 코드, GitOps 같은 것들을 활용해보죠.
CI/CD, 사용 가능한 다양한 옵션, 장단점 및 조직에서 고려해야 할 사항
이번 주에 몇 번 더 들으실 수 있을 것 같은데요,
훌륭한 세션도 될 거예요, 오.(불명료).엑스트라 측면에서
리소스, 그러니까 EKS 워크숍, 실습 랩 같은 경우에는
아직 해보지 않았어요.신제품이 출시되는 대로 이를 계속 발전시켜 나가고 있습니다.저희는 이 프로젝트를 진행하고 있습니다.
이번 주에 두어 번 했지만, 포함시키지는 않았어요
추가 세션에 대해서요.하지만 직접 실행하려는 경우 셀프 서비스로 실행할 수 있습니다.이걸 다음과 같이 실행할 수도 있습니다.
우리는 몰두의 날이라고 부릅니다.계정 팀에 문의하세요.전문가가 와서 도움을 받을 수 있습니다.
팀을 이루어 직접 EKS를 배워보세요.매우 모듈화되어 있습니다.무엇을 배우고 싶은지에 따라 조직에 맞게 조정할 수 있습니다.그러니 꼭 한 번 들러볼 만한 가치가 있습니다.
아직 안 하셨다면 보세요.모범 사례 가이드.아마 많은 분들이
이미 EKS 모범 사례 가이드에 익숙할 것입니다.출시된 지 꽤 되었지만 최근에 도입한 것이 있습니다.
이게 둘째 날 작전을 위한 훌륭한 지식인데 이제 공식적으로 포함되었나요?
EKS 문서의 내용이죠.모두 똑같은 훌륭한 지식,
하지만 문서와 일치하고 이제 모두 같은 위치에 있습니다.그래서 찾기가 더 쉬울 수도 있겠네요.마지막으로, 배지를 좋아하지 않는 사람이 있을까요?배지를 달아보세요
링크드인, 그런 거 말이에요.아직 제 건 없어요, 그렇죠?- [카를로스] 응?- EKS 배지 있으세요?- 네.
- 오, 알았어요.따라잡아야 돼요(청중 웃음) 이것은 GitHub 웰, 페이지로 연결되는 링크입니다.모든 쿠버네티스를 찾을 수 있을 거예요
세션은 이 GitHub에 있습니다.에 대한 디렉토리가 있을 것입니다.
각 쿠버네티스 세션.대부분 리소스에 대한 링크일 것입니다.여기에 코드를 넣을 필요는 없습니다. 물건들로 연결되는 링크를 잔뜩 넣어두는 거죠.
각 세션과 관련된 내용을 볼 수 있습니다.따라서 해당 링크는
우리 폴더로 이동시켜주지만, 그 저장소를 보면 아주 쉽게 찾을 수 있습니다.
우회할 방법을 찾아보세요.에 링크를 몇 개 추가했습니다.
지금까지 이야기한 내용 중 몇 가지에 대해 말씀드리자면,
추가 세션 몇 개. - 네, 메인 리그는
우리가 속한 모든 큐브 트랙이 있어요.EKS 그룹 트랙처럼요. - 네. - 그리고 Niall이 백스테이지에 대해 언급했다면 다른 워크숍도 있어요.직접 체험해 볼 수 있는 워크숍도 몇 개 있습니다.
Backstage를 사용해 본 적이 있어요.큐브 308인 것 같아요.원하신다면 오늘의 큐브를 선택하실 수 있습니다.
EKS와 백스테이지, 그리고 백스테이지에 AI 세대의 다른 것들도 있으니 직접 해보기 위해서요. - [Niall] 네.