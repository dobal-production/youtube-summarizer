- 저는 니르말 메타예요.저는 수석 전문가입니다
솔루션 아키텍트이시고 현재 KUB301 세션에 참여하셨습니다. 확장 가능한 솔루션을 구축하는 방법
Amazon EKS를 사용하는 플랫폼.적절한 세션을 진행하지 못했다면 EKS가 무엇인지 모를 수도 있습니다.
여기서 배우실 수 있습니다.계속 가만히 있으세요. 몇 가지를 배우게 될 거예요.말씀드렸듯이 저는 니르말이에요.저 오늘 합류할게요
아이작, 존과 함께조금 후에 올라오면 자기소개를 할 거예요. 이 멋진 사진에 대해 얘기해 볼게요.여기까지입니다.이게 유일한 슬라이드예요
프레젠테이션에서요.그럼 여기 누구...거의 안 보여서...오, 제가 할게요.여기 플랫폼 엔지니어는 누구야?멋지네요.지금 플랫폼을 만들고 있는 사람은 누구인가요?플랫폼이 왜 필요할까요?(청중은 어렴풋이 말하며) 맞아요.거버넌스를 통제하고 새로운 것에 적응하는 거죠.누가 자신들의 플랫폼을 생각할까요?
이 사진처럼 보이나요?멋진 꿈의 들판이네요.건물을 짓고 있는 많은 고객들과 이야기를 나눕니다.
여러분과 같은 플랫폼, 그리고 한 가지 반복되는 주제는 버려진다는 것입니다.아직 채택되지 않았어요.지금 여기 계신 분 중에 누가 그런 문제를 겪고 있나요?멋지고 멋진 플랫폼을 만드셨는데 개발자들도 조금
채택하는 것이 조금 망설여집니다.이것이 바로 오늘 이 강연의 내용입니다.플랫폼에 대해 어떻게 생각해야 하는지에 대한 지침을 제공하겠습니다.
EKS와 모범 사례를 기반으로 작업을 진행하고 있습니다.
버려지지 않도록 계속 운영할 수 있는 방법에 대해 알아봅시다.하지만 그 얘기로 넘어가기 전에
플랫폼이 왜 필요할까요?플랫폼이 필요한 이유는
우리는 끊임없이 변화하는 상황에 대응해야 합니다.
기술 요구와 요구.알다시피, 우리는 이미 통과했습니다.
엄청난 기술 변화, 인터넷, 스마트폰
규모, 객체 수, 스토리지, 애플리케이션 수,
노드의 개수, 짝수, 서버의 수.이러한 기술 변화와 개발자들이 필요로 하는 것에 적응할 수 있는 플랫폼이 필요합니다.
애플리케이션을 실행하기 위해서요.아마 이런 일을 겪고 계실 겁니다.
지금 그런 거요.누가 이걸 가져야 했냐고요?
ML 팀을 만나면서 갑자기 머신러닝을 애플리케이션이나 플랫폼에 통합하고 이러한 워크로드를 지원해야 하죠?그래서 인터넷이 성장하면서 자동화가 필요해지기 시작했습니다.그래서 우리는 수십 대의 컴퓨터를 갖춘 웹 사이트를 지원하는 데 그치지 않게 되었습니다.
그리고 수공예도 할 수 있었죠.저희는 셰프 같은 걸 택했어요.
그리고 Puppet은 자동화와 거버넌스를 시작할 수 있게 되었습니다.
그 서버들을 통해서요.하지만 모든 걸 다 얻지는 못했어요
자동화는 괜찮습니다.그리고 이제 이런 거대한 응용 프로그램을 사용하면서 우리는 망가뜨리기 시작했습니다.
이를 마이크로서비스로 전환하고 컨테이너화를 사용하기 시작하면서 문제가 해결되기 시작했습니다.
이러한 제어 루프, 거버넌스 및 자동화에도 몇 가지 추가적인 문제가 있었습니다.
복잡성, 의존성, 그리고 필요한 것이 있을 뿐입니다.
그 복잡성을 관리하기 위해서요.그래서 우리가 시작하게 된 이유죠.
이러한 플랫폼 구축.그리고 우리는 스스로에게 이렇게 말했습니다. “만들면 그들이 올 거예요.개발자들이 올 거예요.”“필드 오브 드림스” 영화를 아는 사람이 있나요?좋아요.그래서 그 영화에서 농부는 야구공 유령의 방문을 받습니다.
예전에 한 플레이어가 빌드를 하면 이야기를 듣게 됩니다.
그의 경기장에 있는 이 야구장, 전부 전설적인
야구 선수들이 올 거예요.제 생각엔, 저는 플랫폼 엔지니어였다고 생각해요.
제가 AWS에 오기 전에도 같은 태도를 가지고 있었습니다.오, 제 플랫폼은 정말 멋져요.최고의 기능을 가지고 있고, 가장 멋진 기능을 가지고 있고, 도커와 컨테이너를 사용합니다.멋지지 않나요?그리고 저는 거기 앉아서 해야 했고, 이 모든 개발자들이 제 반짝이는 쿠버네티스 플랫폼을 사용하고 싶어하지 않을 리가 없다고 생각했습니다.그리고 거기 앉아서 거기 앉았다가
아무도 나타나지 않는다는 걸 깨달았어요.내 꿈에 그리던 분야에는 아무도 나타나지 않아요.그럼 왜 우리가 계속 이런 짓을 하는 거죠?우리는 집중하고, 그게 전부라고 생각해요.
플랫폼과 플랫폼이 가진 기능이 없기 때문에 포기한 것이죠.
적절한 기능.하지만 그건 아니에요.뭔가 다른 게 틀림없어.고객과 이야기를 나누면서 그 이유를 파헤치기 시작할 때
이런 플랫폼들은 성공하지 못해요. 우리는 그게 진짜 뭔지 알아요.
개발팀과 사용자를 플랫폼으로 끌어들이는 것은 신뢰입니다.다음과 같은 경우 플랫폼이 폐기됩니다.
신뢰를 쌓는 데 실패합니다.플랫폼에 대한 불신
미팅 요구 사항에 맞춰 진화하면 섀도우 IT, 서비스 제공에 대한 불신으로 이어집니다.
개발자에게 필요한 서비스와 기능, 그리고 개발자에 대한 불신
시스템은 자주 그리고 알려지지 않은 방식으로 고장날 수 있습니다.우리는 개발자들이 여전히 예측이 가능하고 병목 현상을 알고 있는 이전 플랫폼을 선택할 것이라는 것을 알고 있기 때문에 신뢰가 중요하다는 것을 알고 있습니다.
그리고 엣지도 알아요.그리고 그들은 계속 사용하고 있습니다.
그 오래된 플랫폼들.그래서 우리는 그것이 신뢰라는 것을 알고 있습니다. 왜냐하면 그들은 그것을 신뢰하기 때문이죠.그들은 익숙해요. 엉망진창이긴 해도
더 좋은 용어가 없네요그럼 신뢰란 무엇일까요?신뢰는 세 부분으로 구성되어 있습니다.로직.저를 믿으신다면
내 논리가 정확하다면 그럴 가능성이 더 높을 거야
저를 믿으라는 거죠?그리고 바라건대, 당신도 그러길 바래요
오늘 이 프레젠테이션에서는 몇 가지 논리를 보여드리겠습니다.제가 진짜라고 생각하신다면 제가 더 신뢰할 수 있을 거예요.그리고 제가 그렇게 느껴진다면
당신의 필요에 신경을 쓰면 저를 더 믿을 수 있을 거예요.그럼 이게 어떻게 번역될까요?
플랫폼 관점으로 볼까요?진정성, 즉 진정성은 협업으로 이어집니다.
공동 책임, 우리 모두의 결속력을 보여줌
결과에 신경을 쓰세요.알다시피, 만들면 됩니다.
플랫폼에 대한 제품 사고방식은 여러분에게 있습니다.논리가 투명성으로 바뀝니다.뭘 할 건지 말하고
당신이 말하려는 대로 하세요.투명성에 대한 약속
그리고 협업.그리고 공감은 신뢰로 바뀝니다.저는 귀사의 서비스를 지원하고 서비스가 잘 운영되도록 하는 데 관심이 있습니다.그리고 저는 여러분의 요구, 개발자의 요구 사항을 처리하기 위해 여기 있습니다.그래서 아이작과 존이 하는 것처럼 여러분도 그 점을 마음 속에 간직하고 싶습니다.
프레젠테이션의 나머지 부분에서는 확장 가능한 플랫폼을 구축하는 방법에 대한 신뢰의 이 세 가지 개념을 다루겠습니다.많은 것을 볼 수 있는 분야입니다.
신뢰 수준을 높게 유지할 수 있는 방법은 마찰이지만
규모 요구 사항도 충족할 수 있을까요?거기에는 긴장감이 감돌고 있습니다.빠르게 움직이고 규모를 확장할 수 있지만 안정성이 떨어지거나 요구 사항을 즉시 충족하지 못할 수도 있습니다.그러면 신뢰가 약해집니다.그래서 건물을 짓는 데 따르는 어려움은
이러한 확장 가능한 플랫폼은 끊임없이 진화하는 기술 수요의 규모를 충족하고 높은 신뢰 수준을 유지할 수 있는 방법을 찾고 있습니다.그래서 저는 한 걸음 물러서고 싶습니다.이야기를 나누면서 준비하고 있었어요.
이 프레젠테이션을 위해 John은 제게 이렇게 말했습니다. “보세요, 결국에는 모든 개발자들이 관심을 갖고 있어요.
코드를 최대한 빨리 프로덕션 환경에 도입하는 것이 관건입니다.”이 모든 것에 대해 얘기할 수 있어요.예전에 한 가지 예를 들자면, 개발팀은 모놀리식 파이프라인에 익숙했을 수도 있습니다.그러니까 그들은, 알다시피, 그 일에 익숙하죠.
이 모놀리식 앱으로 3~4개월 동안 배포할 수 있습니다.이제 그들은 그것을 깨뜨렸습니다.
마이크로서비스에 대해 자세히 알아보긴 했지만, 그들은 새 플랫폼이 처리할 수 있다고 믿지 않습니다.
이러한 마이크로서비스 배포.그들은 마찰이 무엇인지, 아니면 마찰이 더 심한지 모릅니다.그래서 그들은 모든 것을 쥐어짜는 경향이 있습니다.
새로운 마이크로서비스와 그들이 기존 파이프라인에 적용하려고 하는 새로운 것들,
그 모놀리식 파이프라인, 왜냐하면 그들은 무엇을 알고 있기 때문이죠.
병목 현상, 문제점이 무엇인지, 마찰이 무엇인지 알고 있으며, 그것이 프로덕션 환경에서 코드를 작성하는 방법일 수도 있다는 것을 알고 있습니다.
그들의 마음 속으로는 가능한 한 빨리 말이죠.그러니까 그걸 간직해 주셨으면 좋겠어요.
이 일을 할 때 머릿속으로
이러한 플랫폼을 구축하는 방법에 대한 나머지 세부 정보
모범 사례에서는 신뢰 수준을 높게 유지하면서 규모를 충족하는 방법을 설명합니다.아이작, 올라오실 수 있나요?
어떻게 할 수 있는지 말해줘요?- 물론이죠.고마워요, 니르말그럼 우리가 플랫폼에 대해 생각할 때 항상 하는 일에 대해 알아봅시다.
엔지니어링과 우리의 계획.우리는 항상 자동화를 추구합니다.거의 매년
제가 기억하는 한, 저는 플랫폼을 해왔습니다.
아주, 아주 오랫동안 말이죠.우리는 모든 것을 자동화할 것이고, 더 많은 것을 자동화할 것입니다.그리고 올해는 뭘 할 건데?다시 자동화할 거예요.그리고 내년엔 장담하건대
플랫폼을 위한 제품 로드맵에는 더 많은 자동화가 필요합니다.Puppet으로 시작해서 Chef로 옮겼고, Ansible로 옮겼고, 지금은 테라폼으로 옮겼습니다.저희는 지속적으로 자동화를 진행하고 있습니다.그런데 왜 우리는 실제로 이 자동화 단계에 도달하지 못할까요?그리고 생각해보면
다른 산업과 마찬가지로, 언제 마지막으로 이런 업종을 해봤을까요?
은행에 가보신 적 있으세요?저는 은행에 가본 적이 없어요.기억도 안 나는데
지난번에 은행에 있었을 때였어요.자동화됐어요.80년대에 현금 자동 입출금기인 ATM에서 시작되었습니다.이름에서 알 수 있죠.그래서 다른 업계에서도 이 사실을 알아냈지만 어째서인지 플랫폼 엔지니어이자 소프트웨어 개발자인 우리는 아직 알아내지 못했습니다.왜 우리는 여전히 존재할까요?
매년, 해마다 자동화가 이루어지나요?장담하건대
계속 하면 못 얻을거야
똑같은 일을 계속 반복하고 있어요.그럼 좀 더 자세히 살펴보죠.자, 그 중 하나는
니르말이 얘기한 건 스케일이에요.우리 세상에는 어떤 변화가 더 있을까요?
그 어느 곳보다도 규모가 중요합니다.개발자 수,
서비스 개수.이미 방문하신 분들을 위해
AWS를 오랫동안 사용해 온 우리는 EC2와 S3로 시작했습니다.현재 250개 이상의 다양한 서비스를 보유하고 있습니다.저희는 다양한 제품을 출시했습니다.
여기 re:Invent에 새로운 서비스가 생겼습니다.매년 우리의 규모는 비약적으로 성장하고 있으며 우리는 이러한 변화에 적응해야 합니다.우리가 성장하고 규모를 확장함에 따라 우리는 무엇을 해야 할까요?우리는 사물을 작은 조각으로 나눕니다.저는 마이크로서비스만을 말하는 것이 아니라 사람, 조직을 생각합니다.그래서 우리는 대규모 플랫폼 팀을 작은 팀으로 나눕니다.네트워킹 팀이 있으면 그들만의 파이프라인과 추상화 세트를 가지고 있을 수도 있습니다.
여기는 인증입니다.이 모든 것이 해결됩니다.
저장된 상태로 전환되었습니다.그리고 그들은 네트워킹을 다루죠, 그렇죠?인프라 팀도 있습니다.그들은 다음 사항에 집중할 것입니다.
EC2 인스턴스, 아마도 쿠버네티스 클러스터를 세워둘 수도 있겠죠?그 밖의 모든 기준
실제로 필요한 기본 인프라
애플리케이션을 실행하세요.옵저버빌리티 팀도 운영할 예정입니다.그들은 분명히 양육에 집중할 것입니다.
인프라 애플리케이션의 옵저버빌리티,
네트워킹용.그리고 자체 파이프라인도 있고요.규정 준수에도 다음이 포함됩니다.
자체 파이프라인도 마찬가지입니다.자신만의 세트를 갖게 될 거예요.
다양한 인증 도구, 운이 좋으면 많이 사용하게 될 거예요.
비슷한 도구들.하지만 안타깝게도 결국 벌어지는 일은
누구나 자신만의 도구 세트를 만들죠, 그렇죠?그리고 마침내 우리가 할 수 있는 건
애플리케이션 배포.이건...플랫폼을 언급할 때, 대부분의 사람들이 생각하는 것은
이것은 단지 하나의 파이프라인, 우리 모두가 이야기하는 CI/CD 파이프라인입니다.플랫폼에 대해 이야기할 때 대부분의 사람들이 그렇게 생각합니다.그리고 그들은 그 대시선의 나머지 부분에 대해서는 전혀 생각하지 않아요, 그렇죠?하지만 그게 전부가 아니에요.애플리케이션을 배포할 필요는 없습니다.
종속성이 없습니다.이제 물건을 가져와야 합니다.
데이터베이스 같은 거 맞죠?ElastiCache라는 S3 버킷이 필요합니다.애플리케이션이 의존해야 하는 종속성이 많습니다.글쎄요, 그건 완전히 다른 파이프라인이에요.하지만 중요한 것, 좀 더 복잡하게 만들자면, 사실 아무도 없는 파이프라인이 하나 있습니다.
이야기하긴 하지만 존재하죠.백그라운드에서 실행되며 모든 것이 제대로 작동하는지 확인하는 지속적인 규정 준수 파이프라인입니다.
지속적으로 규정을 준수합니다.지금까지 여기 계신 모든 분들이 보관을 해오셨어요.
모든 구성, Git 내부의 모든 것, 파이프라인을 배포하면 모든 것이 작동하는 것 같습니다.푸시하는 그 순간
배포 파이프라인, 버튼을 누르면 작동합니다.하지만 드리프트는 어떻게 생각해낼 수 있을까요?음, 드리프트는 다음과 같은 이유로 발생합니다.
백그라운드에서 실행되는 지속적인 규정 준수 파이프라인.이건 비밀이에요.개발자들은 몰라요
그거에 대해서는 아무것도 몰라요.그래서 그들이 생각하는 것은
“Git에 뭔가를 넣었는데, 거기
백그라운드에서 바꾸고 있는 다른 뭔가가 있네요.”그것도 인간일 거예요.
실제로 백그라운드에서 변화를 일으키고 있죠.지금까지 말씀드린 것은 Git이 진실의 근원이라는 것입니다.
사실 진실의 근원은 아니에요.개발자 한 명, 고객 한 명이 “Git은 진실의 근원이 아니라 희망의 근원”이라고 말하곤 했습니다. 너무 많은 변화가 있었기 때문입니다.
파이프라인과 우리가 기대하는 목표, 그리고 실제 결과 사이, 맞죠?그리고 곧바로 우리는 신뢰를 깨기 시작합니다.우리가 쌓아온 이 모든 신뢰는 Git에 집어넣고 살펴보는 거죠.Git에 저장한 내용이 실제 제작 중인 것과 일치한다는 것을 믿을 수 있을 것입니다.실제로 그런 일은 일어나지 않아요.그래서 바로 시작하죠.
개발자와의 신뢰를 깨뜨리세요.그리고 그건 정말 중요한 일이에요.
니르말이 말한 것처럼 이득을 얻을 수 있는 건
시스템 채택.다시 이 이야기로 돌아가 보죠.그럼 다시 이 도표로 돌아가서 무엇이 복잡할까요?이 모든 파이프라인 사이를 실제로 자동화할 수 없는 이유는 무엇일까요?답은 바로 인간의 상호작용입니다.이제 다시 한 번 말씀드리지만
개발자나 여러분이 플랫폼으로서 사용할 수 있는 많은 새로운 서비스와 새로운 기능을 출시하세요.
엔지니어들은 플랫폼에 통합되기를 원할 것입니다.그럼 뭐가 필요할까요?자, 이걸 좀 단순화해 보죠.새 리소스가 필요하다고 가정해 봅시다.음, 해당 리소스를 애플리케이션에 적용하기 위해 또는
프로비저닝할 수 있으려면 다음과 상호 작용해야 합니다.
인프라 계층.음, 인프라는
레이어는 개발자에게 돌아가야 합니다.이제 설정 중입니다.
회의, Jira 티켓 추가, 계속 회의를 하면서 요구 사항만 전달하고 있죠.필요한 것은 다음과 같습니다.
우리에게 필요한 것은 다음과 같습니다.근거, 캘린더 설정.이거, 이 작은 기능인데
이제 몇 주간의 회의가 필요할 수도 있습니다.음, 우리도 해야 할 일이 있어요
규정 준수를 통해 운영하세요.그냥 배송하는 게 아니에요
생산에 필요한 게 있어요.이제 시작하겠습니다.미팅이 더 많아졌어요이제 앱 개발자는
규정 준수에 대해 이야기해 보세요.이제 네트워크 팀이 필요합니다.
어떻게든 접속할 수 있도록 말이죠.네트워크 팀이 개입하고 있어요.더 많은 회의, 더 많은 것
회의, 더 많은 회의, 더 많은 회의.제가 말씀드린 예를 들어보죠.
ATM 기기 맞죠?사람이 개입할 필요는 없어요.그래서 무엇이 우리를 느리게 하고 무엇이 불가능하게 만드나요?
우리가 자동화할 수 있는 것은 우리가 실행 중인 파이프라인입니다.
우리 사이의 상호작용, 우리가 소통하는 방식
서로간의 관계는 사실 회의를 통해서만 가능합니다.이런 식으로는 절대 자동화하지 않을 거예요.그냥 이끌어 낼 수 있을 뿐이야
점점 더 많은 미팅과 점점 더 많은 Jira 티켓, 그리고 점점 더 많은 대기와 지연이 발생합니다.일부 고객은 AWS에서 새 기능을 출시할 때 1년 이상 걸리는 것으로 알고 있습니다.
이 모든 이유 때문에 실제로 새 기능을 채택하기까지는
미팅과 Jira 티켓, 그리고 사람들이 작업을 해주길 기다리는 것 말이에요.따라서 병목 현상을 벗어나는 모든 개선 사항은 환상에 불과하다는 것을 알 수 있습니다.그래서 우리가 자동화하고 있는 이 모든 작은 것들은 자동화될 거예요.
이 작은 부분은 실제로 필요한 것의 핵심에 도달하지 못합니다.
플랫폼 엔지니어로서 생산성을 높이려면 자동화해야 합니다.계속 회의를 하고, 서로 이야기를 나누기만 하기 때문에 신뢰가 쌓이지는 않습니다.
우리의 필요를 정당화하는 것.이것이 핵심입니다.
플랫폼 엔지니어링.이게 왜 새로운가요?왜 진작 여기 없었죠?드디어 한계점에 다다랐고, 마침내 한계점에 다다랐어요.
이 파이프라인의 핵심이죠.드디어 한계에 다다랐어요
이 모든 회의의 핵심은 규모가 크기 때문이죠.그럼 어떻게 하면 이 문제를 해결할 수 있을까요?뭐, 그냥 뭘 빌릴 수 있겠어요
은행 업계는 API만 사용하는 것을 해왔습니다.답은 사실 아주 간단합니다.거기 가는 게 훨씬 더 어려워요.그렇다면 API 사용에 대해 어떻게 생각할까요?글쎄요, 파이프라인 대신 네트워킹 같은 것들이죠.
블루-그린 배포라든가, 뭐, 뭐,
RDS 데이터베이스 또는 S3 버킷을 가져오기 위한 파이프라인, 우리는 이러한 것들을 기능, 기능 및 플랫폼 측면에서 생각합니다.
대신 해야 할 일은 이걸 노출하는 것입니다.
API를 통한 기능.그렇죠?API는 선언적이죠?그리고 다음을 통해 제어할 수 있습니다.
그 뒤에 소프트웨어가 깔려 있죠?파이프라인에 대해 생각할 때 파이프라인 버튼을 누르면 끝입니다.한 번 실행됩니다.깨지지 않았으면 좋겠어요. 하지만 그러다 보면 깨지기 시작하죠.
그렇게 하면 통제력을 잃게 되죠.그래서 우리는 통제력을 얻게 되는데
API로 무언가를 옮기면 실제로 할 수 있습니다.
자동화를 시작하세요.그리고 팀들이 서로 소통하는 방식은 그렇지 않습니다.
더 이상 회의를 통해 말이죠.API를 통해서인데,
잘 정립된 형태입니다.그렇다면 플랫폼으로서 우리는 어떻게 해야 할까요?
엔지니어 여러분, 거기 가보세요, 그렇죠?자, 이 다이어그램에서는 서로 다른 API, 즉 인증 추상화를 모두 옮겼습니다.
단일 레이어로 말이죠, 그렇죠?모든 것을 캡슐화하거나 추상화하는 하나의 파사드
무대 뒤에서 움직이는 복잡한 부품들, 그래서
개발자가 빠르게 제품을 배송하고 다음 주소로 배송할 수 있습니다.
최대한 빨리 제작하세요.좋아요.그럼 다시 다이어그램으로 돌아가 볼까요.우리 팀은 여전히 똑같아요.그 팀들은 아무데도 가지 않았어요.하지만 지금 생각해보는 중이에요.
소프트웨어 개발 측면에서요.우리는 API의 관점에서 생각하고 있으며 이 플랫폼을 구축하고 있습니다.그리고 이제 더 많은 부분을 다루었습니다.
제품 마인드셋 맞죠?그래서 예전에는 이런 모든 회의가 필요했던 요청이 이제는 우선순위를 정하게 되었습니다.
제품 매니저를 통해서요.그리고 이 제품 매니저는 우리가 문제를 해결할 수 있도록 최선을 다하고 있습니다.
가능한 한 빨리 필요한 기능이나 가장 중요한 기능.하지만 한 가지 문제가 있습니다.
이걸로 말이에요, 그렇죠?그래서 제거와 관련된 몇 가지 문제를 해결했습니다.
팀 간의 커뮤니케이션에 몇 가지 병목 현상이 있긴 하지만 여전히 병목 현상이 있습니다.그리고 이 병목 현상은 바로 여러분입니다.
항상 개발자들로부터 제품이나 플랫폼 엔지니어링보다 더 많은 요청과 기능 요청을 받게 될 것입니다.
팀에서 언제든지 처리할 수 있습니다.그래서 당신이 모든 것을 다 할 수 없을 때 그들은 무엇을 할 건가요?
이러한 기능 요청은?앉을 거예요?
이리저리 돌아다니면서 그냥 기다려?아냐, 네 주변에선 효과가 있을 거야.우리 중 많은 사람들이 이걸 섀도우 옵스나 알다시피, 이런 불량 팀으로 알고 있습니다.
자신도 모르게 이 플랫폼을 구축하거나 다른 서비스를 사용하게 되는 경우 문제가 해결되지 않습니다.
그들의 필요에 따라 플랫폼을 실제로 사용할 수는 없습니다.하지만 이건 우리가 원하는 게 아니에요.우리는 그것들이 작동하는 걸 원하지 않아요.
이 문제 때문이죠, 그렇죠?이건 또 다른 형태예요
우리가 신뢰를 깨는 거죠?이건 개발자가 아니에요.
플랫폼 엔지니어인 우리와의 신뢰를 깨는 거죠?신뢰를 무너뜨리고 있어요.이런 일은 끊임없이 일어납니다.모든 게 조금씩
이 신뢰를 깨뜨리다니우리가 정말 원하는 건
우리가 해야 할 일은 그들이 우리의 플랫폼을 확장하길 바라는 거잖아요, 그렇죠?하지만 우린 그걸 구할 수 없어요
플랫폼을 확장하기 위해 우리가 하는 모든 일이 독점적이고 자체 코드를 작성하고 자체 문서를 만들고 있는데 때로는 그렇지 않습니다.
심지어 갈 수도 있겠죠?그럼 이걸 어떻게 길러낼 수 있을까요?
일종의 문화죠, 그렇죠?이게 바로 그거야
니르말이 말하는 건 협업이죠.어떻게 서로 협업할 수 있을까요?맞아요, 그리고 그런 분들한테는
“팀 토폴로지”라는 책을 읽어 보신 분들, 이 책이 주요 내용 중 하나입니다.
이 책에 실린 개념은, 플랫폼 엔지니어인 우리입니다.
그리고 오늘날 우리가 있는 곳에서는 퍼실리테이션에서 출발했습니다.SRE와 DevOps의 아이디어는, 이봐, 인간을 끼워 넣겠다는 거였어.
팀에 합류하면 실제로 도움이 될 것입니다.
애플리케이션을 실행하세요.그리고 이제 대부분의 경우
대부분의 사람들이 서비스로서의 역할, 서비스로서의 데이터베이스, 서비스로서의 플랫폼, 서비스로서의 쿠버네티스 등으로 옮겨가기 시작했죠?이 모든 컨테이너들은
서비스로요, 그렇죠?그러면 다음 단계로 넘어갈 수 있습니다.
한 차원 높은 확장성.하지만 필요한 부분은
이제 협업이 필요하죠.그렇다면 협업에 도움이 될 수 있는 것은 무엇일까요?은행과 같은 세상에는 또 어떤 형태가 있을까요?
예를 들어 API를 사용했죠.다른 형태는 뭐죠?
소프트웨어를 활용하여 협업에 실제로 도움을 줄 수 있을까요?여기 계신 분들 중 많은 분들이 open을 사용하시리라 확신합니다.
소스 소프트웨어 맞죠?오픈소스 커뮤니티에서 전시를 해본 적이 있습니다.
투명성, 협업.그들은 신뢰를 얻습니다.그래야 그들이 이렇게 커질 수 있는 거죠.거대한 커뮤니티가 있어요.그래서 우리가 오픈 커뮤니티를 물려받는다면
소스 프레임워크, 맞아요, 우리 플랫폼의 경우 투명성, 협업, 신뢰와 같은 모든 것을 함께 가져다 줄 수 있습니다.그렇다면 쿠버네티스를 사용하면 어떨까요?
이 프레임워크처럼?지금까지는 많은 분들이 Kubernetes를 사용하여 컨테이너를 배포해 보셨을 것입니다.컨테이너라고 생각하시면 됩니다.
오케스트레이션 시스템.여기서부터는 얘기하지 않을게요
컨테이너 오케스트레이션.다음에 대해 얘기할게요
엄밀히 말하면 플랫폼으로서요.쿠버네티스를 전혀 사용하지 않더라도
컨테이너를 언제라도 배포할 때는 다음과 같이 사용할 수 있습니다.
플랫폼 레이어 맞죠?왜 그렇게 하고 싶은가요?좀 미친 것 같네요.그런데 왜 우리가 그걸 하고 싶은거죠?플랫폼이 필요로 하는 모든 기본 요소를 갖추고 있고 API 핸들러와 RBAC가 내장되어 있기 때문에 실제로 도움이 되는 뮤테이팅 어드미션 컨트롤러가 있습니다.
들어오고 나가는 대상을 제어하고 변경 사항을 적용할 수 있습니다.
플랫폼으로 들어가는 길, 그게 중요하죠.계속 진행하다 보면 웹 훅을 만들 수 있습니다.
컨트롤러, 스키마 검증에는 쿠버네티스와 실제로 통합되는 다른 컨트롤러가 있습니다. 이를 통해 자체 비즈니스 로직과 자체 규정 준수를 추가할 수 있습니다.하지만 가장 중요한 것은
여기 상태를 저장할 장소가 하나 있습니다.다시 그 파이프라인으로 돌아가면, 모든 파이프라인이
파이프라인은 각기 다른 방식으로 상태를 저장합니다.Terraform을 사용하는 경우 파이프라인을 실행할 때마다 새로운 상태 파일이 생성됩니다. 그렇죠?그건 다른 상태죠.
다른 곳에 보관했어요.그리고 실제로 쿼리할 방법도 없습니다.뭐가 뭔지 이해하고 싶으면
제 지원서 상태는 4~5까지 올라가야 돼요
다른 주 상점들, 그렇죠?그게 바로 진짜
개발자가 실제로 볼 수 없을 때는 신뢰를 쌓기가 어렵습니다.
과거에 일어난 일.따라서 ETCD는 우리의 단일 주 저장소 역할을 합니다.쿠버네티스는 기능 대신 컨트롤러라고 부릅니다. 그렇죠?하지만 결국에는
매일 Kubernetes 클러스터에 컨트롤러 또는 CRD를 추가할 때마다 실제로 무엇을 하고 계신가요?새 제품을 추가하고 있습니다.
해당 플랫폼의 기능.따라서 비밀 컨트롤러 또는 API 컨트롤러를 사용하는 경우
실제로 일어난 일입니다.새로운 걸 가능하게 하고 있잖아
행동 또는 새 기능.그럼 이걸 어떻게 더 확장할 수 있을까요?좋아요, 이미 하고 계시잖아요.이런 분들을 위해
이미 쿠버네티스를 사용하고 계시는데, 실제로 이미 사용하고 계신 거죠?따라서 이것이 반드시 새로운 것은 아닙니다. 단지 생각해 본 것일 뿐입니다.
다른 방식으로 말이죠.우리가 다음과 같은 것을 사용하고 싶은 또 다른 이유는
쿠버네티스는 추상화의 개념입니다.추상화는 복잡성을 없애는 데 도움이 됩니다.API에 대해 생각해보면 실제로 실제로 그런 일이 벌어지고 있죠?우리는 그걸 숨기고 있어요.
API 이면의 복잡성.다시 말씀드리지만, 다시 말씀드리죠.
뱅킹 예시와 API는 은행에서 한 계좌에서 돈을 가져와서 다른 계좌로 옮길 것인지를 묻는 것과는 다릅니다.그들은 여러분에게 묻지 않습니다.
어떻게 할 수 있는지 알려주기 위해서요그들은 그냥 “이봐, 뭐가 필요해?” 라고 묻죠.그러면 API가 처리해 줄 거예요.그럼 쿠버네티스에서 이 작업을 어떻게 할 수 있을까요?다들 잘 알고 계실 겁니다.
배포 추상화.디플로이먼트 추상화
실제로는 레플리카 세트를 추상화한 것으로,
포드에 대한 추상화이자 컨테이너에 대한 추상화입니다.자, 쿠버네티스의 장점은 새로운 기능 세트 (예: 청록색) 가 필요한 경우 이 모든 것을 버릴 수 있다는 것입니다.자, 이걸 버리지는 않을 거예요.대신 블루-그린을 추가하고 모든 것을 활용하면 됩니다.
아래에는 추상화가 있습니다.그래서 소프트웨어 개발 세계에서는 이걸 뭐라고 부르나요?
컴포저빌리티가 맞죠?우리는 실제로 할 수 있어요.
다양한 기능들을 한데 모아 하나로 통합해 보세요. 그렇죠?Argo를 사용하는 사람들은 청록색을 사용할 수 있습니다. 사실 그게 전부입니다.그들은 레플리카 세트, 포드, 컨테이너를 가지고 자신만의 블루-그린을 만듭니다.
그 위에 추상화가 있죠.좋아요, 그럼 확장해 보겠습니다.
좀 더 자세히 설명해 드릴게요.좋아요, 왜냐하면 개발자들은 신경 쓰지 않는다는 걸 기억하세요.
이런 것들에 대해서라면 말이죠.그들은 자신의 응용 프로그램에 관심을 갖고, 응용 프로그램에 관심을 갖습니다.
최대한 빨리 생산에 들어가죠?그럼 추상화를 더 만들어 보죠.따라서 쿠버네티스 내에서 새로운 추상화를 구축할 수 있습니다.
애플리케이션이라고 하죠?그게 바로 그들이 신경 쓰는 부분이죠.자, 적용이라는 용어는
제가 속한 조직에 있는 저에게는 의미가 있을 수 있습니다. 여러분 조직의 여러분 모두와는 다를 것입니다.이것은 단지 예일 뿐입니다.따라서 애플리케이션에는 수신이 필요할 수 있고, S3 버킷과 S3 버킷이 필요할 수 있습니다.
물론 IM 정책이 필요하며 현재 이를 구축하고 있습니다.
다른 추상화들도 마찬가지고요. 그리고 점들을 연결하는 것들이죠.티켓팅이 있는데 보통 Jira 티켓을 사용합니다.
또는 규정 준수를 강화하기 위한 ServiceNow 티켓을 사용할 수도 있습니다.따라서 규정 준수를 추상화할 수 있습니다.하지만 그게 전부가 아닙니다.배포할 환경이 필요합니다.개발 단계에 배포하고 있나요?그리고 그 환경에는 다음이 필요합니다.
계정, VPC, 서브넷.쿠버네티스 클러스터가 필요할 수도 있습니다.그리고 이 모든 추상화들은
쿠버네티스 안에서 살 수 있습니다.그래서 이 모든 걸 하나로 묶으면
다 합치면 뭐가 있을까요?우리에겐 이런 응용 프로그램이 있어요
환경을 가리키는데, 이 역시
규정 준수를 지원하고 변경 사항을 추적하는 데 도움이 되는 티켓팅 시스템.해당 애플리케이션이 있습니다.
인그레스, 버킷, 자체 티켓팅 시스템을 갖추고 있어 우리가 제대로 작동하는지 확인할 수 있습니다.
규정 준수 강화.이게 바로 개발자죠.
정말 신경 써요.이건 바로 이 응용 프로그램인데
이 작은 상자, 그렇게 많지는 않아요
그 밑에 있는 모든 것들이요그래서 우리가 초창기에 가지고 있던 파이프라인, 모든 의사소통, 그 모든 회의들이 우리가 생각하기 시작할 때 사라지기 시작합니다.
플랫폼으로서의 쿠버네티스를 생각해보고 컴포저빌리티에 대해 생각해 보세요.그냥 결합만 하면 됩니다.
점프하지 않고도 다양한 구성 요소를 사용할 수 있습니다.
이 미팅에 참여하세요.우리는 파이프라인에서 벗어났고 이것이 바로 쿠버네티스입니다.
우리가 할 수 있게 도와주죠, 그렇죠?이걸 단순화시켜주죠.개발자들의 관심은 다음과 같습니다.
인프라가 아닌 애플리케이션.그리고 여기에도 한 가지 더 있습니다.계속 이어지던 거 기억하시죠?
규정 준수 파이프라인, 그 비밀 파이프라인
그게 뒤에서 돌아가는 건가요?우리가 모른다는 걸 눈치채셨죠?
쿠버네티스용 이거 가지고 계신가요?그리고 우리가 그렇게 하지 않는 이유는
쿠버네티스에 이걸 설치한 이유는 우리가 이걸 가지고 있기 때문이죠.
지속적 제어 루프.이러한 지속적인 컴플라이언스의 제어 루프는 매우 기본적인 부분에 내장되어 있습니다.
쿠버네티스 패브릭 맞죠?그래서 쿠버네티스를 더 많이 활용할수록
우리 플랫폼의 경우, 맞아요, 모든 것이 있기 때문에 신뢰도가 높아지죠.
투명성이 높아질수록사실, 실제로
쿠버네티스에서 무언가를 쿼리하면, 여기가 제가 의도한 상태이고, 여기 제 실제 상태가 있습니다.
한 번의 API 호출로 모두 가능합니다.그리고 모든 단일 API
호출하면 스펙을 반환하고 그 다음 실제 상태를 반환합니다. 그렇죠?우리가 왜 그러냐면
쿠버네티스를 활용하고 싶은 이유는 규모가 크다는 것이죠.
컨트롤러 에코시스템 맞죠?이건 혼자서 하는 게 아니에요.이미 신뢰가 높고 투명성이 높은 커뮤니티를 활용하는 거죠.여기에는 몇 가지가 있습니다.
기능을 추가하는 데 사용할 수 있는 오픈 소스 컨트롤러.Argo에 대해 말씀드렸어요.직접 만들 필요는 없어요.
자동화에 블루-그린 기능을 직접 사용하고, Argo를 사용하여 이 기능을 도입하면 이제 추가 기능을 사용할 수 있습니다.
플랫폼 내부의 배포 시맨틱.또한 최근에 K-R-O, kro를 출시했습니다. 이 K-R-O, kro를 사용하면 ACK 위에 이러한 추상화를 구축할 수 있습니다. 그렇죠?쿠버네티스 친화적인 방식으로 AWS의 객체를 표현하기도 하죠?그래서 거대한 컨트롤러가 하나 있습니다.
이런 추상화 없이도 개발할 수 있게 해주는 생태계가 시중에 나와 있습니다.
코딩할 필요 없이 말이죠.하지만 물론 언젠가는
사용할 수 있는 기능이 제한될 수 있습니다.
코딩을 하거나 사용자 지정 컨트롤러를 직접 만들어야 하는데, 그렇게 할 수도 있습니다.이제 믹싱을 시작할 수 있습니다.
그리고 매칭과 작곡.좋아요.하지만 가장 중요한 것은, 이것이 무엇을 가능하게 하는가입니다.
조직에 적합한가요?이를 통해 우리 팀과 인간은 서로 다른 방식으로 협업할 수 있습니다.다시 말하지만, 우리는 점점 멀어지고 있습니다.
파이프라인과 상호작용이라는 개념에서 벗어나
글과 Jira 티켓, 이제 모든 것을 코드에 넣고 서로의 구성 요소를 가져와 새로운 것을 만드는 것까지.보시다시피 왼쪽에는 앱 팀 아키텍트가 있고 이 API의 왼쪽에는 데이터베이스가 있습니다.
아키텍트, 보안 규정 준수 등 모든 요구 사항을 티켓이 아니라 선언형 언어로 작성합니다. 그렇죠?쿠버네티스를 통해 이 작업을 수행할 수 있습니다.자, 여기서 가장 좋은 점은
쿠버네티스를 통해 이런 일을 할 수 있죠?정말 좋아요.사실 많이 가질 필요는 없어요.
이를 위해서는 워커 노드가 필요하지만 지금은 확장 가능한 컨트롤 플레인이 필요합니다.
컴포넌트나 컨테이너뿐만 아니라 플랫폼으로서 컨트롤 플레인에 많은 압박을 가하고 있습니다.
오케스트레이션 시스템.이것이 바로 EKS가 필요한 이유입니다.우리는 지난 7년 동안 EKS를 가장 확장 가능하고 관리되는 Kubernetes 컨트롤로 만들기 위해 노력해 왔습니다.
지구상의 비행기.따라서 EKS만 사용한다면 이 모든 것을 AWS에 위임하는 것이므로 이제 집중하기만 하면 됩니다.
실제로 그럴 필요 없이 플랫폼 구축에만 집중할 수 있습니다.
워커 노드를 여러 개 만들고 다른 곳에서 컨테이너에 있는 또 다른 API 세트를 관리하세요.저희가 대신 처리해 드리겠습니다.또 다른 좋은 점은
물론, 이미 말씀드렸지만, 혼자서 할 수 있는 건 아니죠?우리는 사람들을 다음과 같이 초대하고 있습니다.
커튼 뒤에 있는 테이블 반대편.이제 앱 개발자와 다른 팀뿐만 아니라 커뮤니티도 왼쪽으로 모을 수 있습니다.마지막으로, 플랫폼 엔지니어링을 하면서 자체 또는 자체 플랫폼에서 작성하는 독점 코드에서 벗어날 수 있기 때문에 이제 할 수 있습니다. 이제 우리의 도움을 받을 수 있습니다.청사진도 있고, CNOE도 있는데, 이는 우리의 의견입니다.
플랫폼 커뮤니티는 모두 저희와 함께 플랫폼을 구축하는 데 도움이 되는 수많은 구성과 오픈 소스 도구를 제공합니다.도구 구축을 도와줄 수 있는 전문가들이 있습니다. 왜냐하면 여러분이 구축을 하고 있다면
오픈소스와 함께라면 어떻게 작동하는지 잘 알고 있습니다.우리는 볼 수 있습니다.그게 바로 투명성이죠.따라서 플랫폼을 생각할 때는 더 이상 혼자서 고민할 필요가 없습니다.협업하는 게 아니라 다른 것을 생각하고 있는 거죠.
플랫폼 엔지니어링의 장벽, 그리고 이것이 바로 확장에 도움이 될 것입니다.이것이 토대입니다
신뢰를 쌓는 거죠?우리가 얻게 될 거예요본론으로 들어가야 돼요
개발자와 다른 사람들을 이 플랫폼 엔지니어링 팀의 커튼 뒤에 데려오고 있다는 것이죠.좋아요, 그럼 살펴보죠.
실제로 어떻게 보일까요?다시 Git으로 돌아가 봅시다. 여기서 가장 중요한 것은 개발자들이 실제로 추진하는 것입니다.
Git을 Git에 설정하세요.두 번째는 Argo, 즉 컨트롤러가 Git을 모니터링하여 변경 사항이 적용되었는지 확인하는 것입니다.아르고 또는 기타 CI/CD 시스템
그 안에 있는 파일을 API 서버로 푸시하겠습니다.참고로 이 시점에서는 실제로 신청하지 않았습니다.
쿠버네티스에 관한 모든 것.변경 사항은 없습니다.먼저 거쳐야 돼요
어드미션 컨트롤러, 그리고 다음 사항들을 확인하세요
변경은 유효한 변경이며, 좋은 변경입니다.
규정을 준수하는 변경이죠.ETCD로 푸시됩니다.
우리의 단일 상태 저장소입니다.다시 말씀드리지만, S3 버킷용입니다.RDS, 이건 용도일 수 있어요
여러분의 애플리케이션 맞죠?우리가 이야기했던 모든 추상화들이 이제 그 CD에 그대로 담겨 있습니다.이는 테넌트 네임스페이스에 저장됩니다.컨트롤러가 설치되어 있습니다.
거기서 듣고, 조정하고, 변화를 알아차리고, 나가서 어떤 API에든 연락하죠.물론 이제 이야기를 나눴습니다.
AWS API에 대해 많이 다루긴 했지만, 이걸 활용하면
기타 리소스, 기타 옵저버빌리티 리소스를 관리하세요.API가 있는 모든 것과 이제 통신하고 있습니다.
그리고 그러한 변경 사항을 적용하고 있습니다.여기의 7번은
이러한 변경 사항의 상태를 되찾는 거죠.이제 우리의 의도가 생겼고
우리의 상태는 같은 곳에 있고 그 CD에서 업데이트하고 있습니다.다시 여덟 단계로 내려가면 프레젠테이션 계층이 생겼습니다. 우리를 나타내는 단일 프레젠테이션 계층이죠.
네트워킹, 옵저버빌리티, 애플리케이션, 역사.개발자의 모든 것
작업을 완료하고 애플리케이션을 프로덕션 환경으로 전환해야 하는 경우, 사용자는 이를 통해 확인할 수 있습니다.
단일 프레젠테이션 레이어.이 예제에서는 Backstage를 사용하고 있습니다. 직접 Backstage를 만들고 다른 오픈 버전을 사용할 수 있습니다.
소스 도구를 사용하거나 공급업체를 이용하세요.하지만 아주 간단하게 만들 수 있습니다.
이제 단일 API 이면에 있는 모든 것을 갖추게 되었으니
쿠버네티스이지만 핵심은 API입니다.자동화로 돌아가 봅시다.몇 가지 주요 시사점을 말씀드리겠습니다.커뮤니티를 구축하고 협업하세요.자신을 생각하지 마세요
마치 한정된 리소스인 이 플랫폼 팀처럼 말이죠.오픈 소스에 대해 생각해 보세요. AWS를 생각해 보세요. 저희가 도와드리겠습니다. 그렇죠?더 큰 커뮤니티를 구축하세요.또 다른 하나는 제품에 대한 사고방식을 갖는 것입니다.여전히 자신이 공감할 수 있는 사람인지 확인해야 합니다.
개발자의 말에 귀를 기울이고 구축을 하고 있습니다.
정확히 그들이 필요로 하는 것이죠.API로 복잡성을 추상화하세요.이게 핵심이죠, 그렇죠?파이프라인에 대해 생각할 때 우리가 실제로 하고 있는 일은
그 복잡성과 그 모든 단계를 드러내면
개발자에게 직접 전달하기 때문에 별로 도움이 되지 않습니다.마지막으로 오픈 레버리지를 활용하세요.
투명성을 확보하고 차별화되지 않은 부분을 줄이세요
EKS를 활용하여 컨트롤 플레이트를 관리하면 됩니다.지금까지 Nirmal은 높은 수준에 대해 이야기해 왔습니다.제가 말씀드린 건데
조금 낮은 수준이긴 하지만 그래도 추상적이네요.다음으로 초대하고 싶습니다.
Adobe의 존 웨버 (John Weber) 가 만드는 방법에 대해 이야기합니다.
이것이 실제 현실입니다.그는 현실에서 이 일을 해냈어요.자, 여기 무대로 오세요, 존.힘내세요. - 감사합니다 선생님. - 고마워요.(청중 박수) - KUB301 방문을 환영합니다, 회의를 중단하는 방법.정말 고마워요, 아이작.Adobe의 이야기를 공유하게 되어 정말 기쁩니다.
오늘 이 자리에서 뵙겠습니다.어떻게 지내는지 모르겠어요
회사에서 일하지만 Adobe에서는 서비스를 제공받기가 정말 어려울 수 있습니다.주문이 들어옵니다.
신입 개발자가 함께 시작하고 실행할 수 있는 기간은 한 달입니다.
새로운 그린필드 서비스.코드를 작성해야 할 뿐만 아니라 아마도
옵저버빌리티에 액세스하기 위한 티켓을 만들려면
시스템이나 프로덕션, 그리고 사람이 나서서 해당 티켓에 응답할 때까지 기다리세요.한편, 그들은 실제로
코드를 작성하고, 코드를 배포하고, 통합을 테스트해야 합니다.그리고 인간들,
티켓이 어디로 갔는지, 돌아와서 이렇게 말하세요. “뭔지 모르겠어요.
나한테 부탁하는 거잖아.”그리고 물물교환 사이에
개발자에게 필요한 것이 무엇인지 생각해 보셔야 합니다.
제작 준비 상태.모든 모니터링 도구
모두 설정되었나요?알림 있어요?백업 전략은 무엇인가요?그리고 준비는 되셨나요?
문제가 발생했을 때 사고에 어떻게 대응하나요?그럴 것이기 때문이죠.저는 개발자 플랫폼 그룹에 속해 있는데 저희의 모토는 아주 간단합니다. 바로 개발자들이 글을 쓸 수 있도록 돕는 것입니다.
더 나은 소프트웨어를 더 빠르게.어떻게 하면 개발자들이 실제로 그렇게 할 수 있는 환경을 만들 수 있을까요?
그 결과를 달성할 수 있을까요?저는 단순화, 그리고 대부분의 경우 지나치게 단순화해야 하는 추상화와 플랫폼을 좋아합니다.
개발자를 위해.저도 저희 회사의 팬이에요
이 모든 것을 관리할 수 있는 AWS와 같은 클라우드 제공업체
그 어느 때보다 잘 됐어요.이걸 다 어디서 구할 수 있냐고요?
원칙이 교차하는 걸까요?아래쪽 상자에 Ethos라는 라벨이 붙은 것에 관심을 돌리고 싶어요.제 커리어의 어느 시점에서는 아마 모든 것을 다 해봤을 거예요.
Adobe에서 제공하는 고객 대상 제품.제 핵심 과제 중 하나는
일관성에 관한 거였어요.제가 말씀드리고 싶은 대로 Adobe는
일관성이 없습니다.기술적인 부분이 좀 필요할 것 같아요
전략에 대한 조정, 이봐, 우린 대중을 이용해야 해
AWS와 같은 클라우드 제공업체하지만 각 엔지니어링은
팀은 자신들의 구현을 독창적으로 만들곤 했습니다.모든 팀이 이 작업을 수행할 수 있을 때 어떻게 하면 스프롤을 방지할 수 있을까요?그리고 무엇보다 최악인 건, 끔찍하다는 거예요.
고객 경험, 그게 마지막이야
우리 모두가 원하는 것이죠.그래서 어도비에서는 Ethos를 만들기로 결정했고 몇 가지 큰 베팅을 해야 했습니다.그 중 일부는 맞았어요. 컨테이너와 도커였죠.그 중 일부는 틀렸어요, 메소스그래서 우리는 고객에게 일정 수준의 유연성을 제공해야 했습니다.그 중 일부는 원했습니다.
기본 인프라를 전혀 신경 쓰지 않는 턴키 솔루션이었는데 그게 바로 CaaS 또는
서비스형 컨테이너.또한 쿠버네티스가 바로 그런 곳이라는 것도 알게 되었습니다.
업계가 주도하고 있었고 일부 팀은 이를 원했습니다.
네이티브 API를 사용하고 고유한 API를 선택하고 싶었죠.
제가 말씀드리자면, 모험을 떠나요.그리고 그게 우리의 플랫폼이었어요.
서비스 오퍼링 또는 PaaS.따라서 확장성을 기반으로 구축해야 합니다.
쿠버네티스와 같은 기술 기반이 이를 가능하게 합니다.
예를 들어 Argo로 구동되는 GitOps로 향하는 방향으로 방향을 전환할 수 있을 것입니다.Nirmal이 말했듯이 저는 개발자들이 말 그대로 있다고 믿습니다.
한 가지 신경을 쓰는 건: “내 코드를 어떻게 만들 수 있을까?
최대한 빨리 제작할 수 있을까요?우리 모두가 일원이라는 점을 감안하면 제 사용자들은 무엇에 관심이 있고 저는 무엇에 관심이 있을까요?
Adobe의 대가족?그래서 Ethos는 이러한 기능을 공개하기 때문에 개발자들은 그럴 필요가 없습니다.
이런 것들에 대해 생각해 보세요.그들은 제가 클라우드를 어떻게 운영할지 고민할 필요가 없습니다.
대규모 인프라?그들은 생각할 필요가 없죠.
강력한 CI/CD 파이프라인인 CI/CD를 만드는 방법에 대해 말씀드리겠습니다.그들은 분명 원하지 않겠지요.
보안과 규정 준수에 대해 생각해 보고 싶었죠.물론 GPU와 같은 한정된 리소스에서는 항상 비용이 가장 중요합니다.그리고 우리가
통찰력을 제공할 수 있는 방법도 생각해 보고 싶습니다.
개발자의 고통을 흡수하고 개발자를 대신하여 조치를 취할 수 있을까요?여러분, 저희는 제품 팀입니다.할 수 없을 수도 있습니다.
Adobe 웹 사이트로 이동하여 Ethos를 구매하거나
가장 좋아하는 전자 상거래 스토어 (단, Adobe의 고객 또는 사용자인 경우)
제품은 Ethos를 사용합니다.그리고 저는 제품 팀이기 때문에 정말 많은 노력을 기울여야 합니다.
이해관계자와 연계하여 신뢰와 존중을 쌓았습니다.첫 번째 그룹은 내부 고객, 개발자입니다.네, 이 사람들은 고객입니다.제가 커리어 초기에 실패했던 것 중 하나는 이런 사람들한테 전화하는 걸 거부했다는 거였어요.
고객 여러분, 그렇죠?그들은 동료이고, 동료입니다.제가 완전히 틀렸어요.내 생각이 안 든다면
고객을 개발하면서 고객에 대한 존중과 공감의 수준을 높이지 않으면 실패할 것입니다.실패할 거예요.그렇다면 고객에게 필요한 것은 무엇일까요?명확한 문서.UX는 의미가 있습니다.사용하기를 원하지 않기 때문에 진입 장벽이 낮습니다.
사용하기 어려운 시스템.외부 고객.Adobe는 우리가 제공하는 모든 것의 발신음이자 패브릭입니다.우리는 이러한 목표를 달성하기 위해 최선을 다하고 있습니다.
모든 최종 사용자에게 고품질 기능과 가치를 제공하세요.AWS.AWS는 Adobe의 요구 사항을 충족할 수 있습니까?반대로, 제가 기부하고 있는 것은
AWS에 적절한 수준의 피드백을 보내서 그들이 그 추악한 복잡성을 완전히 숨기고 추상화할 수 있도록 말이죠.
보고 싶지 않은 것 같은데요?Adobe는 매우 부드러운 문화를 가지고 있습니다.우리는 빈 캔버스를 선물하는 것을 좋아합니다.
사용자들에게 잠금을 해제하고 이렇게 말하세요. “야, 가서 좀 만들어봐.
어도비가 선사하는 마법.”저희는 개발자들과 함께 이 작업을 진행하기도 합니다.보시다시피, 빈칸을 건네면
개발자를 캔버스로 덮으면 일이 잘못될 수 있습니다.그래서 우리가 해야 할 일은 개발자들이 현장에 온보딩할 수 있도록 풀뿌리 기반 게임을 만들어야 하는 것이었습니다.우리는 플랫폼으로 시작했습니다.
챔피언 프로그램.바닥에 부츠가 떨어지면
각 개발팀 내에 달성하고자 하는 목표에 대해 지지자와 프로모터가 있다면, 그리고 가장 중요한 것은
게임 내 스킨이 있으면 믿을 수 없을 정도로 강력하고 활기찬 커뮤니티를 구축할 수 있습니다.우리는 또한 이를 받아들였습니다.
내부 소스 모델.다음과 같은 모든 작업을 수행할 수 있는 리소스가 충분하지 않을 것입니다.
비즈니스는 여러분에게 필요한 일을 요구하고 있습니다.따라서 필요한 것은 이뿐만이 아닙니다.
기술을 확장하되 운영 방식도 확장해야 합니다.아주 잘 정의된 것이 있습니다.
어도비 내의 Ethos에 대한 공개 기여 모델.고객의 의견에 귀를 기울여야 합니다.그리고 우리는 CAB를 통해 이 작업을 수행합니다.우리는 정기적으로 사용자들과 함께 앉아서 그들의 고충에 귀를 기울이면 “이봐, 네가 내 일이나 내 삶을 훨씬 쉽게 만들고 있어.” 라고 말합니다.아니면 그들은 우리에게 이렇게 말합니다. “이봐, 방금 우리를 위해 뭘 만들었어?”거칠게 사랑해도 괜찮아.피드백은 선물입니다.이것이 바로 저희가 달성할 수 있었던 성과입니다.올해 우리는 받은 것을 받았습니다.
외부 기부금 건수의 6배
우리 조직에서, 에토스에 기부한 25,000건은 에토스 팀 외부에서 이루어졌어요. 25,000건.우리는 약 1,500개를 보유하고 있습니다.
Adobe 내 기여자들도 이 여정의 일환으로 참여했습니다.이는 작년의 230명에서 증가한 수치입니다.1,500명의 추가 개발자가 코드베이스에 기꺼이 기여한다고 상상해 보세요.정말 놀라워요.성공하려면 건물을 지어야 합니다.
책임감 있는 문화.저는 엔지니어들을 믿어요.
제품 소유자로서 행동하는 것, 애자일 (agile) 의 의미로 말하자면, 제 제품에 해를 끼치지 마세요.
매니저 친구들도 있지만 모든 엔지니어링 매니저는 고객 옹호자가 되어야 합니다.그들은 자신이 만들고 있는 것을 이해하고 비전을 가지고 있어야 합니다.
그리고 어떻게 작동해야 하는지도 말이죠.그들은 가지고 있어야 합니다
사람들과의 지속적인 대화
그들은 가치를 전달하고 있습니다.위대한 베르너의 말을 인용하자면
보겔스, “건설하고 운영하세요.”누가 출연하게 될지 맞춰봐
화요일 새벽 2시에 전화하면 일이 깨지나요?네.소프트웨어를 만드는 사람들이죠.그리고 일이 잘못되면 개발자들은 이를 이해하고 공감하며 공유해야 합니다.
고객이 겪고 있는 고통과 부담의 일부.놀랍게도 사람들은 시스템 문제가 계속되면 해결하려는 의욕이 강하다는 것입니다.
매일 밤 잠에서 깨요.가서 알아봐개발자, 소비하는 사람들
클라우드를 이해하기 위해 우리가 구축하고 있는 놀라운 기능은 무료가 아닙니다.이 물건에는 실제 비용이 듭니다.그래서 저희는 세밀한 구조를 만들었습니다.
대시보드와 비용 기여도를 확인한 다음 해당 팀에 청구서를 보냅니다.그리고 저는 Adobe의 돈에 관심이 있고 그들은 Adobe의 돈에 관심이 있기 때문에 우리는 방향을 바꾸어 우리가 어떻게 할 수 있을지 생각해야 했습니다.
그 고통을 조금이나마 덜어주세요.그리고 오토매틱 시스템을 통해 해냈죠.
리소스 컨피규레이터 또는 ARC.손을 들어보세요.개발자를 누가 믿나요?
프로덕션 환경을 처음 배포할 때 컨테이너 크기를 제대로 조정하고 계신가요?아무도 없나요?아뇨, 알겠어요.그렇게 생각했어요.ARC는 우리가 만든 아주 간단한 시스템입니다.
Adobe 연구팀.엔지니어가 요청하는 경우
Ethos 클러스터의 용량을 고려하여 다음과 같이 포드를 배포합니다.
개방형 정책 에이전트 또는 OPA를 통해 다음을 수행할 수 있는 기능을 평가하고 후크를 제공합니다.
포드 사양을 변경하기 위해서요.이제 가용 용량이 있는 작업자에게 워크로드를 배포한 다음 사용률을 기록합니다.
Prometheus를 통해 메트릭을 저장한 다음 장기 시계열에 저장합니다.
Cortex와 같은 데이터베이스.그런 다음 ARC는 사용률을 살펴보기 시작하고 다음을 통해 개발자에게 컨테이너 크기 조정을 권장합니다.
자동 풀 리퀘스트.그리고 일단 개발자가 수락하면
PR을 하고 말하죠. “그거 알아?제가 잘못 이해했을지도 몰라요. 일단 병합되면 GitOps가 마법을 부리고 인수할 것입니다. 그리고 우리는 계속 진행해 나갈 것입니다.
컨테이너 사이징이 해결되었습니다.다른 서비스 제공업체와 마찬가지로 저도 강제력이 있어야 합니다.
내 사용자들과 계약을 맺으세요.목표를 설정하고, 측정하고, 스스로 책임을 져야죠.
결과와 결과에 대해서요저는 이를 포용함으로써 이를 실천합니다.
서비스 수준 지표 및 서비스 수준 목표.핵심 기능을 정의하여 배포할 수 있나요?확장할 수 있나요?네트워크 연결이 가능한가요?그런 다음 측정하고
제 성과를 지속적으로 평가해요.저도 DKS를 완전히 받아들입니다.여러분, 영광은 없습니다.
EC2 노드의 쿠버네티스.그렇죠?할 일이 훨씬 더 많아요.모두가 노력해야 합니다.
파산 선고, 인프라 파산 선고를 향해,
이 모든 걸 아마존에 넘겨주는 거죠.문제가 발생해도 문제가 생길 경우 팀에서 고품질 RCA를 작성할 수 있을까요?그뿐만 아니라 편할 수도 있겠죠.
외부에 퍼블리싱한다고요?그 기준을 정말 높게 설정해야 합니다.필요에 따라 서비스를 제공하는 고객이 된다고 상상해 보세요.
내 숙제를 실시간으로 확인해 잘 받고 있는지 확인해 보세요.
약속한 거 말이야Adobe에서는 이 작업을 수행할 수 있었습니다.다음은 회사 내 누구나 사용할 수 있는 샘플 대시보드입니다.그리고 이 예시에서는
이그레스 기능의 상태를 평가하고 있습니다.
Ethos 클러스터를 위해 말이죠.제가 배송하고 있나요?
Kubernetes 클러스터의 발신 네트워크 연결을 보장하겠다고 약속했습니다.
우리 팀이 관리하는 거요?저도 제 고객을 소중히 여깁니다.
안정성과 가동 시간.옵저버빌리티를 얻는다는 건 알아요.
일하는 건 정말 힘들어요.상담원, 컬렉터, 지표,
추적, 로그, 이벤트 등.그래서 우리는 오픈 SLO를 중심으로 모였습니다.여러분, 이 문제는 많은 경우에 해결되었습니다.삶을 더 힘들게 만들고 건물을 짓는 방법을 알아낼 필요는 없습니다.
이건 혼자서 할 수 있는 일이에요. 처음에 해야겠다고 생각했던 것처럼 말이에요.그래서 우리의 모든 응용 프로그램이 켜져 있습니다.
Ethos는 가능한 경우 자동으로 계측됩니다.어쩔 수 없겠네요.
타겟이 무엇이어야 하는지와 같은 사용자의 몇 가지 입력.하지만 이제 툴링이 그 자리를 대신하고 개방형 SLO의 마법을 활용하여 계산할 수 있게 되었습니다.
Ethos에 있는 모든 애플리케이션의 오류 예산이 자동으로 책정됩니다.그렇다면 우리는 어디에 투자하고 있으며 그 수익은 얼마일까요?
그 투자에 대해?운영 확장과 관련하여 제가 살펴보는 주요 KPI는 다음과 같습니다.
클러스터 대 운영자 비율.EKS로 전환하고 인프라 파산을 선언한 이후 규모를 확장했다는 사실을 말씀드리게 되어 기쁩니다.
운영자 대 클러스터 비율이 10 대 1에서 30 대 1로 증가했습니다.또한 은퇴를 고려하고 있습니다.
자체 개발 솔루션이며 GitOps와 Argo를 수용합니다.제너레이티브 AI와 같은 새로운 사용 사례에서는 훨씬 더 유연합니다.마지막으로 마찰을 줄여야 합니다.더 적은 공간을 확보해야 합니다.
개발자들이 떠난다는 것은 개발자들이 더 행복해질 것이라는 뜻입니다
그러면 작업도 더 빨라질 것입니다.우리는 이렇게 해냈습니다.
모든 포털을 하나로 통합하고 Backstage를 도입했습니다.그렇다면 이 작업의 결과는 무엇일까요?4쿼터가 끝날 때 이 점수판은 무엇을 보여줄까요?그리고 우리가 이기고 있는 걸까요?우리가 이기고 있어요.개발자는 배포할 수 있습니다.
단 며칠 만에 완전한 그린필드 스택을 얻을 수 있습니다.
한 달 내내 기다리는 것보다 말이죠.그나저나 회의 횟수도 적습니다.그리고 Greenfield 스택에는 옵저버빌리티 플랫폼이 포함되어 있습니다. 제가 말씀드릴 수 있는 것은 이 플랫폼이 있다는 것을 기쁘게 생각합니다.
사고를 탐지하는 데 걸리는 시간을 75% 이상 단축했습니다.앞으로 나아가면서 비용은 계속해서 주요 주제가 될 것입니다.
제너레이티브 AI 시대.그리고 거래를 할 때는
한정된 리소스와 GPU와 같은 값비싼 리소스로 Ethos를 통해 우리는 할 수 있었습니다.
올해 초에 비용 효율성 목표를 달성했습니다.드디어 Ethos를 구축해 나갔습니다.
내부 Adobe 플랫폼 덕분에 개발자들은 훨씬 더 행복해졌습니다. 개발자들은 “어떻게 하면 프로덕션에 갈 수 있을까?” 라는 것에만 신경을 썼기 때문입니다.
최대한 빨리?”그럼 행복하다면
개발자 여러분, 그게 무슨 뜻일까요?그 말인즉슨 그들이 더 뛰어나다는 뜻이죠.
생산적인 개발자, 그러니까 넌
더 행복한 고객을 확보하세요.들어주셔서 감사합니다.니르말한테 돌려줄게그가 우리를 집으로 데려다 줄게요. - 고마워요.
(청중들의 박수 소리) 자, 이제 알게 되셨네요. 왜 건물을 짓는지 보셨을 겁니다.
EKS 기반 플랫폼은 중요하며 이를 구축하는 데 도움이 됩니다.
끊임없이 변화하는 요구에 적응할 수 있는 신뢰할 수 있고 확장 가능한 시스템이지만 직접 할 필요는 없습니다.CNOE를 확인해 보세요.CONE는 클라우드 네이티브입니다.
운영 우수성, 오픈소스, 오픈 커뮤니티.이건...Adobe와 같은 많은 고객 및 고객과 이야기를 나눕니다.
그들은 함께 모여 CNCF 환경에서 옵저버빌리티를 위해 어떤 툴을 원하는지, 어떤 툴을 배포에 사용하고 싶은지 알아내려고 애쓰는 대신 그냥 만들어 보자고 말했습니다.
아키텍처에 대한 의견을 제시한 다음 이를 배포할 수 있는 오픈 소스 도구인 도구를 구축했습니다.
이러한 의견을 가진 플랫폼.이것이 바로 CNOE입니다.확인해 보세요.활용할 수 있고
지금 바로 플랫폼을 가속화하세요.그렇다면 어떻게 하면 매력적인 플랫폼을 구축할 수 있을까요?신뢰에 집중하고, 투명성을 높이고,
신뢰성을 통한 협업과 공감.플랫폼을 지속적으로 진화하는 제품이라고 생각하세요.설문조사, 개발자 인터뷰, 필요하다고 생각하는 사람들을 인터뷰하세요
플랫폼을 사용하고 있는데 개발자들이 왜 그렇게 하지 않는지 물어보세요.컨트롤러를 통해 복잡성을 추상화하세요.
EKS 또는 쿠버네티스에서 커뮤니티를 확장하세요
조직뿐만 아니라 개발자, 기타 이해 관계자, AWS 및 오픈 소스 커뮤니티도 포함됩니다.여러분은 혼자가 아닙니다.오늘 세션에 와주셔서 감사합니다.다음은 몇 가지 다른 세션입니다.
쿠버네티스 트랙에서 진행되고 있는 일들이요. 관련된 것들이죠.일부는 이미 발생했으며 동영상은 계속 공개될 예정입니다.
브레이크아웃인 경우 YouTube를 사용하세요.CNOE 워크숍을 확인해 보세요.
직접 체험하고 싶으시다면 내일 목요일에
CNOE를 사용한 IDP 구축에 대해그리고 몇 가지 새로운 것이 있었습니다.
KUB201 에서 새로운 기능이 포함된 발표가 있었습니다.그럼 몇 가지 새로운 기능에 대한 강연을 확인해보고 싶으실 텐데요.
쿠버네티스에서 출시하고 있는 이 제품과 그 위치는 어디입니까?
우리는 EKS를 사용할 것입니다.EKS 교육을 확인해 보세요.따라서 처음 사용하는 경우
EKS를 처음 접하는 쿠버네티스는 무료 EKS 배지와 교육을 제공합니다.그리고 오늘 우리 세션에서는
속도를 높이는 데 도움이 되는 모든 링크와 리소스가 포함된 이 QR 코드를 확인해 보세요.
플랫폼 구축.즐거운 플랫폼 되세요. 모두 즐거운 시간 보내셨으면 좋겠어요.(니르말 낄낄 웃음)
(관객 박수)